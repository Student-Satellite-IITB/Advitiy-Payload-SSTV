
Image Write EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000059c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00802004  00802004  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000067eb  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ae7  00000000  00000000  000070d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ca  00000000  00000000  0000abbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  0000bf88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b1e  00000000  00000000  0000c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014f5  00000000  00000000  00010016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0001150b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_26>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e9       	ldi	r30, 0x9C	; 156
 214:	f5 e0       	ldi	r31, 0x05	; 5
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 30       	cpi	r26, 0x04	; 4
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a4 e0       	ldi	r26, 0x04	; 4
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a6 32       	cpi	r26, 0x26	; 38
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 21 01 	call	0x242	; 0x242 <main>
 23a:	0c 94 cc 02 	jmp	0x598	; 0x598 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <main>:
#include "spi_driver.h"
#include "TC_driver.h"
#include "NXH5104.h"

int main(void)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <main+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	uint8_t sectorAdress=0, pageAddress=0, byteAddress=0, dataByte=0, byteCount=0;
 24c:	19 82       	std	Y+1, r1	; 0x01
 24e:	1a 82       	std	Y+2, r1	; 0x02
 250:	1b 82       	std	Y+3, r1	; 0x03
	setUp16MhzExternalOsc();		//Required for setting 16 Mhz frequency
 252:	0e 94 39 02 	call	0x472	; 0x472 <setUp16MhzExternalOsc>
	SetUsart();						
 256:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SetUsart>
	eepromInit();					//Initialize SPI for EEPROM on Port C
 25a:	0e 94 46 01 	call	0x28c	; 0x28c <eepromInit>
	
	for(byteCount=0; byteCount<163840; byteCount++)								//Loop for writing image bytes to eeprom	
	{
		dataByte=USARTrecieve();												//Transfer of byte from PC to ATxmega
 25e:	0e 94 9a 02 	call	0x534	; 0x534 <USARTrecieve>
 262:	18 2f       	mov	r17, r24
		eepromMasterLow(DOWNLINK1);												//Set slave select low for eeprom
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 76 01 	call	0x2ec	; 0x2ec <eepromMasterLow>
		eepromWriteByte(&sectorAdress, &pageAddress, &byteAddress, dataByte);	//Transcieve byte
 26c:	21 2f       	mov	r18, r17
 26e:	ae 01       	movw	r20, r28
 270:	4d 5f       	subi	r20, 0xFD	; 253
 272:	5f 4f       	sbci	r21, 0xFF	; 255
 274:	be 01       	movw	r22, r28
 276:	6e 5f       	subi	r22, 0xFE	; 254
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 b0 01 	call	0x360	; 0x360 <eepromWriteByte>
		eepromMasterHigh(DOWNLINK1);											//Pull slave select back to high
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 93 01 	call	0x326	; 0x326 <eepromMasterHigh>
 28a:	e9 cf       	rjmp	.-46     	; 0x25e <main+0x1c>

0000028c <eepromInit>:
uint8_t masterSendDataD[1];
uint8_t masterReceivedDataD[1];
int eepromID = DOWNLINK2;

void eepromInit()
{
 28c:	af 92       	push	r10
 28e:	cf 92       	push	r12
 290:	ef 92       	push	r14
 292:	0f 93       	push	r16
	PORTD.DIRSET = PIN2_bm;																							//Set SS1 as output
 294:	e0 e6       	ldi	r30, 0x60	; 96
 296:	f6 e0       	ldi	r31, 0x06	; 6
 298:	34 e0       	ldi	r19, 0x04	; 4
 29a:	31 83       	std	Z+1, r19	; 0x01
	PORTD.DIRSET = PIN3_bm;																							//Set SS2 as output
 29c:	28 e0       	ldi	r18, 0x08	; 8
 29e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN4_bm;																							//Set SS3 as output
 2a0:	90 e1       	ldi	r25, 0x10	; 16
 2a2:	91 83       	std	Z+1, r25	; 0x01
	PORTD.DIRSET = PIN5_bm;																							//MOSI as output
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN7_bm;																							//SCK as output
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	81 83       	std	Z+1, r24	; 0x01
	PORTD.PIN2CTRL = PORT_OPC_WIREDANDPULL_gc;																		//Set PullUp at SS1 
 2ac:	88 e3       	ldi	r24, 0x38	; 56
 2ae:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_WIREDANDPULL_gc;																		//Set PullUp at SS2
 2b0:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;																		//Set PullUp at SS3
 2b2:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.OUTSET = PIN2_bm;																							//Set SS1 high for no Slave
 2b4:	35 83       	std	Z+5, r19	; 0x05
	PORTD.OUTSET = PIN3_bm;																							//Set SS2 high for no Slave
 2b6:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTSET = PIN4_bm;																							//Set SS3 high for no Slave
 2b8:	95 83       	std	Z+5, r25	; 0x05
	SPI_MasterInit(&spiMasterD,&SPID,&PORTD,false,SPI_MODE_2_gc,SPI_INTLVL_OFF_gc,true,SPI_PRESCALER_DIV4_gc);		//Initialize device as master (Mode 2, MSB first, 2X speed, prescaler 4)
 2ba:	a1 2c       	mov	r10, r1
 2bc:	cc 24       	eor	r12, r12
 2be:	c3 94       	inc	r12
 2c0:	e1 2c       	mov	r14, r1
 2c2:	08 e0       	ldi	r16, 0x08	; 8
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	40 e6       	ldi	r20, 0x60	; 96
 2c8:	56 e0       	ldi	r21, 0x06	; 6
 2ca:	60 ec       	ldi	r22, 0xC0	; 192
 2cc:	79 e0       	ldi	r23, 0x09	; 9
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
 2d0:	90 e2       	ldi	r25, 0x20	; 32
 2d2:	0e 94 00 02 	call	0x400	; 0x400 <SPI_MasterInit>
	eepromID=DOWNLINK2;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 2de:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
}
 2e2:	0f 91       	pop	r16
 2e4:	ef 90       	pop	r14
 2e6:	cf 90       	pop	r12
 2e8:	af 90       	pop	r10
 2ea:	08 95       	ret

000002ec <eepromMasterLow>:

void eepromMasterLow(int eepromID)
{
	switch (eepromID)
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	91 05       	cpc	r25, r1
 2f0:	61 f0       	breq	.+24     	; 0x30a <eepromMasterLow+0x1e>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	81 f0       	breq	.+32     	; 0x318 <eepromMasterLow+0x2c>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	a1 f4       	brne	.+40     	; 0x324 <eepromMasterLow+0x38>
	{
		case 1 : SPI_MasterSSLow(ssport2, PIN2_bm); break;
 2fc:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssport2>
 300:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssport2+0x1>
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	86 83       	std	Z+6, r24	; 0x06
 308:	08 95       	ret
		case 2 : SPI_MasterSSLow(ssport2, PIN3_bm); break;
 30a:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssport2>
 30e:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssport2+0x1>
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	86 83       	std	Z+6, r24	; 0x06
 316:	08 95       	ret
		case 3 : SPI_MasterSSLow(ssport2, PIN4_bm); break;
 318:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssport2>
 31c:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssport2+0x1>
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	86 83       	std	Z+6, r24	; 0x06
 324:	08 95       	ret

00000326 <eepromMasterHigh>:
	}
}

void eepromMasterHigh(int eepromID)
{
	switch (eepromID)
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	91 05       	cpc	r25, r1
 32a:	61 f0       	breq	.+24     	; 0x344 <eepromMasterHigh+0x1e>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	91 05       	cpc	r25, r1
 330:	81 f0       	breq	.+32     	; 0x352 <eepromMasterHigh+0x2c>
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	a1 f4       	brne	.+40     	; 0x35e <eepromMasterHigh+0x38>
	{
		case 1 : SPI_MasterSSHigh(ssport2, PIN2_bm); break;
 336:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssport2>
 33a:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssport2+0x1>
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	85 83       	std	Z+5, r24	; 0x05
 342:	08 95       	ret
		case 2 : SPI_MasterSSHigh(ssport2, PIN3_bm); break;
 344:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssport2>
 348:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssport2+0x1>
 34c:	88 e0       	ldi	r24, 0x08	; 8
 34e:	85 83       	std	Z+5, r24	; 0x05
 350:	08 95       	ret
		case 3 : SPI_MasterSSHigh(ssport2, PIN4_bm); break;
 352:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssport2>
 356:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssport2+0x1>
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	85 83       	std	Z+5, r24	; 0x05
 35e:	08 95       	ret

00000360 <eepromWriteByte>:
	}
}

void eepromWriteByte(uint8_t* sectorAddress, uint8_t* pageAddress, uint8_t* byteAddress, uint8_t data) //address to be sent for last byte which was written
{
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	7c 01       	movw	r14, r24
 370:	8b 01       	movw	r16, r22
 372:	ea 01       	movw	r28, r20
 374:	d2 2e       	mov	r13, r18
	if(*byteAddress==255)							//Check for end of page
 376:	88 81       	ld	r24, Y
 378:	8f 3f       	cpi	r24, 0xFF	; 255
 37a:	89 f4       	brne	.+34     	; 0x39e <eepromWriteByte+0x3e>
	{
		if(*pageAddress==255)						//Check for end of sector
 37c:	fb 01       	movw	r30, r22
 37e:	80 81       	ld	r24, Z
 380:	8f 3f       	cpi	r24, 0xFF	; 255
 382:	41 f4       	brne	.+16     	; 0x394 <eepromWriteByte+0x34>
		{
			*(sectorAddress)=*(sectorAddress)+1;
 384:	f7 01       	movw	r30, r14
 386:	80 81       	ld	r24, Z
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	80 83       	st	Z, r24
			*(pageAddress) = 0;
 38c:	fb 01       	movw	r30, r22
 38e:	10 82       	st	Z, r1
			*byteAddress = 0;
 390:	18 82       	st	Y, r1
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <eepromWriteByte+0x42>
		}
		else 
		{
			*(pageAddress)=*(pageAddress)+1;
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	fb 01       	movw	r30, r22
 398:	80 83       	st	Z, r24
			*byteAddress=0;
 39a:	18 82       	st	Y, r1
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <eepromWriteByte+0x42>
		}
	}
	else *(byteAddress)=*(byteAddress)+1;
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	88 83       	st	Y, r24
	eepromMasterLow(eepromID);
 3a2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 3a6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 3aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <eepromMasterLow>
	SPI_MasterTransceiveByte(&spiMasterD, WRITE);
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	8f e0       	ldi	r24, 0x0F	; 15
 3b2:	90 e2       	ldi	r25, 0x20	; 32
 3b4:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, *sectorAddress);
 3b8:	f7 01       	movw	r30, r14
 3ba:	60 81       	ld	r22, Z
 3bc:	8f e0       	ldi	r24, 0x0F	; 15
 3be:	90 e2       	ldi	r25, 0x20	; 32
 3c0:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, *pageAddress);
 3c4:	f8 01       	movw	r30, r16
 3c6:	60 81       	ld	r22, Z
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	90 e2       	ldi	r25, 0x20	; 32
 3cc:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, *byteAddress);
 3d0:	68 81       	ld	r22, Y
 3d2:	8f e0       	ldi	r24, 0x0F	; 15
 3d4:	90 e2       	ldi	r25, 0x20	; 32
 3d6:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, data);
 3da:	6d 2d       	mov	r22, r13
 3dc:	8f e0       	ldi	r24, 0x0F	; 15
 3de:	90 e2       	ldi	r25, 0x20	; 32
 3e0:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_MasterTransceiveByte>
	eepromMasterHigh(eepromID);
 3e4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 3e8:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 3ec:	0e 94 93 01 	call	0x326	; 0x326 <eepromMasterHigh>
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	08 95       	ret

00000400 <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 400:	af 92       	push	r10
 402:	cf 92       	push	r12
 404:	ef 92       	push	r14
 406:	0f 93       	push	r16
 408:	fc 01       	movw	r30, r24
 40a:	60 83       	st	Z, r22
 40c:	71 83       	std	Z+1, r23	; 0x01
 40e:	42 83       	std	Z+2, r20	; 0x02
 410:	53 83       	std	Z+3, r21	; 0x03
 412:	14 82       	std	Z+4, r1	; 0x04
 414:	c1 10       	cpse	r12, r1
 416:	02 c0       	rjmp	.+4      	; 0x41c <SPI_MasterInit+0x1c>
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	01 c0       	rjmp	.+2      	; 0x41e <SPI_MasterInit+0x1e>
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	9a 2d       	mov	r25, r10
 420:	90 64       	ori	r25, 0x40	; 64
 422:	a9 2e       	mov	r10, r25
 424:	a8 2a       	or	r10, r24
 426:	21 11       	cpse	r18, r1
 428:	02 c0       	rjmp	.+4      	; 0x42e <SPI_MasterInit+0x2e>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	01 c0       	rjmp	.+2      	; 0x430 <SPI_MasterInit+0x30>
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	a8 2a       	or	r10, r24
 432:	00 61       	ori	r16, 0x10	; 16
 434:	0a 29       	or	r16, r10
 436:	db 01       	movw	r26, r22
 438:	0c 93       	st	X, r16
 43a:	a0 81       	ld	r26, Z
 43c:	b1 81       	ldd	r27, Z+1	; 0x01
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	ec 92       	st	X, r14
 442:	15 82       	std	Z+5, r1	; 0x05
 444:	16 82       	std	Z+6, r1	; 0x06
 446:	02 80       	ldd	r0, Z+2	; 0x02
 448:	f3 81       	ldd	r31, Z+3	; 0x03
 44a:	e0 2d       	mov	r30, r0
 44c:	80 ea       	ldi	r24, 0xA0	; 160
 44e:	81 83       	std	Z+1, r24	; 0x01
 450:	0f 91       	pop	r16
 452:	ef 90       	pop	r14
 454:	cf 90       	pop	r12
 456:	af 90       	pop	r10
 458:	08 95       	ret

0000045a <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 45a:	dc 01       	movw	r26, r24
 45c:	ed 91       	ld	r30, X+
 45e:	fc 91       	ld	r31, X
 460:	11 97       	sbiw	r26, 0x01	; 1
 462:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
 464:	ed 91       	ld	r30, X+
 466:	fc 91       	ld	r31, X
 468:	82 81       	ldd	r24, Z+2	; 0x02
 46a:	88 23       	and	r24, r24
 46c:	ec f7       	brge	.-6      	; 0x468 <SPI_MasterTransceiveByte+0xe>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 46e:	83 81       	ldd	r24, Z+3	; 0x03
	//PORTF_OUTCLR=PIN0_bm|PIN1_bm|PIN2_bm|PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
	//PORTF_OUTSET=result;
	return(result);
}
 470:	08 95       	ret

00000472 <setUp16MhzExternalOsc>:
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;	//Set Prescaler 1
}

void setUp16MhzExternalOsc()
{
	PORTD_DIR = 0x01;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 478:	8b ec       	ldi	r24, 0xCB	; 203
 47a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
 47e:	e0 e5       	ldi	r30, 0x50	; 80
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	88 60       	ori	r24, 0x08	; 8
 486:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
 488:	e1 e5       	ldi	r30, 0x51	; 81
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	83 ff       	sbrs	r24, 3
 490:	fd cf       	rjmp	.-6      	; 0x48c <setUp16MhzExternalOsc+0x1a>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
 492:	88 ed       	ldi	r24, 0xD8	; 216
 494:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 49c:	08 95       	ret

0000049e <USART_DataRegEmpty>:
	uint16_t LSdata = (data & 0x00FF);				//filter out LS
	sei();											//Enable global interrupts
	USART_TXBuffer_PutByte(&USART_data, MSdata);	//Write MSdata and wait for transfer
	USART_TXBuffer_PutByte(&USART_data, LSdata);	//Write LSdata and wait for transfer
	cli();											//Disable global interrupts
}
 49e:	fc 01       	movw	r30, r24
 4a0:	96 85       	ldd	r25, Z+14	; 0x0e
 4a2:	85 85       	ldd	r24, Z+13	; 0x0d
 4a4:	98 13       	cpse	r25, r24
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <USART_DataRegEmpty+0x18>
 4a8:	01 90       	ld	r0, Z+
 4aa:	f0 81       	ld	r31, Z
 4ac:	e0 2d       	mov	r30, r0
 4ae:	83 81       	ldd	r24, Z+3	; 0x03
 4b0:	8c 7f       	andi	r24, 0xFC	; 252
 4b2:	83 83       	std	Z+3, r24	; 0x03
 4b4:	08 95       	ret
 4b6:	86 85       	ldd	r24, Z+14	; 0x0e
 4b8:	df 01       	movw	r26, r30
 4ba:	a8 0f       	add	r26, r24
 4bc:	b1 1d       	adc	r27, r1
 4be:	17 96       	adiw	r26, 0x07	; 7
 4c0:	8c 91       	ld	r24, X
 4c2:	a0 81       	ld	r26, Z
 4c4:	b1 81       	ldd	r27, Z+1	; 0x01
 4c6:	8c 93       	st	X, r24
 4c8:	86 85       	ldd	r24, Z+14	; 0x0e
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	83 70       	andi	r24, 0x03	; 3
 4ce:	86 87       	std	Z+14, r24	; 0x0e
 4d0:	08 95       	ret

000004d2 <SetUsart>:
 4d2:	e0 e4       	ldi	r30, 0x40	; 64
 4d4:	f6 e0       	ldi	r31, 0x06	; 6
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	81 83       	std	Z+1, r24	; 0x01
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	82 83       	std	Z+2, r24	; 0x02
 4de:	a7 e1       	ldi	r26, 0x17	; 23
 4e0:	b0 e2       	ldi	r27, 0x20	; 32
 4e2:	e0 ea       	ldi	r30, 0xA0	; 160
 4e4:	f8 e0       	ldi	r31, 0x08	; 8
 4e6:	ed 93       	st	X+, r30
 4e8:	fc 93       	st	X, r31
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	12 96       	adiw	r26, 0x02	; 2
 4f0:	8c 93       	st	X, r24
 4f2:	12 97       	sbiw	r26, 0x02	; 2
 4f4:	1c 96       	adiw	r26, 0x0c	; 12
 4f6:	1c 92       	st	X, r1
 4f8:	1c 97       	sbiw	r26, 0x0c	; 12
 4fa:	1b 96       	adiw	r26, 0x0b	; 11
 4fc:	1c 92       	st	X, r1
 4fe:	1b 97       	sbiw	r26, 0x0b	; 11
 500:	1e 96       	adiw	r26, 0x0e	; 14
 502:	1c 92       	st	X, r1
 504:	1e 97       	sbiw	r26, 0x0e	; 14
 506:	1d 96       	adiw	r26, 0x0d	; 13
 508:	1c 92       	st	X, r1
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	85 83       	std	Z+5, r24	; 0x05
 50e:	83 81       	ldd	r24, Z+3	; 0x03
 510:	8f 7c       	andi	r24, 0xCF	; 207
 512:	80 61       	ori	r24, 0x10	; 16
 514:	83 83       	std	Z+3, r24	; 0x03
 516:	8c e0       	ldi	r24, 0x0C	; 12
 518:	86 83       	std	Z+6, r24	; 0x06
 51a:	17 82       	std	Z+7, r1	; 0x07
 51c:	84 81       	ldd	r24, Z+4	; 0x04
 51e:	80 61       	ori	r24, 0x10	; 16
 520:	84 83       	std	Z+4, r24	; 0x04
 522:	84 81       	ldd	r24, Z+4	; 0x04
 524:	88 60       	ori	r24, 0x08	; 8
 526:	84 83       	std	Z+4, r24	; 0x04
 528:	e0 ea       	ldi	r30, 0xA0	; 160
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	82 81       	ldd	r24, Z+2	; 0x02
 52e:	81 60       	ori	r24, 0x01	; 1
 530:	82 83       	std	Z+2, r24	; 0x02
 532:	08 95       	ret

00000534 <USARTrecieve>:

uint8_t USARTrecieve()
{
	uint8_t data;
	while(!USART_IsRXComplete(&USART));				//Wait for reception of data
 534:	e0 ea       	ldi	r30, 0xA0	; 160
 536:	f8 e0       	ldi	r31, 0x08	; 8
 538:	81 81       	ldd	r24, Z+1	; 0x01
 53a:	88 23       	and	r24, r24
 53c:	ec f7       	brge	.-6      	; 0x538 <USARTrecieve+0x4>
	data = USART_GetChar(&USART);
 53e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	return data;
}
 542:	08 95       	ret

00000544 <__vector_26>:

ISR(USARTC0_DRE_vect)
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	0b b6       	in	r0, 0x3b	; 59
 550:	0f 92       	push	r0
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	4f 93       	push	r20
 558:	5f 93       	push	r21
 55a:	6f 93       	push	r22
 55c:	7f 93       	push	r23
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	ef 93       	push	r30
 568:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
 56a:	87 e1       	ldi	r24, 0x17	; 23
 56c:	90 e2       	ldi	r25, 0x20	; 32
 56e:	0e 94 4f 02 	call	0x49e	; 0x49e <USART_DataRegEmpty>
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0b be       	out	0x3b, r0	; 59
 58e:	0f 90       	pop	r0
 590:	0f be       	out	0x3f, r0	; 63
 592:	0f 90       	pop	r0
 594:	1f 90       	pop	r1
 596:	18 95       	reti

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
