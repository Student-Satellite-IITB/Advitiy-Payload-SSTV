
ATXmega_SSTV_Encode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ecc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000ecc  00000f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00802006  00802006  00000f66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007218  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b29  00000000  00000000  00008420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149d  00000000  00000000  0000bf49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  0000d3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b20  00000000  00000000  0000d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e74  00000000  00000000  000114c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0001333c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_14>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_26>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec ec       	ldi	r30, 0xCC	; 204
 214:	fe e0       	ldi	r31, 0x0E	; 14
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a6 e0       	ldi	r26, 0x06	; 6
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a6 33       	cpi	r26, 0x36	; 54
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 23a:	0c 94 64 07 	jmp	0xec8	; 0xec8 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Set_AD9833>:

#include "AD9833.h"
#include "spi_driver.h"

void Set_AD9833(float frequency, unsigned int phase)
{
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	8a 01       	movw	r16, r20
	long FreqReg = (((float)frequency)*pow(2,28))/(float)FMCLK;	  //Calculate frequency to be sent to AD9833
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	5d e4       	ldi	r21, 0x4D	; 77
 25c:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
 260:	20 e2       	ldi	r18, 0x20	; 32
 262:	3c eb       	ldi	r19, 0xBC	; 188
 264:	4e eb       	ldi	r20, 0xBE	; 190
 266:	5b e4       	ldi	r21, 0x4B	; 75
 268:	0e 94 5f 05 	call	0xabe	; 0xabe <__divsf3>
 26c:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);				  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
 274:	cc 24       	eor	r12, r12
 276:	20 ec       	ldi	r18, 0xC0	; 192
 278:	d2 22       	and	r13, r18
 27a:	2f e0       	ldi	r18, 0x0F	; 15
 27c:	f2 22       	and	r15, r18
 27e:	0b 2e       	mov	r0, r27
 280:	be e0       	ldi	r27, 0x0E	; 14
 282:	f5 94       	asr	r15
 284:	e7 94       	ror	r14
 286:	d7 94       	ror	r13
 288:	c7 94       	ror	r12
 28a:	ba 95       	dec	r27
 28c:	d1 f7       	brne	.-12     	; 0x282 <Set_AD9833+0x40>
 28e:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));						  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB
 290:	eb 01       	movw	r28, r22
 292:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;												  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     											  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_send16(0x2100);											  //Define waveform and set reset bit
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	91 e2       	ldi	r25, 0x21	; 33
 298:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_send16>
	SPI_send16(LSB);											  //Write LSBs
 29c:	ce 01       	movw	r24, r28
 29e:	90 64       	ori	r25, 0x40	; 64
 2a0:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_send16>
	SPI_send16(MSB);											  //Write MSBs
 2a4:	c6 01       	movw	r24, r12
 2a6:	90 64       	ori	r25, 0x40	; 64
 2a8:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_send16>
	phase&=0x0FFF;
 2ac:	c8 01       	movw	r24, r16
 2ae:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;												  //Set Phase write enable bytes
	//SPI_write16(0xC000);										  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_send16(phase);											  //Write Phase bytes
 2b0:	90 6c       	ori	r25, 0xC0	; 192
 2b2:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_send16>
	SPI_send16(0x2000);											  //Unset reset bit
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e2       	ldi	r25, 0x20	; 32
 2ba:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_send16>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	08 95       	ret

000002d0 <getphase>:

unsigned int getphase(float prevPhase,float nextFreq, float prevTime)
{
 2d0:	4f 92       	push	r4
 2d2:	5f 92       	push	r5
 2d4:	6f 92       	push	r6
 2d6:	7f 92       	push	r7
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	af 92       	push	r10
 2de:	bf 92       	push	r11
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <getphase+0x22>
 2f2:	1f 92       	push	r1
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	2b 01       	movw	r4, r22
 2fa:	3c 01       	movw	r6, r24
 2fc:	49 01       	movw	r8, r18
 2fe:	5a 01       	movw	r10, r20
 300:	67 01       	movw	r12, r14
 302:	78 01       	movw	r14, r16
	prevTime/=1000000;																	//Convert time to microseconds
	prevPhase/=2048/PI;																	//Change scaling of Phase as required by AD9833
	float returnPhase=((fmod(prevTime,(1/nextFreq))*2*PI*nextFreq)+prevPhase)*2048/PI;	//Calculate phase completed by previous wave
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	9f e3       	ldi	r25, 0x3F	; 63
 30c:	0e 94 5f 05 	call	0xabe	; 0xabe <__divsf3>
 310:	69 83       	std	Y+1, r22	; 0x01
 312:	7a 83       	std	Y+2, r23	; 0x02
 314:	8b 83       	std	Y+3, r24	; 0x03
 316:	9c 83       	std	Y+4, r25	; 0x04
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	34 e2       	ldi	r19, 0x24	; 36
 31c:	44 e7       	ldi	r20, 0x74	; 116
 31e:	59 e4       	ldi	r21, 0x49	; 73
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 5f 05 	call	0xabe	; 0xabe <__divsf3>
 328:	29 81       	ldd	r18, Y+1	; 0x01
 32a:	3a 81       	ldd	r19, Y+2	; 0x02
 32c:	4b 81       	ldd	r20, Y+3	; 0x03
 32e:	5c 81       	ldd	r21, Y+4	; 0x04
 330:	0e 94 4f 06 	call	0xc9e	; 0xc9e <fmod>
	return (unsigned int) returnPhase;													//Return in 16 bit format
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__addsf3>
 33c:	20 ed       	ldi	r18, 0xD0	; 208
 33e:	3f e0       	ldi	r19, 0x0F	; 15
 340:	49 e4       	ldi	r20, 0x49	; 73
 342:	50 e4       	ldi	r21, 0x40	; 64
 344:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
 348:	a5 01       	movw	r20, r10
 34a:	94 01       	movw	r18, r8
 34c:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
 350:	6b 01       	movw	r12, r22
 352:	7c 01       	movw	r14, r24
 354:	2c e8       	ldi	r18, 0x8C	; 140
 356:	39 ef       	ldi	r19, 0xF9	; 249
 358:	42 e2       	ldi	r20, 0x22	; 34
 35a:	54 e4       	ldi	r21, 0x44	; 68
 35c:	c3 01       	movw	r24, r6
 35e:	b2 01       	movw	r22, r4
 360:	0e 94 5f 05 	call	0xabe	; 0xabe <__divsf3>
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	c7 01       	movw	r24, r14
 36a:	b6 01       	movw	r22, r12
 36c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__addsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	55 e4       	ldi	r21, 0x45	; 69
 378:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
 37c:	20 ed       	ldi	r18, 0xD0	; 208
 37e:	3f e0       	ldi	r19, 0x0F	; 15
 380:	49 e4       	ldi	r20, 0x49	; 73
 382:	50 e4       	ldi	r21, 0x40	; 64
 384:	0e 94 5f 05 	call	0xabe	; 0xabe <__divsf3>
 388:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fixunssfsi>
}
 38c:	cb 01       	movw	r24, r22
 38e:	24 96       	adiw	r28, 0x04	; 4
 390:	cd bf       	out	0x3d, r28	; 61
 392:	de bf       	out	0x3e, r29	; 62
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <main>:

volatile int frequency=1800,phase=0,prevPhase=0,prevFreq=0,pixelCount=0;

int main(void)
{
	SetClock0();	//SetClock1();
 3b6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <SetClock0>
	SetUsart();		//sei();
 3ba:	0e 94 97 04 	call	0x92e	; 0x92e <SetUsart>
	SPI_Master_init();
 3be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SPI_Master_init>
	setUp16MhzExternalOsc();
 3c2:	0e 94 67 04 	call	0x8ce	; 0x8ce <setUp16MhzExternalOsc>
	SPI_send16(0x100);	//Reset AD9833
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 25 04 	call	0x84a	; 0x84a <SPI_send16>
	Set_AD9833(1500,0);
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e8       	ldi	r23, 0x80	; 128
 3d6:	8b eb       	ldi	r24, 0xBB	; 187
 3d8:	94 e4       	ldi	r25, 0x44	; 68
 3da:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	8b e7       	ldi	r24, 0x7B	; 123
 3e2:	92 e9       	ldi	r25, 0x92	; 146
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x2e>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x38>
 3ee:	00 00       	nop
 3f0:	ef ef       	ldi	r30, 0xFF	; 255
 3f2:	f1 ee       	ldi	r31, 0xE1	; 225
 3f4:	24 e0       	ldi	r18, 0x04	; 4
 3f6:	e1 50       	subi	r30, 0x01	; 1
 3f8:	f0 40       	sbci	r31, 0x00	; 0
 3fa:	20 40       	sbci	r18, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x40>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
	_delay_ms(3000);
// VIS Code 
	{_delay_ms(100);
	Set_AD9833(1900,0);	_delay_ms(300);	//leader tone
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	70 e8       	ldi	r23, 0x80	; 128
 40a:	8d ee       	ldi	r24, 0xED	; 237
 40c:	94 e4       	ldi	r25, 0x44	; 68
 40e:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	95 ea       	ldi	r25, 0xA5	; 165
 416:	ee e0       	ldi	r30, 0x0E	; 14
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	e0 40       	sbci	r30, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
	Set_AD9833(1200,0);	_delay_ms(10);	//break
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	86 e9       	ldi	r24, 0x96	; 150
 42e:	94 e4       	ldi	r25, 0x44	; 68
 430:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 434:	8f e3       	ldi	r24, 0x3F	; 63
 436:	9c e9       	ldi	r25, 0x9C	; 156
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	Set_AD9833(1900,0);	_delay_ms(300);	//leader
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e8       	ldi	r23, 0x80	; 128
 448:	8d ee       	ldi	r24, 0xED	; 237
 44a:	94 e4       	ldi	r25, 0x44	; 68
 44c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 450:	9f ef       	ldi	r25, 0xFF	; 255
 452:	e5 ea       	ldi	r30, 0xA5	; 165
 454:	fe e0       	ldi	r31, 0x0E	; 14
 456:	91 50       	subi	r25, 0x01	; 1
 458:	e0 40       	sbci	r30, 0x00	; 0
 45a:	f0 40       	sbci	r31, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(839);	//VIS start bit
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	86 e9       	ldi	r24, 0x96	; 150
 46c:	94 e4       	ldi	r25, 0x44	; 68
 46e:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 472:	2f e7       	ldi	r18, 0x7F	; 127
 474:	8a e6       	ldi	r24, 0x6A	; 106
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 482:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 484:	eb e1       	ldi	r30, 0x1B	; 27
 486:	fd e0       	ldi	r31, 0x0D	; 13
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
	//PD90 VIS code = 99d = 0b1100011
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(839);	//bit 0=1
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	70 e8       	ldi	r23, 0x80	; 128
 498:	89 e8       	ldi	r24, 0x89	; 137
 49a:	94 e4       	ldi	r25, 0x44	; 68
 49c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a0:	ff e7       	ldi	r31, 0x7F	; 127
 4a2:	2a e6       	ldi	r18, 0x6A	; 106
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	f1 50       	subi	r31, 0x01	; 1
 4a8:	20 40       	sbci	r18, 0x00	; 0
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4b0:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	eb e1       	ldi	r30, 0x1B	; 27
 4b4:	fd e0       	ldi	r31, 0x0D	; 13
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(839);	//bit 1=1
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	70 e8       	ldi	r23, 0x80	; 128
 4c6:	89 e8       	ldi	r24, 0x89	; 137
 4c8:	94 e4       	ldi	r25, 0x44	; 68
 4ca:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ce:	ff e7       	ldi	r31, 0x7F	; 127
 4d0:	2a e6       	ldi	r18, 0x6A	; 106
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	f1 50       	subi	r31, 0x01	; 1
 4d6:	20 40       	sbci	r18, 0x00	; 0
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4de:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	eb e1       	ldi	r30, 0x1B	; 27
 4e2:	fd e0       	ldi	r31, 0x0D	; 13
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4ea:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);  _delay_us(839);	//bit 2=0
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	70 e8       	ldi	r23, 0x80	; 128
 4f4:	82 ea       	ldi	r24, 0xA2	; 162
 4f6:	94 e4       	ldi	r25, 0x44	; 68
 4f8:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	ff e7       	ldi	r31, 0x7F	; 127
 4fe:	2a e6       	ldi	r18, 0x6A	; 106
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	f1 50       	subi	r31, 0x01	; 1
 504:	20 40       	sbci	r18, 0x00	; 0
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	eb e1       	ldi	r30, 0x1B	; 27
 510:	fd e0       	ldi	r31, 0x0D	; 13
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 518:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(839);	//bit 3=0
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e8       	ldi	r23, 0x80	; 128
 522:	82 ea       	ldi	r24, 0xA2	; 162
 524:	94 e4       	ldi	r25, 0x44	; 68
 526:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52a:	ff e7       	ldi	r31, 0x7F	; 127
 52c:	2a e6       	ldi	r18, 0x6A	; 106
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	f1 50       	subi	r31, 0x01	; 1
 532:	20 40       	sbci	r18, 0x00	; 0
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 538:	00 c0       	rjmp	.+0      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 53a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53c:	eb e1       	ldi	r30, 0x1B	; 27
 53e:	fd e0       	ldi	r31, 0x0D	; 13
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 544:	00 c0       	rjmp	.+0      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 546:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(839);	//bit 4=0
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	70 e8       	ldi	r23, 0x80	; 128
 550:	82 ea       	ldi	r24, 0xA2	; 162
 552:	94 e4       	ldi	r25, 0x44	; 68
 554:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 558:	ff e7       	ldi	r31, 0x7F	; 127
 55a:	2a e6       	ldi	r18, 0x6A	; 106
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	f1 50       	subi	r31, 0x01	; 1
 560:	20 40       	sbci	r18, 0x00	; 0
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 566:	00 c0       	rjmp	.+0      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 568:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 56a:	eb e1       	ldi	r30, 0x1B	; 27
 56c:	fd e0       	ldi	r31, 0x0D	; 13
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 574:	00 00       	nop
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(839);	//bit 5=1
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	70 e8       	ldi	r23, 0x80	; 128
 57e:	89 e8       	ldi	r24, 0x89	; 137
 580:	94 e4       	ldi	r25, 0x44	; 68
 582:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 586:	ff e7       	ldi	r31, 0x7F	; 127
 588:	2a e6       	ldi	r18, 0x6A	; 106
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	f1 50       	subi	r31, 0x01	; 1
 58e:	20 40       	sbci	r18, 0x00	; 0
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 594:	00 c0       	rjmp	.+0      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 596:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 598:	eb e1       	ldi	r30, 0x1B	; 27
 59a:	fd e0       	ldi	r31, 0x0D	; 13
 59c:	31 97       	sbiw	r30, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 5a2:	00 00       	nop
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(839);	//bit 6=1
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	70 e8       	ldi	r23, 0x80	; 128
 5ac:	89 e8       	ldi	r24, 0x89	; 137
 5ae:	94 e4       	ldi	r25, 0x44	; 68
 5b0:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b4:	ff e7       	ldi	r31, 0x7F	; 127
 5b6:	2a e6       	ldi	r18, 0x6A	; 106
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	f1 50       	subi	r31, 0x01	; 1
 5bc:	20 40       	sbci	r18, 0x00	; 0
 5be:	80 40       	sbci	r24, 0x00	; 0
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c6:	eb e1       	ldi	r30, 0x1B	; 27
 5c8:	fd e0       	ldi	r31, 0x0D	; 13
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5d0:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(839);	//Parity bit
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	70 e8       	ldi	r23, 0x80	; 128
 5da:	82 ea       	ldi	r24, 0xA2	; 162
 5dc:	94 e4       	ldi	r25, 0x44	; 68
 5de:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e2:	ff e7       	ldi	r31, 0x7F	; 127
 5e4:	2a e6       	ldi	r18, 0x6A	; 106
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	f1 50       	subi	r31, 0x01	; 1
 5ea:	20 40       	sbci	r18, 0x00	; 0
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5f2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	eb e1       	ldi	r30, 0x1B	; 27
 5f6:	fd e0       	ldi	r31, 0x0D	; 13
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5fe:	00 00       	nop
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(839);	//stop bit
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	86 e9       	ldi	r24, 0x96	; 150
 60a:	94 e4       	ldi	r25, 0x44	; 68
 60c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 610:	ff e7       	ldi	r31, 0x7F	; 127
 612:	2a e6       	ldi	r18, 0x6A	; 106
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	f1 50       	subi	r31, 0x01	; 1
 618:	20 40       	sbci	r18, 0x00	; 0
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 620:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 622:	eb e1       	ldi	r30, 0x1B	; 27
 624:	fd e0       	ldi	r31, 0x0D	; 13
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 62c:	00 00       	nop
 62e:	c1 e8       	ldi	r28, 0x81	; 129
 630:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Set_AD9833(1200,0); _delay_ms(19); _delay_us(840);	//Sync Pulse
		Set_AD9833(1500,0); _delay_ms(1); _delay_us(919);	//Porch
	//Pixel Interrupt sequence
		pixelCount=0;
		TCC0.CNT=0;
 632:	00 e0       	ldi	r16, 0x00	; 0
 634:	18 e0       	ldi	r17, 0x08	; 8
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(839);	//stop bit
	}
//Image Data	
	for(int lineSet=0; lineSet<=128; lineSet++)
	{
		Set_AD9833(1200,0); _delay_ms(19); _delay_us(840);	//Sync Pulse
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	86 e9       	ldi	r24, 0x96	; 150
 640:	94 e4       	ldi	r25, 0x44	; 68
 642:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 646:	ff e7       	ldi	r31, 0x7F	; 127
 648:	2d ee       	ldi	r18, 0xED	; 237
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	f1 50       	subi	r31, 0x01	; 1
 64e:	20 40       	sbci	r18, 0x00	; 0
 650:	80 40       	sbci	r24, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 654:	00 c0       	rjmp	.+0      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 656:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 658:	ef e1       	ldi	r30, 0x1F	; 31
 65a:	fd e0       	ldi	r31, 0x0D	; 13
 65c:	31 97       	sbiw	r30, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 660:	00 c0       	rjmp	.+0      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 662:	00 00       	nop
		Set_AD9833(1500,0); _delay_ms(1); _delay_us(919);	//Porch
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e8       	ldi	r23, 0x80	; 128
 66c:	8b eb       	ldi	r24, 0xBB	; 187
 66e:	94 e4       	ldi	r25, 0x44	; 68
 670:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 674:	8f e9       	ldi	r24, 0x9F	; 159
 676:	9f e0       	ldi	r25, 0x0F	; 15
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 67e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 680:	eb e5       	ldi	r30, 0x5B	; 91
 682:	fe e0       	ldi	r31, 0x0E	; 14
 684:	31 97       	sbiw	r30, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 688:	00 c0       	rjmp	.+0      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 68a:	00 00       	nop
	//Pixel Interrupt sequence
		pixelCount=0;
 68c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
 690:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
		TCC0.CNT=0;
 694:	f8 01       	movw	r30, r16
 696:	10 a2       	std	Z+32, r1	; 0x20
 698:	11 a2       	std	Z+33, r1	; 0x21
		sei();
 69a:	78 94       	sei
		while(pixelCount<=12800);
 69c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 6a0:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	92 43       	sbci	r25, 0x32	; 50
 6a8:	cc f3       	brlt	.-14     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
		cli();
 6aa:	f8 94       	cli
 6ac:	21 97       	sbiw	r28, 0x01	; 1
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(839);	//bit 6=1
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(839);	//Parity bit
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(839);	//stop bit
	}
//Image Data	
	for(int lineSet=0; lineSet<=128; lineSet++)
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6b0:	c2 cf       	rjmp	.-124    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>

000006b4 <__vector_14>:
		
	}
}

ISR(TCC0_OVF_vect)
{
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	0b b6       	in	r0, 0x3b	; 59
 6c0:	0f 92       	push	r0
 6c2:	8f 92       	push	r8
 6c4:	9f 92       	push	r9
 6c6:	af 92       	push	r10
 6c8:	bf 92       	push	r11
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	2f 93       	push	r18
 6d4:	3f 93       	push	r19
 6d6:	4f 93       	push	r20
 6d8:	5f 93       	push	r21
 6da:	6f 93       	push	r22
 6dc:	7f 93       	push	r23
 6de:	8f 93       	push	r24
 6e0:	9f 93       	push	r25
 6e2:	af 93       	push	r26
 6e4:	bf 93       	push	r27
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	ef 93       	push	r30
 6ec:	ff 93       	push	r31
	Set_AD9833(frequency,phase);
 6ee:	c0 91 0c 20 	lds	r28, 0x200C	; 0x80200c <phase>
 6f2:	d0 91 0d 20 	lds	r29, 0x200D	; 0x80200d <phase+0x1>
 6f6:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
 6fa:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
 6fe:	07 2e       	mov	r0, r23
 700:	00 0c       	add	r0, r0
 702:	88 0b       	sbc	r24, r24
 704:	99 0b       	sbc	r25, r25
 706:	0e 94 09 06 	call	0xc12	; 0xc12 <__floatsisf>
 70a:	ae 01       	movw	r20, r28
 70c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	prevPhase=phase;
 710:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <phase>
 714:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <phase+0x1>
 718:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <prevPhase>
 71c:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <prevPhase+0x1>
	prevFreq=frequency;
 720:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 724:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 728:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <prevFreq>
 72c:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <prevFreq+0x1>
	pixelCount++;
 730:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 734:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
 73e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
//Frequency Retrieval section
	phase=getphase(prevPhase,prevFreq,532);
 742:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <prevFreq>
 746:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <prevFreq+0x1>
 74a:	c0 91 0a 20 	lds	r28, 0x200A	; 0x80200a <prevPhase>
 74e:	d0 91 0b 20 	lds	r29, 0x200B	; 0x80200b <prevPhase+0x1>
 752:	07 2e       	mov	r0, r23
 754:	00 0c       	add	r0, r0
 756:	88 0b       	sbc	r24, r24
 758:	99 0b       	sbc	r25, r25
 75a:	0e 94 09 06 	call	0xc12	; 0xc12 <__floatsisf>
 75e:	4b 01       	movw	r8, r22
 760:	5c 01       	movw	r10, r24
 762:	be 01       	movw	r22, r28
 764:	dd 0f       	add	r29, r29
 766:	88 0b       	sbc	r24, r24
 768:	99 0b       	sbc	r25, r25
 76a:	0e 94 09 06 	call	0xc12	; 0xc12 <__floatsisf>
 76e:	e1 2c       	mov	r14, r1
 770:	f1 2c       	mov	r15, r1
 772:	05 e0       	ldi	r16, 0x05	; 5
 774:	14 e4       	ldi	r17, 0x44	; 68
 776:	a5 01       	movw	r20, r10
 778:	94 01       	movw	r18, r8
 77a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <getphase>
 77e:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <phase>
 782:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <phase+0x1>
	pixelCount++;
 786:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 78a:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
 794:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
}
 798:	ff 91       	pop	r31
 79a:	ef 91       	pop	r30
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	7f 91       	pop	r23
 7aa:	6f 91       	pop	r22
 7ac:	5f 91       	pop	r21
 7ae:	4f 91       	pop	r20
 7b0:	3f 91       	pop	r19
 7b2:	2f 91       	pop	r18
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	bf 90       	pop	r11
 7be:	af 90       	pop	r10
 7c0:	9f 90       	pop	r9
 7c2:	8f 90       	pop	r8
 7c4:	0f 90       	pop	r0
 7c6:	0b be       	out	0x3b, r0	; 59
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <SPI_MasterTransceiveByte>:
uint8_t SPI_receive8()
{
	SPI_MasterCreateDataPacket(&dataPacket,masterSendData,masterReceivedData,NUM_BYTES,&PORTC,PIN4_bm);		
    SPI_MasterTransceivePacket(&spiMasterC, &dataPacket);	//Wait for reception
	return masterReceivedData[0];							
}
 7d2:	dc 01       	movw	r26, r24
 7d4:	ed 91       	ld	r30, X+
 7d6:	fc 91       	ld	r31, X
 7d8:	11 97       	sbiw	r26, 0x01	; 1
 7da:	63 83       	std	Z+3, r22	; 0x03
 7dc:	ed 91       	ld	r30, X+
 7de:	fc 91       	ld	r31, X
 7e0:	82 81       	ldd	r24, Z+2	; 0x02
 7e2:	88 23       	and	r24, r24
 7e4:	ec f7       	brge	.-6      	; 0x7e0 <SPI_MasterTransceiveByte+0xe>
 7e6:	83 81       	ldd	r24, Z+3	; 0x03
 7e8:	08 95       	ret

000007ea <SPI_Master_init>:
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	a0 e4       	ldi	r26, 0x40	; 64
 7f0:	b6 e0       	ldi	r27, 0x06	; 6
 7f2:	80 e1       	ldi	r24, 0x10	; 16
 7f4:	11 96       	adiw	r26, 0x01	; 1
 7f6:	8c 93       	st	X, r24
 7f8:	11 97       	sbiw	r26, 0x01	; 1
 7fa:	90 e2       	ldi	r25, 0x20	; 32
 7fc:	11 96       	adiw	r26, 0x01	; 1
 7fe:	9c 93       	st	X, r25
 800:	11 97       	sbiw	r26, 0x01	; 1
 802:	90 e8       	ldi	r25, 0x80	; 128
 804:	11 96       	adiw	r26, 0x01	; 1
 806:	9c 93       	st	X, r25
 808:	11 97       	sbiw	r26, 0x01	; 1
 80a:	98 e3       	ldi	r25, 0x38	; 56
 80c:	54 96       	adiw	r26, 0x14	; 20
 80e:	9c 93       	st	X, r25
 810:	54 97       	sbiw	r26, 0x14	; 20
 812:	15 96       	adiw	r26, 0x05	; 5
 814:	8c 93       	st	X, r24
 816:	15 97       	sbiw	r26, 0x05	; 5
 818:	e6 e1       	ldi	r30, 0x16	; 22
 81a:	f0 e2       	ldi	r31, 0x20	; 32
 81c:	c0 ec       	ldi	r28, 0xC0	; 192
 81e:	d8 e0       	ldi	r29, 0x08	; 8
 820:	c0 83       	st	Z, r28
 822:	d1 83       	std	Z+1, r29	; 0x01
 824:	a2 83       	std	Z+2, r26	; 0x02
 826:	b3 83       	std	Z+3, r27	; 0x03
 828:	14 82       	std	Z+4, r1	; 0x04
 82a:	88 ed       	ldi	r24, 0xD8	; 216
 82c:	88 83       	st	Y, r24
 82e:	a0 81       	ld	r26, Z
 830:	b1 81       	ldd	r27, Z+1	; 0x01
 832:	11 96       	adiw	r26, 0x01	; 1
 834:	1c 92       	st	X, r1
 836:	15 82       	std	Z+5, r1	; 0x05
 838:	16 82       	std	Z+6, r1	; 0x06
 83a:	02 80       	ldd	r0, Z+2	; 0x02
 83c:	f3 81       	ldd	r31, Z+3	; 0x03
 83e:	e0 2d       	mov	r30, r0
 840:	80 ea       	ldi	r24, 0xA0	; 160
 842:	81 83       	std	Z+1, r24	; 0x01
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	08 95       	ret

0000084a <SPI_send16>:
void SPI_send16(uint16_t data)
{
 84a:	ff 92       	push	r15
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	f8 2e       	mov	r15, r24
	PORTA_DIRSET = PIN0_bm;
 856:	c1 e0       	ldi	r28, 0x01	; 1
 858:	c0 93 01 06 	sts	0x0601, r28	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTF_DIRSET = PIN0_bm|PIN1_bm|PIN2_bm|PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
 85c:	8f ef       	ldi	r24, 0xFF	; 255
 85e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTA_OUTSET = PIN0_bm;
 862:	05 e0       	ldi	r16, 0x05	; 5
 864:	16 e0       	ldi	r17, 0x06	; 6
 866:	f8 01       	movw	r30, r16
 868:	c0 83       	st	Z, r28
	uint8_t MSdata = ((data>>8) & 0x00FF);		//filter out MS
	uint8_t LSdata = (data & 0x00FF);			//filter out LS
	SPI_MasterSSLow(ssPort, PIN4_bm);			//Set Slave Select Low
 86a:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssPort>
 86e:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssPort+0x1>
 872:	d0 e1       	ldi	r29, 0x10	; 16
 874:	d6 83       	std	Z+6, r29	; 0x06
	PORTA_OUTCLR = PIN0_bm;				
 876:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	SPI_MasterTransceiveByte(&spiMasterC, MSdata); 
 87a:	69 2f       	mov	r22, r25
 87c:	86 e1       	ldi	r24, 0x16	; 22
 87e:	90 e2       	ldi	r25, 0x20	; 32
 880:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterC, LSdata);
 884:	6f 2d       	mov	r22, r15
 886:	86 e1       	ldi	r24, 0x16	; 22
 888:	90 e2       	ldi	r25, 0x20	; 32
 88a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <SPI_MasterTransceiveByte>
	SPI_MasterSSHigh(ssPort, PIN4_bm);			//Set Slave Select High
 88e:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssPort>
 892:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssPort+0x1>
 896:	d5 83       	std	Z+5, r29	; 0x05
	PORTA_OUTSET = PIN0_bm;
 898:	f8 01       	movw	r30, r16
 89a:	c0 83       	st	Z, r28
}
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	ff 90       	pop	r15
 8a6:	08 95       	ret

000008a8 <SetClock0>:
}

void SetClock1()
{	
	TCC1.PER = 0xFF;					//Set period 
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;	//Set Prescaler 1
 8a8:	e0 ea       	ldi	r30, 0xA0	; 160
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	82 81       	ldd	r24, Z+2	; 0x02
 8ae:	84 60       	ori	r24, 0x04	; 4
 8b0:	82 83       	std	Z+2, r24	; 0x02
 8b2:	e0 e0       	ldi	r30, 0x00	; 0
 8b4:	f8 e0       	ldi	r31, 0x08	; 8
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	80 83       	st	Z, r24
 8ba:	11 82       	std	Z+1, r1	; 0x01
 8bc:	83 e0       	ldi	r24, 0x03	; 3
 8be:	86 83       	std	Z+6, r24	; 0x06
 8c0:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <interruptPeriod>
 8c4:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <interruptPeriod+0x1>
 8c8:	86 a3       	std	Z+38, r24	; 0x26
 8ca:	97 a3       	std	Z+39, r25	; 0x27
 8cc:	08 95       	ret

000008ce <setUp16MhzExternalOsc>:
}

void setUp16MhzExternalOsc()
{
	PORTD_DIR = 0x01;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 8d4:	8b ec       	ldi	r24, 0xCB	; 203
 8d6:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
 8da:	e0 e5       	ldi	r30, 0x50	; 80
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	88 60       	ori	r24, 0x08	; 8
 8e2:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
 8e4:	e1 e5       	ldi	r30, 0x51	; 81
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	83 ff       	sbrs	r24, 3
 8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <setUp16MhzExternalOsc+0x1a>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
 8ee:	88 ed       	ldi	r24, 0xD8	; 216
 8f0:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
 8f2:	83 e0       	ldi	r24, 0x03	; 3
 8f4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 8f8:	08 95       	ret

000008fa <USART_DataRegEmpty>:
	uint16_t LSdata = (data & 0x00FF);				//filter out LS
	sei();											//Enable global interrupts
	USART_TXBuffer_PutByte(&USART_data, MSdata);	//Write MSdata and wait for transfer
	USART_TXBuffer_PutByte(&USART_data, LSdata);	//Write LSdata and wait for transfer
	cli();											//Disable global interrupts
}
 8fa:	fc 01       	movw	r30, r24
 8fc:	96 85       	ldd	r25, Z+14	; 0x0e
 8fe:	85 85       	ldd	r24, Z+13	; 0x0d
 900:	98 13       	cpse	r25, r24
 902:	07 c0       	rjmp	.+14     	; 0x912 <USART_DataRegEmpty+0x18>
 904:	01 90       	ld	r0, Z+
 906:	f0 81       	ld	r31, Z
 908:	e0 2d       	mov	r30, r0
 90a:	83 81       	ldd	r24, Z+3	; 0x03
 90c:	8c 7f       	andi	r24, 0xFC	; 252
 90e:	83 83       	std	Z+3, r24	; 0x03
 910:	08 95       	ret
 912:	86 85       	ldd	r24, Z+14	; 0x0e
 914:	df 01       	movw	r26, r30
 916:	a8 0f       	add	r26, r24
 918:	b1 1d       	adc	r27, r1
 91a:	17 96       	adiw	r26, 0x07	; 7
 91c:	8c 91       	ld	r24, X
 91e:	a0 81       	ld	r26, Z
 920:	b1 81       	ldd	r27, Z+1	; 0x01
 922:	8c 93       	st	X, r24
 924:	86 85       	ldd	r24, Z+14	; 0x0e
 926:	8f 5f       	subi	r24, 0xFF	; 255
 928:	83 70       	andi	r24, 0x03	; 3
 92a:	86 87       	std	Z+14, r24	; 0x0e
 92c:	08 95       	ret

0000092e <SetUsart>:
 92e:	e0 e4       	ldi	r30, 0x40	; 64
 930:	f6 e0       	ldi	r31, 0x06	; 6
 932:	88 e0       	ldi	r24, 0x08	; 8
 934:	81 83       	std	Z+1, r24	; 0x01
 936:	84 e0       	ldi	r24, 0x04	; 4
 938:	82 83       	std	Z+2, r24	; 0x02
 93a:	a7 e2       	ldi	r26, 0x27	; 39
 93c:	b0 e2       	ldi	r27, 0x20	; 32
 93e:	e0 ea       	ldi	r30, 0xA0	; 160
 940:	f8 e0       	ldi	r31, 0x08	; 8
 942:	ed 93       	st	X+, r30
 944:	fc 93       	st	X, r31
 946:	11 97       	sbiw	r26, 0x01	; 1
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	12 96       	adiw	r26, 0x02	; 2
 94c:	8c 93       	st	X, r24
 94e:	12 97       	sbiw	r26, 0x02	; 2
 950:	1c 96       	adiw	r26, 0x0c	; 12
 952:	1c 92       	st	X, r1
 954:	1c 97       	sbiw	r26, 0x0c	; 12
 956:	1b 96       	adiw	r26, 0x0b	; 11
 958:	1c 92       	st	X, r1
 95a:	1b 97       	sbiw	r26, 0x0b	; 11
 95c:	1e 96       	adiw	r26, 0x0e	; 14
 95e:	1c 92       	st	X, r1
 960:	1e 97       	sbiw	r26, 0x0e	; 14
 962:	1d 96       	adiw	r26, 0x0d	; 13
 964:	1c 92       	st	X, r1
 966:	83 e0       	ldi	r24, 0x03	; 3
 968:	85 83       	std	Z+5, r24	; 0x05
 96a:	83 81       	ldd	r24, Z+3	; 0x03
 96c:	8f 7c       	andi	r24, 0xCF	; 207
 96e:	80 61       	ori	r24, 0x10	; 16
 970:	83 83       	std	Z+3, r24	; 0x03
 972:	8c e0       	ldi	r24, 0x0C	; 12
 974:	86 83       	std	Z+6, r24	; 0x06
 976:	17 82       	std	Z+7, r1	; 0x07
 978:	84 81       	ldd	r24, Z+4	; 0x04
 97a:	80 61       	ori	r24, 0x10	; 16
 97c:	84 83       	std	Z+4, r24	; 0x04
 97e:	84 81       	ldd	r24, Z+4	; 0x04
 980:	88 60       	ori	r24, 0x08	; 8
 982:	84 83       	std	Z+4, r24	; 0x04
 984:	e0 ea       	ldi	r30, 0xA0	; 160
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	82 81       	ldd	r24, Z+2	; 0x02
 98a:	81 60       	ori	r24, 0x01	; 1
 98c:	82 83       	std	Z+2, r24	; 0x02
 98e:	08 95       	ret

00000990 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
 990:	1f 92       	push	r1
 992:	0f 92       	push	r0
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	0f 92       	push	r0
 998:	11 24       	eor	r1, r1
 99a:	0b b6       	in	r0, 0x3b	; 59
 99c:	0f 92       	push	r0
 99e:	2f 93       	push	r18
 9a0:	3f 93       	push	r19
 9a2:	4f 93       	push	r20
 9a4:	5f 93       	push	r21
 9a6:	6f 93       	push	r22
 9a8:	7f 93       	push	r23
 9aa:	8f 93       	push	r24
 9ac:	9f 93       	push	r25
 9ae:	af 93       	push	r26
 9b0:	bf 93       	push	r27
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
 9b6:	87 e2       	ldi	r24, 0x27	; 39
 9b8:	90 e2       	ldi	r25, 0x20	; 32
 9ba:	0e 94 7d 04 	call	0x8fa	; 0x8fa <USART_DataRegEmpty>
}
 9be:	ff 91       	pop	r31
 9c0:	ef 91       	pop	r30
 9c2:	bf 91       	pop	r27
 9c4:	af 91       	pop	r26
 9c6:	9f 91       	pop	r25
 9c8:	8f 91       	pop	r24
 9ca:	7f 91       	pop	r23
 9cc:	6f 91       	pop	r22
 9ce:	5f 91       	pop	r21
 9d0:	4f 91       	pop	r20
 9d2:	3f 91       	pop	r19
 9d4:	2f 91       	pop	r18
 9d6:	0f 90       	pop	r0
 9d8:	0b be       	out	0x3b, r0	; 59
 9da:	0f 90       	pop	r0
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	0f 90       	pop	r0
 9e0:	1f 90       	pop	r1
 9e2:	18 95       	reti

000009e4 <__subsf3>:
 9e4:	50 58       	subi	r21, 0x80	; 128

000009e6 <__addsf3>:
 9e6:	bb 27       	eor	r27, r27
 9e8:	aa 27       	eor	r26, r26
 9ea:	0e 94 0a 05 	call	0xa14	; 0xa14 <__addsf3x>
 9ee:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_round>
 9f2:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
 9f6:	38 f0       	brcs	.+14     	; 0xa06 <__addsf3+0x20>
 9f8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
 9fc:	20 f0       	brcs	.+8      	; 0xa06 <__addsf3+0x20>
 9fe:	39 f4       	brne	.+14     	; 0xa0e <__addsf3+0x28>
 a00:	9f 3f       	cpi	r25, 0xFF	; 255
 a02:	19 f4       	brne	.+6      	; 0xa0a <__addsf3+0x24>
 a04:	26 f4       	brtc	.+8      	; 0xa0e <__addsf3+0x28>
 a06:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>
 a0a:	0e f4       	brtc	.+2      	; 0xa0e <__addsf3+0x28>
 a0c:	e0 95       	com	r30
 a0e:	e7 fb       	bst	r30, 7
 a10:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_inf>

00000a14 <__addsf3x>:
 a14:	e9 2f       	mov	r30, r25
 a16:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
 a1a:	58 f3       	brcs	.-42     	; 0x9f2 <__addsf3+0xc>
 a1c:	ba 17       	cp	r27, r26
 a1e:	62 07       	cpc	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	95 07       	cpc	r25, r21
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__addsf3x+0x1c>
 a28:	79 f4       	brne	.+30     	; 0xa48 <__addsf3x+0x34>
 a2a:	a6 f5       	brtc	.+104    	; 0xa94 <__addsf3x+0x80>
 a2c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_zero>
 a30:	0e f4       	brtc	.+2      	; 0xa34 <__addsf3x+0x20>
 a32:	e0 95       	com	r30
 a34:	0b 2e       	mov	r0, r27
 a36:	ba 2f       	mov	r27, r26
 a38:	a0 2d       	mov	r26, r0
 a3a:	0b 01       	movw	r0, r22
 a3c:	b9 01       	movw	r22, r18
 a3e:	90 01       	movw	r18, r0
 a40:	0c 01       	movw	r0, r24
 a42:	ca 01       	movw	r24, r20
 a44:	a0 01       	movw	r20, r0
 a46:	11 24       	eor	r1, r1
 a48:	ff 27       	eor	r31, r31
 a4a:	59 1b       	sub	r21, r25
 a4c:	99 f0       	breq	.+38     	; 0xa74 <__addsf3x+0x60>
 a4e:	59 3f       	cpi	r21, 0xF9	; 249
 a50:	50 f4       	brcc	.+20     	; 0xa66 <__addsf3x+0x52>
 a52:	50 3e       	cpi	r21, 0xE0	; 224
 a54:	68 f1       	brcs	.+90     	; 0xab0 <__addsf3x+0x9c>
 a56:	1a 16       	cp	r1, r26
 a58:	f0 40       	sbci	r31, 0x00	; 0
 a5a:	a2 2f       	mov	r26, r18
 a5c:	23 2f       	mov	r18, r19
 a5e:	34 2f       	mov	r19, r20
 a60:	44 27       	eor	r20, r20
 a62:	58 5f       	subi	r21, 0xF8	; 248
 a64:	f3 cf       	rjmp	.-26     	; 0xa4c <__addsf3x+0x38>
 a66:	46 95       	lsr	r20
 a68:	37 95       	ror	r19
 a6a:	27 95       	ror	r18
 a6c:	a7 95       	ror	r26
 a6e:	f0 40       	sbci	r31, 0x00	; 0
 a70:	53 95       	inc	r21
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__addsf3x+0x52>
 a74:	7e f4       	brtc	.+30     	; 0xa94 <__addsf3x+0x80>
 a76:	1f 16       	cp	r1, r31
 a78:	ba 0b       	sbc	r27, r26
 a7a:	62 0b       	sbc	r22, r18
 a7c:	73 0b       	sbc	r23, r19
 a7e:	84 0b       	sbc	r24, r20
 a80:	ba f0       	brmi	.+46     	; 0xab0 <__addsf3x+0x9c>
 a82:	91 50       	subi	r25, 0x01	; 1
 a84:	a1 f0       	breq	.+40     	; 0xaae <__addsf3x+0x9a>
 a86:	ff 0f       	add	r31, r31
 a88:	bb 1f       	adc	r27, r27
 a8a:	66 1f       	adc	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	c2 f7       	brpl	.-16     	; 0xa82 <__addsf3x+0x6e>
 a92:	0e c0       	rjmp	.+28     	; 0xab0 <__addsf3x+0x9c>
 a94:	ba 0f       	add	r27, r26
 a96:	62 1f       	adc	r22, r18
 a98:	73 1f       	adc	r23, r19
 a9a:	84 1f       	adc	r24, r20
 a9c:	48 f4       	brcc	.+18     	; 0xab0 <__addsf3x+0x9c>
 a9e:	87 95       	ror	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	b7 95       	ror	r27
 aa6:	f7 95       	ror	r31
 aa8:	9e 3f       	cpi	r25, 0xFE	; 254
 aaa:	08 f0       	brcs	.+2      	; 0xaae <__addsf3x+0x9a>
 aac:	b0 cf       	rjmp	.-160    	; 0xa0e <__addsf3+0x28>
 aae:	93 95       	inc	r25
 ab0:	88 0f       	add	r24, r24
 ab2:	08 f0       	brcs	.+2      	; 0xab6 <__addsf3x+0xa2>
 ab4:	99 27       	eor	r25, r25
 ab6:	ee 0f       	add	r30, r30
 ab8:	97 95       	ror	r25
 aba:	87 95       	ror	r24
 abc:	08 95       	ret

00000abe <__divsf3>:
 abe:	0e 94 73 05 	call	0xae6	; 0xae6 <__divsf3x>
 ac2:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_round>
 ac6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
 aca:	58 f0       	brcs	.+22     	; 0xae2 <__divsf3+0x24>
 acc:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
 ad0:	40 f0       	brcs	.+16     	; 0xae2 <__divsf3+0x24>
 ad2:	29 f4       	brne	.+10     	; 0xade <__divsf3+0x20>
 ad4:	5f 3f       	cpi	r21, 0xFF	; 255
 ad6:	29 f0       	breq	.+10     	; 0xae2 <__divsf3+0x24>
 ad8:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_inf>
 adc:	51 11       	cpse	r21, r1
 ade:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
 ae2:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>

00000ae6 <__divsf3x>:
 ae6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
 aea:	68 f3       	brcs	.-38     	; 0xac6 <__divsf3+0x8>

00000aec <__divsf3_pse>:
 aec:	99 23       	and	r25, r25
 aee:	b1 f3       	breq	.-20     	; 0xadc <__divsf3+0x1e>
 af0:	55 23       	and	r21, r21
 af2:	91 f3       	breq	.-28     	; 0xad8 <__divsf3+0x1a>
 af4:	95 1b       	sub	r25, r21
 af6:	55 0b       	sbc	r21, r21
 af8:	bb 27       	eor	r27, r27
 afa:	aa 27       	eor	r26, r26
 afc:	62 17       	cp	r22, r18
 afe:	73 07       	cpc	r23, r19
 b00:	84 07       	cpc	r24, r20
 b02:	38 f0       	brcs	.+14     	; 0xb12 <__divsf3_pse+0x26>
 b04:	9f 5f       	subi	r25, 0xFF	; 255
 b06:	5f 4f       	sbci	r21, 0xFF	; 255
 b08:	22 0f       	add	r18, r18
 b0a:	33 1f       	adc	r19, r19
 b0c:	44 1f       	adc	r20, r20
 b0e:	aa 1f       	adc	r26, r26
 b10:	a9 f3       	breq	.-22     	; 0xafc <__divsf3_pse+0x10>
 b12:	35 d0       	rcall	.+106    	; 0xb7e <__divsf3_pse+0x92>
 b14:	0e 2e       	mov	r0, r30
 b16:	3a f0       	brmi	.+14     	; 0xb26 <__divsf3_pse+0x3a>
 b18:	e0 e8       	ldi	r30, 0x80	; 128
 b1a:	32 d0       	rcall	.+100    	; 0xb80 <__divsf3_pse+0x94>
 b1c:	91 50       	subi	r25, 0x01	; 1
 b1e:	50 40       	sbci	r21, 0x00	; 0
 b20:	e6 95       	lsr	r30
 b22:	00 1c       	adc	r0, r0
 b24:	ca f7       	brpl	.-14     	; 0xb18 <__divsf3_pse+0x2c>
 b26:	2b d0       	rcall	.+86     	; 0xb7e <__divsf3_pse+0x92>
 b28:	fe 2f       	mov	r31, r30
 b2a:	29 d0       	rcall	.+82     	; 0xb7e <__divsf3_pse+0x92>
 b2c:	66 0f       	add	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	bb 1f       	adc	r27, r27
 b34:	26 17       	cp	r18, r22
 b36:	37 07       	cpc	r19, r23
 b38:	48 07       	cpc	r20, r24
 b3a:	ab 07       	cpc	r26, r27
 b3c:	b0 e8       	ldi	r27, 0x80	; 128
 b3e:	09 f0       	breq	.+2      	; 0xb42 <__divsf3_pse+0x56>
 b40:	bb 0b       	sbc	r27, r27
 b42:	80 2d       	mov	r24, r0
 b44:	bf 01       	movw	r22, r30
 b46:	ff 27       	eor	r31, r31
 b48:	93 58       	subi	r25, 0x83	; 131
 b4a:	5f 4f       	sbci	r21, 0xFF	; 255
 b4c:	3a f0       	brmi	.+14     	; 0xb5c <__divsf3_pse+0x70>
 b4e:	9e 3f       	cpi	r25, 0xFE	; 254
 b50:	51 05       	cpc	r21, r1
 b52:	78 f0       	brcs	.+30     	; 0xb72 <__divsf3_pse+0x86>
 b54:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_inf>
 b58:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
 b5c:	5f 3f       	cpi	r21, 0xFF	; 255
 b5e:	e4 f3       	brlt	.-8      	; 0xb58 <__divsf3_pse+0x6c>
 b60:	98 3e       	cpi	r25, 0xE8	; 232
 b62:	d4 f3       	brlt	.-12     	; 0xb58 <__divsf3_pse+0x6c>
 b64:	86 95       	lsr	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	b7 95       	ror	r27
 b6c:	f7 95       	ror	r31
 b6e:	9f 5f       	subi	r25, 0xFF	; 255
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__divsf3_pse+0x78>
 b72:	88 0f       	add	r24, r24
 b74:	91 1d       	adc	r25, r1
 b76:	96 95       	lsr	r25
 b78:	87 95       	ror	r24
 b7a:	97 f9       	bld	r25, 7
 b7c:	08 95       	ret
 b7e:	e1 e0       	ldi	r30, 0x01	; 1
 b80:	66 0f       	add	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	bb 1f       	adc	r27, r27
 b88:	62 17       	cp	r22, r18
 b8a:	73 07       	cpc	r23, r19
 b8c:	84 07       	cpc	r24, r20
 b8e:	ba 07       	cpc	r27, r26
 b90:	20 f0       	brcs	.+8      	; 0xb9a <__divsf3_pse+0xae>
 b92:	62 1b       	sub	r22, r18
 b94:	73 0b       	sbc	r23, r19
 b96:	84 0b       	sbc	r24, r20
 b98:	ba 0b       	sbc	r27, r26
 b9a:	ee 1f       	adc	r30, r30
 b9c:	88 f7       	brcc	.-30     	; 0xb80 <__divsf3_pse+0x94>
 b9e:	e0 95       	com	r30
 ba0:	08 95       	ret

00000ba2 <__fixsfsi>:
 ba2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fixunssfsi>
 ba6:	68 94       	set
 ba8:	b1 11       	cpse	r27, r1
 baa:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
 bae:	08 95       	ret

00000bb0 <__fixunssfsi>:
 bb0:	0e 94 d6 06 	call	0xdac	; 0xdac <__fp_splitA>
 bb4:	88 f0       	brcs	.+34     	; 0xbd8 <__fixunssfsi+0x28>
 bb6:	9f 57       	subi	r25, 0x7F	; 127
 bb8:	98 f0       	brcs	.+38     	; 0xbe0 <__fixunssfsi+0x30>
 bba:	b9 2f       	mov	r27, r25
 bbc:	99 27       	eor	r25, r25
 bbe:	b7 51       	subi	r27, 0x17	; 23
 bc0:	b0 f0       	brcs	.+44     	; 0xbee <__fixunssfsi+0x3e>
 bc2:	e1 f0       	breq	.+56     	; 0xbfc <__fixunssfsi+0x4c>
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	1a f0       	brmi	.+6      	; 0xbd4 <__fixunssfsi+0x24>
 bce:	ba 95       	dec	r27
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__fixunssfsi+0x14>
 bd2:	14 c0       	rjmp	.+40     	; 0xbfc <__fixunssfsi+0x4c>
 bd4:	b1 30       	cpi	r27, 0x01	; 1
 bd6:	91 f0       	breq	.+36     	; 0xbfc <__fixunssfsi+0x4c>
 bd8:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_zero>
 bdc:	b1 e0       	ldi	r27, 0x01	; 1
 bde:	08 95       	ret
 be0:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_zero>
 be4:	67 2f       	mov	r22, r23
 be6:	78 2f       	mov	r23, r24
 be8:	88 27       	eor	r24, r24
 bea:	b8 5f       	subi	r27, 0xF8	; 248
 bec:	39 f0       	breq	.+14     	; 0xbfc <__fixunssfsi+0x4c>
 bee:	b9 3f       	cpi	r27, 0xF9	; 249
 bf0:	cc f3       	brlt	.-14     	; 0xbe4 <__fixunssfsi+0x34>
 bf2:	86 95       	lsr	r24
 bf4:	77 95       	ror	r23
 bf6:	67 95       	ror	r22
 bf8:	b3 95       	inc	r27
 bfa:	d9 f7       	brne	.-10     	; 0xbf2 <__fixunssfsi+0x42>
 bfc:	3e f4       	brtc	.+14     	; 0xc0c <__fixunssfsi+0x5c>
 bfe:	90 95       	com	r25
 c00:	80 95       	com	r24
 c02:	70 95       	com	r23
 c04:	61 95       	neg	r22
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	08 95       	ret

00000c0e <__floatunsisf>:
 c0e:	e8 94       	clt
 c10:	09 c0       	rjmp	.+18     	; 0xc24 <__floatsisf+0x12>

00000c12 <__floatsisf>:
 c12:	97 fb       	bst	r25, 7
 c14:	3e f4       	brtc	.+14     	; 0xc24 <__floatsisf+0x12>
 c16:	90 95       	com	r25
 c18:	80 95       	com	r24
 c1a:	70 95       	com	r23
 c1c:	61 95       	neg	r22
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	99 23       	and	r25, r25
 c26:	a9 f0       	breq	.+42     	; 0xc52 <__floatsisf+0x40>
 c28:	f9 2f       	mov	r31, r25
 c2a:	96 e9       	ldi	r25, 0x96	; 150
 c2c:	bb 27       	eor	r27, r27
 c2e:	93 95       	inc	r25
 c30:	f6 95       	lsr	r31
 c32:	87 95       	ror	r24
 c34:	77 95       	ror	r23
 c36:	67 95       	ror	r22
 c38:	b7 95       	ror	r27
 c3a:	f1 11       	cpse	r31, r1
 c3c:	f8 cf       	rjmp	.-16     	; 0xc2e <__floatsisf+0x1c>
 c3e:	fa f4       	brpl	.+62     	; 0xc7e <__floatsisf+0x6c>
 c40:	bb 0f       	add	r27, r27
 c42:	11 f4       	brne	.+4      	; 0xc48 <__floatsisf+0x36>
 c44:	60 ff       	sbrs	r22, 0
 c46:	1b c0       	rjmp	.+54     	; 0xc7e <__floatsisf+0x6c>
 c48:	6f 5f       	subi	r22, 0xFF	; 255
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	16 c0       	rjmp	.+44     	; 0xc7e <__floatsisf+0x6c>
 c52:	88 23       	and	r24, r24
 c54:	11 f0       	breq	.+4      	; 0xc5a <__floatsisf+0x48>
 c56:	96 e9       	ldi	r25, 0x96	; 150
 c58:	11 c0       	rjmp	.+34     	; 0xc7c <__floatsisf+0x6a>
 c5a:	77 23       	and	r23, r23
 c5c:	21 f0       	breq	.+8      	; 0xc66 <__floatsisf+0x54>
 c5e:	9e e8       	ldi	r25, 0x8E	; 142
 c60:	87 2f       	mov	r24, r23
 c62:	76 2f       	mov	r23, r22
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <__floatsisf+0x5e>
 c66:	66 23       	and	r22, r22
 c68:	71 f0       	breq	.+28     	; 0xc86 <__floatsisf+0x74>
 c6a:	96 e8       	ldi	r25, 0x86	; 134
 c6c:	86 2f       	mov	r24, r22
 c6e:	70 e0       	ldi	r23, 0x00	; 0
 c70:	60 e0       	ldi	r22, 0x00	; 0
 c72:	2a f0       	brmi	.+10     	; 0xc7e <__floatsisf+0x6c>
 c74:	9a 95       	dec	r25
 c76:	66 0f       	add	r22, r22
 c78:	77 1f       	adc	r23, r23
 c7a:	88 1f       	adc	r24, r24
 c7c:	da f7       	brpl	.-10     	; 0xc74 <__floatsisf+0x62>
 c7e:	88 0f       	add	r24, r24
 c80:	96 95       	lsr	r25
 c82:	87 95       	ror	r24
 c84:	97 f9       	bld	r25, 7
 c86:	08 95       	ret
 c88:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
 c8c:	20 f0       	brcs	.+8      	; 0xc96 <__floatsisf+0x84>
 c8e:	19 f0       	breq	.+6      	; 0xc96 <__floatsisf+0x84>
 c90:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
 c94:	50 f4       	brcc	.+20     	; 0xcaa <fmod+0xc>
 c96:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>
 c9a:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>

00000c9e <fmod>:
 c9e:	e9 2f       	mov	r30, r25
 ca0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
 ca4:	88 f3       	brcs	.-30     	; 0xc88 <__floatsisf+0x76>
 ca6:	55 23       	and	r21, r21
 ca8:	b1 f3       	breq	.-20     	; 0xc96 <__floatsisf+0x84>
 caa:	e7 fb       	bst	r30, 7
 cac:	62 17       	cp	r22, r18
 cae:	73 07       	cpc	r23, r19
 cb0:	84 07       	cpc	r24, r20
 cb2:	95 07       	cpc	r25, r21
 cb4:	a8 f1       	brcs	.+106    	; 0xd20 <fmod+0x82>
 cb6:	89 f3       	breq	.-30     	; 0xc9a <__floatsisf+0x88>
 cb8:	e9 2f       	mov	r30, r25
 cba:	ff 27       	eor	r31, r31
 cbc:	88 23       	and	r24, r24
 cbe:	2a f0       	brmi	.+10     	; 0xcca <fmod+0x2c>
 cc0:	31 97       	sbiw	r30, 0x01	; 1
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	da f7       	brpl	.-10     	; 0xcc0 <fmod+0x22>
 cca:	95 2f       	mov	r25, r21
 ccc:	55 27       	eor	r21, r21
 cce:	44 23       	and	r20, r20
 cd0:	32 f0       	brmi	.+12     	; 0xcde <fmod+0x40>
 cd2:	91 50       	subi	r25, 0x01	; 1
 cd4:	50 40       	sbci	r21, 0x00	; 0
 cd6:	22 0f       	add	r18, r18
 cd8:	33 1f       	adc	r19, r19
 cda:	44 1f       	adc	r20, r20
 cdc:	d2 f7       	brpl	.-12     	; 0xcd2 <fmod+0x34>
 cde:	bb 27       	eor	r27, r27
 ce0:	e9 1b       	sub	r30, r25
 ce2:	f5 0b       	sbc	r31, r21
 ce4:	62 1b       	sub	r22, r18
 ce6:	73 0b       	sbc	r23, r19
 ce8:	84 0b       	sbc	r24, r20
 cea:	b1 09       	sbc	r27, r1
 cec:	b1 f2       	breq	.-84     	; 0xc9a <__floatsisf+0x88>
 cee:	22 f4       	brpl	.+8      	; 0xcf8 <fmod+0x5a>
 cf0:	62 0f       	add	r22, r18
 cf2:	73 1f       	adc	r23, r19
 cf4:	84 1f       	adc	r24, r20
 cf6:	b1 1d       	adc	r27, r1
 cf8:	31 97       	sbiw	r30, 0x01	; 1
 cfa:	2a f0       	brmi	.+10     	; 0xd06 <fmod+0x68>
 cfc:	66 0f       	add	r22, r22
 cfe:	77 1f       	adc	r23, r23
 d00:	88 1f       	adc	r24, r24
 d02:	bb 1f       	adc	r27, r27
 d04:	ef cf       	rjmp	.-34     	; 0xce4 <fmod+0x46>
 d06:	91 50       	subi	r25, 0x01	; 1
 d08:	50 40       	sbci	r21, 0x00	; 0
 d0a:	62 f0       	brmi	.+24     	; 0xd24 <fmod+0x86>
 d0c:	41 f0       	breq	.+16     	; 0xd1e <fmod+0x80>
 d0e:	88 23       	and	r24, r24
 d10:	32 f0       	brmi	.+12     	; 0xd1e <fmod+0x80>
 d12:	66 0f       	add	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	91 50       	subi	r25, 0x01	; 1
 d1a:	50 40       	sbci	r21, 0x00	; 0
 d1c:	c1 f7       	brne	.-16     	; 0xd0e <fmod+0x70>
 d1e:	93 95       	inc	r25
 d20:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_mpack>
 d24:	86 95       	lsr	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	9f 5f       	subi	r25, 0xFF	; 255
 d2c:	d9 f7       	brne	.-10     	; 0xd24 <fmod+0x86>
 d2e:	f7 cf       	rjmp	.-18     	; 0xd1e <fmod+0x80>

00000d30 <__fp_inf>:
 d30:	97 f9       	bld	r25, 7
 d32:	9f 67       	ori	r25, 0x7F	; 127
 d34:	80 e8       	ldi	r24, 0x80	; 128
 d36:	70 e0       	ldi	r23, 0x00	; 0
 d38:	60 e0       	ldi	r22, 0x00	; 0
 d3a:	08 95       	ret

00000d3c <__fp_mpack>:
 d3c:	9f 3f       	cpi	r25, 0xFF	; 255
 d3e:	31 f0       	breq	.+12     	; 0xd4c <__fp_mpack_finite+0xc>

00000d40 <__fp_mpack_finite>:
 d40:	91 50       	subi	r25, 0x01	; 1
 d42:	20 f4       	brcc	.+8      	; 0xd4c <__fp_mpack_finite+0xc>
 d44:	87 95       	ror	r24
 d46:	77 95       	ror	r23
 d48:	67 95       	ror	r22
 d4a:	b7 95       	ror	r27
 d4c:	88 0f       	add	r24, r24
 d4e:	91 1d       	adc	r25, r1
 d50:	96 95       	lsr	r25
 d52:	87 95       	ror	r24
 d54:	97 f9       	bld	r25, 7
 d56:	08 95       	ret

00000d58 <__fp_nan>:
 d58:	9f ef       	ldi	r25, 0xFF	; 255
 d5a:	80 ec       	ldi	r24, 0xC0	; 192
 d5c:	08 95       	ret

00000d5e <__fp_pscA>:
 d5e:	00 24       	eor	r0, r0
 d60:	0a 94       	dec	r0
 d62:	16 16       	cp	r1, r22
 d64:	17 06       	cpc	r1, r23
 d66:	18 06       	cpc	r1, r24
 d68:	09 06       	cpc	r0, r25
 d6a:	08 95       	ret

00000d6c <__fp_pscB>:
 d6c:	00 24       	eor	r0, r0
 d6e:	0a 94       	dec	r0
 d70:	12 16       	cp	r1, r18
 d72:	13 06       	cpc	r1, r19
 d74:	14 06       	cpc	r1, r20
 d76:	05 06       	cpc	r0, r21
 d78:	08 95       	ret

00000d7a <__fp_round>:
 d7a:	09 2e       	mov	r0, r25
 d7c:	03 94       	inc	r0
 d7e:	00 0c       	add	r0, r0
 d80:	11 f4       	brne	.+4      	; 0xd86 <__fp_round+0xc>
 d82:	88 23       	and	r24, r24
 d84:	52 f0       	brmi	.+20     	; 0xd9a <__fp_round+0x20>
 d86:	bb 0f       	add	r27, r27
 d88:	40 f4       	brcc	.+16     	; 0xd9a <__fp_round+0x20>
 d8a:	bf 2b       	or	r27, r31
 d8c:	11 f4       	brne	.+4      	; 0xd92 <__fp_round+0x18>
 d8e:	60 ff       	sbrs	r22, 0
 d90:	04 c0       	rjmp	.+8      	; 0xd9a <__fp_round+0x20>
 d92:	6f 5f       	subi	r22, 0xFF	; 255
 d94:	7f 4f       	sbci	r23, 0xFF	; 255
 d96:	8f 4f       	sbci	r24, 0xFF	; 255
 d98:	9f 4f       	sbci	r25, 0xFF	; 255
 d9a:	08 95       	ret

00000d9c <__fp_split3>:
 d9c:	57 fd       	sbrc	r21, 7
 d9e:	90 58       	subi	r25, 0x80	; 128
 da0:	44 0f       	add	r20, r20
 da2:	55 1f       	adc	r21, r21
 da4:	59 f0       	breq	.+22     	; 0xdbc <__fp_splitA+0x10>
 da6:	5f 3f       	cpi	r21, 0xFF	; 255
 da8:	71 f0       	breq	.+28     	; 0xdc6 <__fp_splitA+0x1a>
 daa:	47 95       	ror	r20

00000dac <__fp_splitA>:
 dac:	88 0f       	add	r24, r24
 dae:	97 fb       	bst	r25, 7
 db0:	99 1f       	adc	r25, r25
 db2:	61 f0       	breq	.+24     	; 0xdcc <__fp_splitA+0x20>
 db4:	9f 3f       	cpi	r25, 0xFF	; 255
 db6:	79 f0       	breq	.+30     	; 0xdd6 <__fp_splitA+0x2a>
 db8:	87 95       	ror	r24
 dba:	08 95       	ret
 dbc:	12 16       	cp	r1, r18
 dbe:	13 06       	cpc	r1, r19
 dc0:	14 06       	cpc	r1, r20
 dc2:	55 1f       	adc	r21, r21
 dc4:	f2 cf       	rjmp	.-28     	; 0xdaa <__fp_split3+0xe>
 dc6:	46 95       	lsr	r20
 dc8:	f1 df       	rcall	.-30     	; 0xdac <__fp_splitA>
 dca:	08 c0       	rjmp	.+16     	; 0xddc <__fp_splitA+0x30>
 dcc:	16 16       	cp	r1, r22
 dce:	17 06       	cpc	r1, r23
 dd0:	18 06       	cpc	r1, r24
 dd2:	99 1f       	adc	r25, r25
 dd4:	f1 cf       	rjmp	.-30     	; 0xdb8 <__fp_splitA+0xc>
 dd6:	86 95       	lsr	r24
 dd8:	71 05       	cpc	r23, r1
 dda:	61 05       	cpc	r22, r1
 ddc:	08 94       	sec
 dde:	08 95       	ret

00000de0 <__fp_zero>:
 de0:	e8 94       	clt

00000de2 <__fp_szero>:
 de2:	bb 27       	eor	r27, r27
 de4:	66 27       	eor	r22, r22
 de6:	77 27       	eor	r23, r23
 de8:	cb 01       	movw	r24, r22
 dea:	97 f9       	bld	r25, 7
 dec:	08 95       	ret

00000dee <__mulsf3>:
 dee:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulsf3x>
 df2:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_round>
 df6:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
 dfa:	38 f0       	brcs	.+14     	; 0xe0a <__mulsf3+0x1c>
 dfc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
 e00:	20 f0       	brcs	.+8      	; 0xe0a <__mulsf3+0x1c>
 e02:	95 23       	and	r25, r21
 e04:	11 f0       	breq	.+4      	; 0xe0a <__mulsf3+0x1c>
 e06:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_inf>
 e0a:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>
 e0e:	11 24       	eor	r1, r1
 e10:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>

00000e14 <__mulsf3x>:
 e14:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
 e18:	70 f3       	brcs	.-36     	; 0xdf6 <__mulsf3+0x8>

00000e1a <__mulsf3_pse>:
 e1a:	95 9f       	mul	r25, r21
 e1c:	c1 f3       	breq	.-16     	; 0xe0e <__mulsf3+0x20>
 e1e:	95 0f       	add	r25, r21
 e20:	50 e0       	ldi	r21, 0x00	; 0
 e22:	55 1f       	adc	r21, r21
 e24:	62 9f       	mul	r22, r18
 e26:	f0 01       	movw	r30, r0
 e28:	72 9f       	mul	r23, r18
 e2a:	bb 27       	eor	r27, r27
 e2c:	f0 0d       	add	r31, r0
 e2e:	b1 1d       	adc	r27, r1
 e30:	63 9f       	mul	r22, r19
 e32:	aa 27       	eor	r26, r26
 e34:	f0 0d       	add	r31, r0
 e36:	b1 1d       	adc	r27, r1
 e38:	aa 1f       	adc	r26, r26
 e3a:	64 9f       	mul	r22, r20
 e3c:	66 27       	eor	r22, r22
 e3e:	b0 0d       	add	r27, r0
 e40:	a1 1d       	adc	r26, r1
 e42:	66 1f       	adc	r22, r22
 e44:	82 9f       	mul	r24, r18
 e46:	22 27       	eor	r18, r18
 e48:	b0 0d       	add	r27, r0
 e4a:	a1 1d       	adc	r26, r1
 e4c:	62 1f       	adc	r22, r18
 e4e:	73 9f       	mul	r23, r19
 e50:	b0 0d       	add	r27, r0
 e52:	a1 1d       	adc	r26, r1
 e54:	62 1f       	adc	r22, r18
 e56:	83 9f       	mul	r24, r19
 e58:	a0 0d       	add	r26, r0
 e5a:	61 1d       	adc	r22, r1
 e5c:	22 1f       	adc	r18, r18
 e5e:	74 9f       	mul	r23, r20
 e60:	33 27       	eor	r19, r19
 e62:	a0 0d       	add	r26, r0
 e64:	61 1d       	adc	r22, r1
 e66:	23 1f       	adc	r18, r19
 e68:	84 9f       	mul	r24, r20
 e6a:	60 0d       	add	r22, r0
 e6c:	21 1d       	adc	r18, r1
 e6e:	82 2f       	mov	r24, r18
 e70:	76 2f       	mov	r23, r22
 e72:	6a 2f       	mov	r22, r26
 e74:	11 24       	eor	r1, r1
 e76:	9f 57       	subi	r25, 0x7F	; 127
 e78:	50 40       	sbci	r21, 0x00	; 0
 e7a:	9a f0       	brmi	.+38     	; 0xea2 <__mulsf3_pse+0x88>
 e7c:	f1 f0       	breq	.+60     	; 0xeba <__mulsf3_pse+0xa0>
 e7e:	88 23       	and	r24, r24
 e80:	4a f0       	brmi	.+18     	; 0xe94 <__mulsf3_pse+0x7a>
 e82:	ee 0f       	add	r30, r30
 e84:	ff 1f       	adc	r31, r31
 e86:	bb 1f       	adc	r27, r27
 e88:	66 1f       	adc	r22, r22
 e8a:	77 1f       	adc	r23, r23
 e8c:	88 1f       	adc	r24, r24
 e8e:	91 50       	subi	r25, 0x01	; 1
 e90:	50 40       	sbci	r21, 0x00	; 0
 e92:	a9 f7       	brne	.-22     	; 0xe7e <__mulsf3_pse+0x64>
 e94:	9e 3f       	cpi	r25, 0xFE	; 254
 e96:	51 05       	cpc	r21, r1
 e98:	80 f0       	brcs	.+32     	; 0xeba <__mulsf3_pse+0xa0>
 e9a:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_inf>
 e9e:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
 ea2:	5f 3f       	cpi	r21, 0xFF	; 255
 ea4:	e4 f3       	brlt	.-8      	; 0xe9e <__mulsf3_pse+0x84>
 ea6:	98 3e       	cpi	r25, 0xE8	; 232
 ea8:	d4 f3       	brlt	.-12     	; 0xe9e <__mulsf3_pse+0x84>
 eaa:	86 95       	lsr	r24
 eac:	77 95       	ror	r23
 eae:	67 95       	ror	r22
 eb0:	b7 95       	ror	r27
 eb2:	f7 95       	ror	r31
 eb4:	e7 95       	ror	r30
 eb6:	9f 5f       	subi	r25, 0xFF	; 255
 eb8:	c1 f7       	brne	.-16     	; 0xeaa <__mulsf3_pse+0x90>
 eba:	fe 2b       	or	r31, r30
 ebc:	88 0f       	add	r24, r24
 ebe:	91 1d       	adc	r25, r1
 ec0:	96 95       	lsr	r25
 ec2:	87 95       	ror	r24
 ec4:	97 f9       	bld	r25, 7
 ec6:	08 95       	ret

00000ec8 <_exit>:
 ec8:	f8 94       	cli

00000eca <__stop_program>:
 eca:	ff cf       	rjmp	.-2      	; 0xeca <__stop_program>
