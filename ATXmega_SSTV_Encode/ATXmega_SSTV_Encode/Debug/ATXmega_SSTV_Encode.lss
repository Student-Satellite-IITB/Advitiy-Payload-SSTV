
ATXmega_SSTV_Encode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001004  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00001004  00001098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00802008  00802008  000010a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e36  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c3a  00000000  00000000  000081be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000160d  00000000  00000000  0000bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  0000d408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bed  00000000  00000000  0000dacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c52  00000000  00000000  000116b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0001330b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_16>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      68:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e4 e0       	ldi	r30, 0x04	; 4
     214:	f0 e1       	ldi	r31, 0x10	; 16
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a8 30       	cpi	r26, 0x08	; 8
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a8 e0       	ldi	r26, 0x08	; 8
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ae 34       	cpi	r26, 0x4E	; 78
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
     23a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Set_AD9833>:

#include "AD9833.h"
#include "spi_driver.h"

void Set_AD9833(float frequency, unsigned int phase) // Zero amplitude time : 39 miroseconds
{
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	8a 01       	movw	r16, r20
	long FreqReg = (((float)frequency)*pow(2,28))/(float)FMCLK;	  //Calculate frequency to be sent to AD9833
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e8       	ldi	r20, 0x80	; 128
     25a:	5d e4       	ldi	r21, 0x4D	; 77
     25c:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
     260:	20 e2       	ldi	r18, 0x20	; 32
     262:	3c eb       	ldi	r19, 0xBC	; 188
     264:	4e eb       	ldi	r20, 0xBE	; 190
     266:	5b e4       	ldi	r21, 0x4B	; 75
     268:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__divsf3>
     26c:	0e 94 6d 06 	call	0xcda	; 0xcda <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);				  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
     270:	6b 01       	movw	r12, r22
     272:	7c 01       	movw	r14, r24
     274:	cc 24       	eor	r12, r12
     276:	20 ec       	ldi	r18, 0xC0	; 192
     278:	d2 22       	and	r13, r18
     27a:	2f e0       	ldi	r18, 0x0F	; 15
     27c:	f2 22       	and	r15, r18
     27e:	0b 2e       	mov	r0, r27
     280:	be e0       	ldi	r27, 0x0E	; 14
     282:	f5 94       	asr	r15
     284:	e7 94       	ror	r14
     286:	d7 94       	ror	r13
     288:	c7 94       	ror	r12
     28a:	ba 95       	dec	r27
     28c:	d1 f7       	brne	.-12     	; 0x282 <Set_AD9833+0x40>
     28e:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));						  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB
     290:	eb 01       	movw	r28, r22
     292:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;												  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     											  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_send16(0x2100);											  //Define waveform and set reset bit
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	91 e2       	ldi	r25, 0x21	; 33
     298:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
	SPI_send16(LSB);											  //Write LSBs
     29c:	ce 01       	movw	r24, r28
     29e:	90 64       	ori	r25, 0x40	; 64
     2a0:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
	SPI_send16(MSB);											  //Write MSBs
     2a4:	c6 01       	movw	r24, r12
     2a6:	90 64       	ori	r25, 0x40	; 64
     2a8:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
	phase&=0x0FFF;
     2ac:	c8 01       	movw	r24, r16
     2ae:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;												  //Set Phase write enable bytes
	//SPI_write16(0xC000);										  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_send16(phase);											  //Write Phase bytes
     2b0:	90 6c       	ori	r25, 0xC0	; 192
     2b2:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
	SPI_send16(0x2000);											  //Unset reset bit
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e2       	ldi	r25, 0x20	; 32
     2ba:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	08 95       	ret

000002d0 <getphase>:

unsigned int getphase(float prevPhase,float nextFreq, float prevTime)
{
     2d0:	4f 92       	push	r4
     2d2:	5f 92       	push	r5
     2d4:	6f 92       	push	r6
     2d6:	7f 92       	push	r7
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <getphase+0x22>
     2f2:	1f 92       	push	r1
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	2b 01       	movw	r4, r22
     2fa:	3c 01       	movw	r6, r24
     2fc:	49 01       	movw	r8, r18
     2fe:	5a 01       	movw	r10, r20
     300:	67 01       	movw	r12, r14
     302:	78 01       	movw	r14, r16
	prevTime/=1000000;																	//Convert time to microseconds
	prevPhase/=2048/PI;																	//Change scaling of Phase as required by AD9833
	float returnPhase=((fmod(prevTime,(1/nextFreq))*2*PI*nextFreq)+prevPhase)*2048/PI;	//Calculate phase completed by previous wave
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	80 e8       	ldi	r24, 0x80	; 128
     30a:	9f e3       	ldi	r25, 0x3F	; 63
     30c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__divsf3>
     310:	69 83       	std	Y+1, r22	; 0x01
     312:	7a 83       	std	Y+2, r23	; 0x02
     314:	8b 83       	std	Y+3, r24	; 0x03
     316:	9c 83       	std	Y+4, r25	; 0x04
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	34 e2       	ldi	r19, 0x24	; 36
     31c:	44 e7       	ldi	r20, 0x74	; 116
     31e:	59 e4       	ldi	r21, 0x49	; 73
     320:	c7 01       	movw	r24, r14
     322:	b6 01       	movw	r22, r12
     324:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__divsf3>
     328:	29 81       	ldd	r18, Y+1	; 0x01
     32a:	3a 81       	ldd	r19, Y+2	; 0x02
     32c:	4b 81       	ldd	r20, Y+3	; 0x03
     32e:	5c 81       	ldd	r21, Y+4	; 0x04
     330:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <fmod>
	return (unsigned int) returnPhase;													//Return in 16 bit format
     334:	9b 01       	movw	r18, r22
     336:	ac 01       	movw	r20, r24
     338:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__addsf3>
     33c:	20 ed       	ldi	r18, 0xD0	; 208
     33e:	3f e0       	ldi	r19, 0x0F	; 15
     340:	49 e4       	ldi	r20, 0x49	; 73
     342:	50 e4       	ldi	r21, 0x40	; 64
     344:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
     348:	a5 01       	movw	r20, r10
     34a:	94 01       	movw	r18, r8
     34c:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
     350:	6b 01       	movw	r12, r22
     352:	7c 01       	movw	r14, r24
     354:	2c e8       	ldi	r18, 0x8C	; 140
     356:	39 ef       	ldi	r19, 0xF9	; 249
     358:	42 e2       	ldi	r20, 0x22	; 34
     35a:	54 e4       	ldi	r21, 0x44	; 68
     35c:	c3 01       	movw	r24, r6
     35e:	b2 01       	movw	r22, r4
     360:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__divsf3>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__addsf3>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	55 e4       	ldi	r21, 0x45	; 69
     378:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
     37c:	20 ed       	ldi	r18, 0xD0	; 208
     37e:	3f e0       	ldi	r19, 0x0F	; 15
     380:	49 e4       	ldi	r20, 0x49	; 73
     382:	50 e4       	ldi	r21, 0x40	; 64
     384:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__divsf3>
     388:	0e 94 74 06 	call	0xce8	; 0xce8 <__fixunssfsi>
}
     38c:	cb 01       	movw	r24, r22
     38e:	24 96       	adiw	r28, 0x04	; 4
     390:	cd bf       	out	0x3d, r28	; 61
     392:	de bf       	out	0x3e, r29	; 62
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	6f 90       	pop	r6
     3b0:	5f 90       	pop	r5
     3b2:	4f 90       	pop	r4
     3b4:	08 95       	ret

000003b6 <main>:
volatile int frequency=1757,phase=0,prevPhase=0,prevFreq=0,pixelCount=0;
volatile uint8_t sectorAdress=0, pageAddress=0, byteAddress=0;

int main(void)
{
	setUp16MhzExternalOsc();	//Required for setting 16Mhz frequency
     3b6:	0e 94 03 05 	call	0xa06	; 0xa06 <setUp16MhzExternalOsc>
	SetClock0();				//Initialize 532 us interrupts
     3ba:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <SetClock0>
	SPI_Master_init();			//Initialize SPI for AD9833
     3be:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <SPI_Master_init>
	eepromInit();				//Initialize SPI for EEPROM
     3c2:	0e 94 00 03 	call	0x600	; 0x600 <eepromInit>
	SetUsart();					
     3c6:	0e 94 33 05 	call	0xa66	; 0xa66 <SetUsart>
	Set_AD9833(0,0);
*/



SPI_send16(11365); SPI_send8(0); 
     3ca:	85 e6       	ldi	r24, 0x65	; 101
     3cc:	9c e2       	ldi	r25, 0x2C	; 44
     3ce:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	81 ee       	ldi	r24, 0xE1	; 225
     3dc:	94 e0       	ldi	r25, 0x04	; 4
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x28>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x32>
     3e8:	00 00       	nop
_delay_ms(100);
SPI_send16(12288); SPI_send8(68); 
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e3       	ldi	r25, 0x30	; 48
     3ee:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     3f2:	84 e4       	ldi	r24, 0x44	; 68
     3f4:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
     3f8:	2f ef       	ldi	r18, 0xFF	; 255
     3fa:	81 ee       	ldi	r24, 0xE1	; 225
     3fc:	94 e0       	ldi	r25, 0x04	; 4
     3fe:	21 50       	subi	r18, 0x01	; 1
     400:	80 40       	sbci	r24, 0x00	; 0
     402:	90 40       	sbci	r25, 0x00	; 0
     404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x48>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
_delay_ms(100);
SPI_send16(1024); SPI_send8(0); 
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	94 e0       	ldi	r25, 0x04	; 4
     40e:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	81 ee       	ldi	r24, 0xE1	; 225
     41c:	94 e0       	ldi	r25, 0x04	; 4
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	80 40       	sbci	r24, 0x00	; 0
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     428:	00 00       	nop
_delay_ms(100);
SPI_send16(2564); SPI_send8(63); 
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	9a e0       	ldi	r25, 0x0A	; 10
     42e:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     432:	8f e3       	ldi	r24, 0x3F	; 63
     434:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	81 ee       	ldi	r24, 0xE1	; 225
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     448:	00 00       	nop
_delay_ms(100);
SPI_send16(10496); SPI_send8(50); 
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	99 e2       	ldi	r25, 0x29	; 41
     44e:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     452:	82 e3       	ldi	r24, 0x32	; 50
     454:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	81 ee       	ldi	r24, 0xE1	; 225
     45c:	94 e0       	ldi	r25, 0x04	; 4
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 40       	sbci	r25, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     468:	00 00       	nop
_delay_ms(100);
SPI_send16(10756); SPI_send8(176); 
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	9a e2       	ldi	r25, 0x2A	; 42
     46e:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     472:	80 eb       	ldi	r24, 0xB0	; 176
     474:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
     478:	2f ef       	ldi	r18, 0xFF	; 255
     47a:	81 ee       	ldi	r24, 0xE1	; 225
     47c:	94 e0       	ldi	r25, 0x04	; 4
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	80 40       	sbci	r24, 0x00	; 0
     482:	90 40       	sbci	r25, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     488:	00 00       	nop
_delay_ms(100);
SPI_send16(11035); SPI_send8(0); 
     48a:	8b e1       	ldi	r24, 0x1B	; 27
     48c:	9b e2       	ldi	r25, 0x2B	; 43
     48e:	0e 94 bd 04 	call	0x97a	; 0x97a <SPI_send16>
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_send8>
     498:	2f ef       	ldi	r18, 0xFF	; 255
     49a:	81 ee       	ldi	r24, 0xE1	; 225
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	21 50       	subi	r18, 0x01	; 1
     4a0:	80 40       	sbci	r24, 0x00	; 0
     4a2:	90 40       	sbci	r25, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a8:	00 00       	nop
     4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>

000004ac <__vector_16>:
		;
	}
}

ISR(TCC0_CCA_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	0b b6       	in	r0, 0x3b	; 59
     4b8:	0f 92       	push	r0
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
	Set_AD9833(frequency,phase);											//Set waveform generator with frequency and phase calculated in previous cycle
     4e6:	c0 91 11 20 	lds	r28, 0x2011	; 0x802011 <phase>
     4ea:	d0 91 12 20 	lds	r29, 0x2012	; 0x802012 <phase+0x1>
     4ee:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     4f2:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     4f6:	07 2e       	mov	r0, r23
     4f8:	00 0c       	add	r0, r0
     4fa:	88 0b       	sbc	r24, r24
     4fc:	99 0b       	sbc	r25, r25
     4fe:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__floatsisf>
     502:	ae 01       	movw	r20, r28
     504:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	prevPhase=phase;														//Save previous wave's ending phase for next phase calculation
     508:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <phase>
     50c:	90 91 12 20 	lds	r25, 0x2012	; 0x802012 <phase+0x1>
     510:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <prevPhase>
     514:	90 93 10 20 	sts	0x2010, r25	; 0x802010 <prevPhase+0x1>
	prevFreq=frequency;														//Save previous wave's ending frequency for next phase calculation
     518:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     51c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     520:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <prevFreq>
     524:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <prevFreq+0x1>
	frequency = eepromReadByte(&sectorAdress, &pageAddress, &byteAddress);	//Reads one byte from the given location and increments the address pointer
     528:	48 e0       	ldi	r20, 0x08	; 8
     52a:	50 e2       	ldi	r21, 0x20	; 32
     52c:	69 e0       	ldi	r22, 0x09	; 9
     52e:	70 e2       	ldi	r23, 0x20	; 32
     530:	8a e0       	ldi	r24, 0x0A	; 10
     532:	90 e2       	ldi	r25, 0x20	; 32
     534:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <eepromReadByte>
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     53e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	frequency = 1500 + (frequency* 3.1372549);								//Converting one byte color data to 2 byte frequency
     542:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     546:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     54a:	07 2e       	mov	r0, r23
     54c:	00 0c       	add	r0, r0
     54e:	88 0b       	sbc	r24, r24
     550:	99 0b       	sbc	r25, r25
     552:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__floatsisf>
     556:	29 ec       	ldi	r18, 0xC9	; 201
     558:	38 ec       	ldi	r19, 0xC8	; 200
     55a:	48 e4       	ldi	r20, 0x48	; 72
     55c:	50 e4       	ldi	r21, 0x40	; 64
     55e:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e8       	ldi	r19, 0x80	; 128
     566:	4b eb       	ldi	r20, 0xBB	; 187
     568:	54 e4       	ldi	r21, 0x44	; 68
     56a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__addsf3>
     56e:	0e 94 6d 06 	call	0xcda	; 0xcda <__fixsfsi>
     572:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <__data_start>
     576:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <__data_start+0x1>
	/* Code for generating single color image
	if(pixelCount==319) frequency = 2253;
	else if(pixelCount==639) frequency = 1782;
	else if(pixelCount==959) frequency = 1757;
	*/
	phase=getphase(prevPhase,prevFreq,532);									//Retrieve phase for next wave
     57a:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <prevFreq>
     57e:	70 91 0e 20 	lds	r23, 0x200E	; 0x80200e <prevFreq+0x1>
     582:	c0 91 0f 20 	lds	r28, 0x200F	; 0x80200f <prevPhase>
     586:	d0 91 10 20 	lds	r29, 0x2010	; 0x802010 <prevPhase+0x1>
     58a:	07 2e       	mov	r0, r23
     58c:	00 0c       	add	r0, r0
     58e:	88 0b       	sbc	r24, r24
     590:	99 0b       	sbc	r25, r25
     592:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__floatsisf>
     596:	4b 01       	movw	r8, r22
     598:	5c 01       	movw	r10, r24
     59a:	be 01       	movw	r22, r28
     59c:	dd 0f       	add	r29, r29
     59e:	88 0b       	sbc	r24, r24
     5a0:	99 0b       	sbc	r25, r25
     5a2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__floatsisf>
     5a6:	e1 2c       	mov	r14, r1
     5a8:	f1 2c       	mov	r15, r1
     5aa:	05 e0       	ldi	r16, 0x05	; 5
     5ac:	14 e4       	ldi	r17, 0x44	; 68
     5ae:	a5 01       	movw	r20, r10
     5b0:	94 01       	movw	r18, r8
     5b2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <getphase>
     5b6:	80 93 11 20 	sts	0x2011, r24	; 0x802011 <phase>
     5ba:	90 93 12 20 	sts	0x2012, r25	; 0x802012 <phase+0x1>
	pixelCount;
     5be:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <pixelCount>
     5c2:	90 91 0c 20 	lds	r25, 0x200C	; 0x80200c <pixelCount+0x1>
}
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	7f 91       	pop	r23
     5d8:	6f 91       	pop	r22
     5da:	5f 91       	pop	r21
     5dc:	4f 91       	pop	r20
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	9f 90       	pop	r9
     5f0:	8f 90       	pop	r8
     5f2:	0f 90       	pop	r0
     5f4:	0b be       	out	0x3b, r0	; 59
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <eepromInit>:
	SPI_MasterTransceiveByte(&spiMasterD, *sectorAddress);
	SPI_MasterTransceiveByte(&spiMasterD, *pageAddress);
	SPI_MasterTransceiveByte(&spiMasterD, *byteAddress);
	SPI_MasterTransceiveByte(&spiMasterD, data);
	eepromMasterHigh(eepromID);
}
     600:	af 92       	push	r10
     602:	cf 92       	push	r12
     604:	ef 92       	push	r14
     606:	0f 93       	push	r16
     608:	e0 e6       	ldi	r30, 0x60	; 96
     60a:	f6 e0       	ldi	r31, 0x06	; 6
     60c:	34 e0       	ldi	r19, 0x04	; 4
     60e:	31 83       	std	Z+1, r19	; 0x01
     610:	28 e0       	ldi	r18, 0x08	; 8
     612:	21 83       	std	Z+1, r18	; 0x01
     614:	90 e1       	ldi	r25, 0x10	; 16
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 e2       	ldi	r24, 0x20	; 32
     61a:	81 83       	std	Z+1, r24	; 0x01
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	88 e3       	ldi	r24, 0x38	; 56
     622:	82 8b       	std	Z+18, r24	; 0x12
     624:	83 8b       	std	Z+19, r24	; 0x13
     626:	84 8b       	std	Z+20, r24	; 0x14
     628:	35 83       	std	Z+5, r19	; 0x05
     62a:	25 83       	std	Z+5, r18	; 0x05
     62c:	95 83       	std	Z+5, r25	; 0x05
     62e:	a1 2c       	mov	r10, r1
     630:	cc 24       	eor	r12, r12
     632:	c3 94       	inc	r12
     634:	e1 2c       	mov	r14, r1
     636:	08 e0       	ldi	r16, 0x08	; 8
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	40 e6       	ldi	r20, 0x60	; 96
     63c:	56 e0       	ldi	r21, 0x06	; 6
     63e:	60 ec       	ldi	r22, 0xC0	; 192
     640:	79 e0       	ldi	r23, 0x09	; 9
     642:	8e e1       	ldi	r24, 0x1E	; 30
     644:	90 e2       	ldi	r25, 0x20	; 32
     646:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <SPI_MasterInit>
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <eepromID>
     652:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <eepromID+0x1>
     656:	0f 91       	pop	r16
     658:	ef 90       	pop	r14
     65a:	cf 90       	pop	r12
     65c:	af 90       	pop	r10
     65e:	08 95       	ret

00000660 <eepromMasterLow>:
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	91 05       	cpc	r25, r1
     664:	61 f0       	breq	.+24     	; 0x67e <eepromMasterLow+0x1e>
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	91 05       	cpc	r25, r1
     66a:	81 f0       	breq	.+32     	; 0x68c <eepromMasterLow+0x2c>
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	a1 f4       	brne	.+40     	; 0x698 <eepromMasterLow+0x38>
     670:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssport2>
     674:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssport2+0x1>
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	86 83       	std	Z+6, r24	; 0x06
     67c:	08 95       	ret
     67e:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssport2>
     682:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssport2+0x1>
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	86 83       	std	Z+6, r24	; 0x06
     68a:	08 95       	ret
     68c:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssport2>
     690:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssport2+0x1>
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	86 83       	std	Z+6, r24	; 0x06
     698:	08 95       	ret

0000069a <eepromMasterHigh>:
     69a:	82 30       	cpi	r24, 0x02	; 2
     69c:	91 05       	cpc	r25, r1
     69e:	61 f0       	breq	.+24     	; 0x6b8 <eepromMasterHigh+0x1e>
     6a0:	83 30       	cpi	r24, 0x03	; 3
     6a2:	91 05       	cpc	r25, r1
     6a4:	81 f0       	breq	.+32     	; 0x6c6 <eepromMasterHigh+0x2c>
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	a1 f4       	brne	.+40     	; 0x6d2 <eepromMasterHigh+0x38>
     6aa:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssport2>
     6ae:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssport2+0x1>
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	85 83       	std	Z+5, r24	; 0x05
     6b6:	08 95       	ret
     6b8:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssport2>
     6bc:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssport2+0x1>
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	85 83       	std	Z+5, r24	; 0x05
     6c4:	08 95       	ret
     6c6:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssport2>
     6ca:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssport2+0x1>
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	85 83       	std	Z+5, r24	; 0x05
     6d2:	08 95       	ret

000006d4 <eepromReadByte>:

uint8_t eepromReadByte(volatile uint8_t* sectorAddress, volatile uint8_t* pageAddress, volatile uint8_t* byteAddress)
{
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	5c 01       	movw	r10, r24
     6e8:	6b 01       	movw	r12, r22
     6ea:	ea 01       	movw	r28, r20
	SPI_MasterCreateDataPacket(&dataPacketD,masterSendDataD,masterReceivedDataD,1,&PORTD,PIN4_bm); //sspinmask needs to be set
     6ec:	68 94       	set
     6ee:	ee 24       	eor	r14, r14
     6f0:	e4 f8       	bld	r14, 4
     6f2:	00 e6       	ldi	r16, 0x60	; 96
     6f4:	16 e0       	ldi	r17, 0x06	; 6
     6f6:	21 e0       	ldi	r18, 0x01	; 1
     6f8:	4d e1       	ldi	r20, 0x1D	; 29
     6fa:	50 e2       	ldi	r21, 0x20	; 32
     6fc:	65 e2       	ldi	r22, 0x25	; 37
     6fe:	70 e2       	ldi	r23, 0x20	; 32
     700:	83 e1       	ldi	r24, 0x13	; 19
     702:	90 e2       	ldi	r25, 0x20	; 32
     704:	0e 94 fd 03 	call	0x7fa	; 0x7fa <SPI_MasterCreateDataPacket>
	eepromMasterLow(eepromID);
     708:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <eepromID>
     70c:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <eepromID+0x1>
     710:	0e 94 30 03 	call	0x660	; 0x660 <eepromMasterLow>
	SPI_MasterTransceiveByte(&spiMasterD, READ);
     714:	63 e0       	ldi	r22, 0x03	; 3
     716:	8e e1       	ldi	r24, 0x1E	; 30
     718:	90 e2       	ldi	r25, 0x20	; 32
     71a:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, *sectorAddress);
     71e:	f5 01       	movw	r30, r10
     720:	60 81       	ld	r22, Z
     722:	8e e1       	ldi	r24, 0x1E	; 30
     724:	90 e2       	ldi	r25, 0x20	; 32
     726:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, *pageAddress);
     72a:	f6 01       	movw	r30, r12
     72c:	60 81       	ld	r22, Z
     72e:	8e e1       	ldi	r24, 0x1E	; 30
     730:	90 e2       	ldi	r25, 0x20	; 32
     732:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, *byteAddress);
     736:	68 81       	ld	r22, Y
     738:	8e e1       	ldi	r24, 0x1E	; 30
     73a:	90 e2       	ldi	r25, 0x20	; 32
     73c:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
	SPI_MasterTransceivePacket(&spiMasterD, &dataPacketD);	//Wait for reception
     740:	63 e1       	ldi	r22, 0x13	; 19
     742:	70 e2       	ldi	r23, 0x20	; 32
     744:	8e e1       	ldi	r24, 0x1E	; 30
     746:	90 e2       	ldi	r25, 0x20	; 32
     748:	0e 94 1b 04 	call	0x836	; 0x836 <SPI_MasterTransceivePacket>
	eepromMasterHigh(eepromID);
     74c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <eepromID>
     750:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <eepromID+0x1>
     754:	0e 94 4d 03 	call	0x69a	; 0x69a <eepromMasterHigh>
	if(*byteAddress==255)							//Check for end of page
     758:	88 81       	ld	r24, Y
     75a:	8f 3f       	cpi	r24, 0xFF	; 255
     75c:	91 f4       	brne	.+36     	; 0x782 <eepromReadByte+0xae>
	{
		if(*pageAddress==255)						//Check for end of sector
     75e:	f6 01       	movw	r30, r12
     760:	80 81       	ld	r24, Z
     762:	8f 3f       	cpi	r24, 0xFF	; 255
     764:	41 f4       	brne	.+16     	; 0x776 <eepromReadByte+0xa2>
		{
			*(sectorAddress)=*(sectorAddress)+1;
     766:	f5 01       	movw	r30, r10
     768:	80 81       	ld	r24, Z
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 83       	st	Z, r24
			*(pageAddress) = 0;
     76e:	f6 01       	movw	r30, r12
     770:	10 82       	st	Z, r1
			*byteAddress = 0;
     772:	18 82       	st	Y, r1
     774:	09 c0       	rjmp	.+18     	; 0x788 <eepromReadByte+0xb4>
		}
		else
		{
			*(pageAddress)=*(pageAddress)+1;
     776:	f6 01       	movw	r30, r12
     778:	80 81       	ld	r24, Z
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	80 83       	st	Z, r24
			*byteAddress=0;
     77e:	18 82       	st	Y, r1
     780:	03 c0       	rjmp	.+6      	; 0x788 <eepromReadByte+0xb4>
		}
	}
	else *(byteAddress)=*(byteAddress)+1;
     782:	88 81       	ld	r24, Y
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	88 83       	st	Y, r24
	return masterReceivedDataD[0];
     788:	80 91 1d 20 	lds	r24, 0x201D	; 0x80201d <masterReceivedDataD>
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	08 95       	ret

000007a0 <SPI_MasterInit>:
uint8_t SPI_receive8()
{
	SPI_MasterCreateDataPacket(&dataPacket,masterSendData,masterReceivedData,NUM_BYTES,&PORTC,PIN4_bm);		
	SPI_MasterTransceivePacket(&spiMasterC, &dataPacket);	//Wait for reception
	return masterReceivedData[0];							
}
     7a0:	af 92       	push	r10
     7a2:	cf 92       	push	r12
     7a4:	ef 92       	push	r14
     7a6:	0f 93       	push	r16
     7a8:	fc 01       	movw	r30, r24
     7aa:	60 83       	st	Z, r22
     7ac:	71 83       	std	Z+1, r23	; 0x01
     7ae:	42 83       	std	Z+2, r20	; 0x02
     7b0:	53 83       	std	Z+3, r21	; 0x03
     7b2:	14 82       	std	Z+4, r1	; 0x04
     7b4:	c1 10       	cpse	r12, r1
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <SPI_MasterInit+0x1c>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <SPI_MasterInit+0x1e>
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	9a 2d       	mov	r25, r10
     7c0:	90 64       	ori	r25, 0x40	; 64
     7c2:	a9 2e       	mov	r10, r25
     7c4:	a8 2a       	or	r10, r24
     7c6:	21 11       	cpse	r18, r1
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <SPI_MasterInit+0x2e>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <SPI_MasterInit+0x30>
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	a8 2a       	or	r10, r24
     7d2:	00 61       	ori	r16, 0x10	; 16
     7d4:	0a 29       	or	r16, r10
     7d6:	db 01       	movw	r26, r22
     7d8:	0c 93       	st	X, r16
     7da:	a0 81       	ld	r26, Z
     7dc:	b1 81       	ldd	r27, Z+1	; 0x01
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	ec 92       	st	X, r14
     7e2:	15 82       	std	Z+5, r1	; 0x05
     7e4:	16 82       	std	Z+6, r1	; 0x06
     7e6:	02 80       	ldd	r0, Z+2	; 0x02
     7e8:	f3 81       	ldd	r31, Z+3	; 0x03
     7ea:	e0 2d       	mov	r30, r0
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	81 83       	std	Z+1, r24	; 0x01
     7f0:	0f 91       	pop	r16
     7f2:	ef 90       	pop	r14
     7f4:	cf 90       	pop	r12
     7f6:	af 90       	pop	r10
     7f8:	08 95       	ret

000007fa <SPI_MasterCreateDataPacket>:
     7fa:	ef 92       	push	r14
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	fc 01       	movw	r30, r24
     802:	00 83       	st	Z, r16
     804:	11 83       	std	Z+1, r17	; 0x01
     806:	e2 82       	std	Z+2, r14	; 0x02
     808:	63 83       	std	Z+3, r22	; 0x03
     80a:	74 83       	std	Z+4, r23	; 0x04
     80c:	45 83       	std	Z+5, r20	; 0x05
     80e:	56 83       	std	Z+6, r21	; 0x06
     810:	27 83       	std	Z+7, r18	; 0x07
     812:	10 86       	std	Z+8, r1	; 0x08
     814:	11 86       	std	Z+9, r1	; 0x09
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ef 90       	pop	r14
     81c:	08 95       	ret

0000081e <SPI_MasterTransceiveByte>:
     81e:	dc 01       	movw	r26, r24
     820:	ed 91       	ld	r30, X+
     822:	fc 91       	ld	r31, X
     824:	11 97       	sbiw	r26, 0x01	; 1
     826:	63 83       	std	Z+3, r22	; 0x03
     828:	ed 91       	ld	r30, X+
     82a:	fc 91       	ld	r31, X
     82c:	82 81       	ldd	r24, Z+2	; 0x02
     82e:	88 23       	and	r24, r24
     830:	ec f7       	brge	.-6      	; 0x82c <SPI_MasterTransceiveByte+0xe>
     832:	83 81       	ldd	r24, Z+3	; 0x03
     834:	08 95       	ret

00000836 <SPI_MasterTransceivePacket>:
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	dc 01       	movw	r26, r24
     83c:	fb 01       	movw	r30, r22
     83e:	30 97       	sbiw	r30, 0x00	; 0
     840:	09 f4       	brne	.+2      	; 0x844 <SPI_MasterTransceivePacket+0xe>
     842:	4e c0       	rjmp	.+156    	; 0x8e0 <SPI_MasterTransceivePacket+0xaa>
     844:	15 96       	adiw	r26, 0x05	; 5
     846:	6d 93       	st	X+, r22
     848:	7c 93       	st	X, r23
     84a:	16 97       	sbiw	r26, 0x06	; 6
     84c:	72 81       	ldd	r23, Z+2	; 0x02
     84e:	c0 81       	ld	r28, Z
     850:	d1 81       	ldd	r29, Z+1	; 0x01
     852:	20 97       	sbiw	r28, 0x00	; 0
     854:	09 f4       	brne	.+2      	; 0x858 <SPI_MasterTransceivePacket+0x22>
     856:	46 c0       	rjmp	.+140    	; 0x8e4 <SPI_MasterTransceivePacket+0xae>
     858:	7e 83       	std	Y+6, r23	; 0x06
     85a:	67 81       	ldd	r22, Z+7	; 0x07
     85c:	66 23       	and	r22, r22
     85e:	49 f1       	breq	.+82     	; 0x8b2 <SPI_MasterTransceivePacket+0x7c>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	a9 01       	movw	r20, r18
     868:	15 96       	adiw	r26, 0x05	; 5
     86a:	ed 91       	ld	r30, X+
     86c:	fc 91       	ld	r31, X
     86e:	16 97       	sbiw	r26, 0x06	; 6
     870:	03 80       	ldd	r0, Z+3	; 0x03
     872:	f4 81       	ldd	r31, Z+4	; 0x04
     874:	e0 2d       	mov	r30, r0
     876:	e2 0f       	add	r30, r18
     878:	f3 1f       	adc	r31, r19
     87a:	90 81       	ld	r25, Z
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	11 97       	sbiw	r26, 0x01	; 1
     882:	93 83       	std	Z+3, r25	; 0x03
     884:	ed 91       	ld	r30, X+
     886:	fc 91       	ld	r31, X
     888:	11 97       	sbiw	r26, 0x01	; 1
     88a:	92 81       	ldd	r25, Z+2	; 0x02
     88c:	99 23       	and	r25, r25
     88e:	ec f7       	brge	.-6      	; 0x88a <SPI_MasterTransceivePacket+0x54>
     890:	93 81       	ldd	r25, Z+3	; 0x03
     892:	15 96       	adiw	r26, 0x05	; 5
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	16 97       	sbiw	r26, 0x06	; 6
     89a:	05 80       	ldd	r0, Z+5	; 0x05
     89c:	f6 81       	ldd	r31, Z+6	; 0x06
     89e:	e0 2d       	mov	r30, r0
     8a0:	e4 0f       	add	r30, r20
     8a2:	f5 1f       	adc	r31, r21
     8a4:	90 83       	st	Z, r25
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	86 17       	cp	r24, r22
     8ae:	d8 f2       	brcs	.-74     	; 0x866 <SPI_MasterTransceivePacket+0x30>
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <SPI_MasterTransceivePacket+0x7e>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	15 96       	adiw	r26, 0x05	; 5
     8b6:	ed 91       	ld	r30, X+
     8b8:	fc 91       	ld	r31, X
     8ba:	16 97       	sbiw	r26, 0x06	; 6
     8bc:	01 90       	ld	r0, Z+
     8be:	f0 81       	ld	r31, Z
     8c0:	e0 2d       	mov	r30, r0
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <SPI_MasterTransceivePacket+0x92>
     8c6:	75 83       	std	Z+5, r23	; 0x05
     8c8:	15 96       	adiw	r26, 0x05	; 5
     8ca:	ed 91       	ld	r30, X+
     8cc:	fc 91       	ld	r31, X
     8ce:	16 97       	sbiw	r26, 0x06	; 6
     8d0:	80 87       	std	Z+8, r24	; 0x08
     8d2:	15 96       	adiw	r26, 0x05	; 5
     8d4:	ed 91       	ld	r30, X+
     8d6:	fc 91       	ld	r31, X
     8d8:	16 97       	sbiw	r26, 0x06	; 6
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	81 87       	std	Z+9, r24	; 0x09
     8de:	07 c0       	rjmp	.+14     	; 0x8ee <SPI_MasterTransceivePacket+0xb8>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <SPI_MasterTransceivePacket+0xb8>
     8e4:	67 81       	ldd	r22, Z+7	; 0x07
     8e6:	61 11       	cpse	r22, r1
     8e8:	bb cf       	rjmp	.-138    	; 0x860 <SPI_MasterTransceivePacket+0x2a>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	ed cf       	rjmp	.-38     	; 0x8c8 <SPI_MasterTransceivePacket+0x92>
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <SPI_Master_init>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	a0 e4       	ldi	r26, 0x40	; 64
     8fa:	b6 e0       	ldi	r27, 0x06	; 6
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	11 96       	adiw	r26, 0x01	; 1
     900:	8c 93       	st	X, r24
     902:	11 97       	sbiw	r26, 0x01	; 1
     904:	90 e2       	ldi	r25, 0x20	; 32
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	9c 93       	st	X, r25
     90a:	11 97       	sbiw	r26, 0x01	; 1
     90c:	90 e8       	ldi	r25, 0x80	; 128
     90e:	11 96       	adiw	r26, 0x01	; 1
     910:	9c 93       	st	X, r25
     912:	11 97       	sbiw	r26, 0x01	; 1
     914:	98 e3       	ldi	r25, 0x38	; 56
     916:	54 96       	adiw	r26, 0x14	; 20
     918:	9c 93       	st	X, r25
     91a:	54 97       	sbiw	r26, 0x14	; 20
     91c:	15 96       	adiw	r26, 0x05	; 5
     91e:	8c 93       	st	X, r24
     920:	15 97       	sbiw	r26, 0x05	; 5
     922:	ee e2       	ldi	r30, 0x2E	; 46
     924:	f0 e2       	ldi	r31, 0x20	; 32
     926:	c0 ec       	ldi	r28, 0xC0	; 192
     928:	d8 e0       	ldi	r29, 0x08	; 8
     92a:	c0 83       	st	Z, r28
     92c:	d1 83       	std	Z+1, r29	; 0x01
     92e:	a2 83       	std	Z+2, r26	; 0x02
     930:	b3 83       	std	Z+3, r27	; 0x03
     932:	14 82       	std	Z+4, r1	; 0x04
     934:	88 ed       	ldi	r24, 0xD8	; 216
     936:	88 83       	st	Y, r24
     938:	a0 81       	ld	r26, Z
     93a:	b1 81       	ldd	r27, Z+1	; 0x01
     93c:	11 96       	adiw	r26, 0x01	; 1
     93e:	1c 92       	st	X, r1
     940:	15 82       	std	Z+5, r1	; 0x05
     942:	16 82       	std	Z+6, r1	; 0x06
     944:	02 80       	ldd	r0, Z+2	; 0x02
     946:	f3 81       	ldd	r31, Z+3	; 0x03
     948:	e0 2d       	mov	r30, r0
     94a:	80 ea       	ldi	r24, 0xA0	; 160
     94c:	81 83       	std	Z+1, r24	; 0x01
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <SPI_send8>:
     954:	cf 93       	push	r28
     956:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <ssPort>
     95a:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <ssPort+0x1>
     95e:	c0 e1       	ldi	r28, 0x10	; 16
     960:	c6 83       	std	Z+6, r28	; 0x06
     962:	68 2f       	mov	r22, r24
     964:	8e e2       	ldi	r24, 0x2E	; 46
     966:	90 e2       	ldi	r25, 0x20	; 32
     968:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
     96c:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <ssPort>
     970:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <ssPort+0x1>
     974:	c5 83       	std	Z+5, r28	; 0x05
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <SPI_send16>:
void SPI_send16(uint16_t data)
{
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	f8 2e       	mov	r15, r24
	PORTA_DIRSET = PIN0_bm;
     986:	c1 e0       	ldi	r28, 0x01	; 1
     988:	c0 93 01 06 	sts	0x0601, r28	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTF_DIRSET = PIN0_bm|PIN1_bm|PIN2_bm|PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTA_OUTSET = PIN0_bm;
     992:	05 e0       	ldi	r16, 0x05	; 5
     994:	16 e0       	ldi	r17, 0x06	; 6
     996:	f8 01       	movw	r30, r16
     998:	c0 83       	st	Z, r28
	uint8_t MSdata = ((data>>8) & 0x00FF);		//filter out MS
	uint8_t LSdata = (data & 0x00FF);			//filter out LS
	SPI_MasterSSLow(ssPort, PIN4_bm);			//Set Slave Select Low
     99a:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <ssPort>
     99e:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <ssPort+0x1>
     9a2:	d0 e1       	ldi	r29, 0x10	; 16
     9a4:	d6 83       	std	Z+6, r29	; 0x06
	PORTA_OUTCLR = PIN0_bm;				
     9a6:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	SPI_MasterTransceiveByte(&spiMasterC, MSdata); 
     9aa:	69 2f       	mov	r22, r25
     9ac:	8e e2       	ldi	r24, 0x2E	; 46
     9ae:	90 e2       	ldi	r25, 0x20	; 32
     9b0:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterC, LSdata);
     9b4:	6f 2d       	mov	r22, r15
     9b6:	8e e2       	ldi	r24, 0x2E	; 46
     9b8:	90 e2       	ldi	r25, 0x20	; 32
     9ba:	0e 94 0f 04 	call	0x81e	; 0x81e <SPI_MasterTransceiveByte>
	SPI_MasterSSHigh(ssPort, PIN4_bm);			//Set Slave Select High
     9be:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <ssPort>
     9c2:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <ssPort+0x1>
     9c6:	d5 83       	std	Z+5, r29	; 0x05
	PORTA_OUTSET = PIN0_bm;
     9c8:	f8 01       	movw	r30, r16
     9ca:	c0 83       	st	Z, r28
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	08 95       	ret

000009d8 <SetClock0>:
}

void SetClock1()
{	
	TCC1.PER = 0xFF;					//Set period 
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;	//Set Prescaler 1
     9d8:	e0 e0       	ldi	r30, 0x00	; 0
     9da:	f8 e0       	ldi	r31, 0x08	; 8
     9dc:	81 e1       	ldi	r24, 0x11	; 17
     9de:	81 83       	std	Z+1, r24	; 0x01
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	87 83       	std	Z+7, r24	; 0x07
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	26 a3       	std	Z+38, r18	; 0x26
     9ea:	37 a3       	std	Z+39, r19	; 0x27
     9ec:	20 e4       	ldi	r18, 0x40	; 64
     9ee:	31 e2       	ldi	r19, 0x21	; 33
     9f0:	20 93 28 08 	sts	0x0828, r18	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     9f4:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     9f8:	80 83       	st	Z, r24
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	81 60       	ori	r24, 0x01	; 1
     a02:	82 83       	std	Z+2, r24	; 0x02
     a04:	08 95       	ret

00000a06 <setUp16MhzExternalOsc>:
}

void setUp16MhzExternalOsc()
{
	PORTD_DIR = 0x01;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     a0c:	8b ec       	ldi	r24, 0xCB	; 203
     a0e:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
     a12:	e0 e5       	ldi	r30, 0x50	; 80
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	88 60       	ori	r24, 0x08	; 8
     a1a:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
     a1c:	e1 e5       	ldi	r30, 0x51	; 81
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	83 ff       	sbrs	r24, 3
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <setUp16MhzExternalOsc+0x1a>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
     a26:	88 ed       	ldi	r24, 0xD8	; 216
     a28:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     a30:	08 95       	ret

00000a32 <USART_DataRegEmpty>:
	uint16_t LSdata = (data & 0x00FF);				//filter out LS
	sei();											//Enable global interrupts
	USART_TXBuffer_PutByte(&USART_data, MSdata);	//Write MSdata and wait for transfer
	USART_TXBuffer_PutByte(&USART_data, LSdata);	//Write LSdata and wait for transfer
	cli();											//Disable global interrupts
}
     a32:	fc 01       	movw	r30, r24
     a34:	96 85       	ldd	r25, Z+14	; 0x0e
     a36:	85 85       	ldd	r24, Z+13	; 0x0d
     a38:	98 13       	cpse	r25, r24
     a3a:	07 c0       	rjmp	.+14     	; 0xa4a <USART_DataRegEmpty+0x18>
     a3c:	01 90       	ld	r0, Z+
     a3e:	f0 81       	ld	r31, Z
     a40:	e0 2d       	mov	r30, r0
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	8c 7f       	andi	r24, 0xFC	; 252
     a46:	83 83       	std	Z+3, r24	; 0x03
     a48:	08 95       	ret
     a4a:	86 85       	ldd	r24, Z+14	; 0x0e
     a4c:	df 01       	movw	r26, r30
     a4e:	a8 0f       	add	r26, r24
     a50:	b1 1d       	adc	r27, r1
     a52:	17 96       	adiw	r26, 0x07	; 7
     a54:	8c 91       	ld	r24, X
     a56:	a0 81       	ld	r26, Z
     a58:	b1 81       	ldd	r27, Z+1	; 0x01
     a5a:	8c 93       	st	X, r24
     a5c:	86 85       	ldd	r24, Z+14	; 0x0e
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	83 70       	andi	r24, 0x03	; 3
     a62:	86 87       	std	Z+14, r24	; 0x0e
     a64:	08 95       	ret

00000a66 <SetUsart>:
     a66:	e0 e4       	ldi	r30, 0x40	; 64
     a68:	f6 e0       	ldi	r31, 0x06	; 6
     a6a:	88 e0       	ldi	r24, 0x08	; 8
     a6c:	81 83       	std	Z+1, r24	; 0x01
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	af e3       	ldi	r26, 0x3F	; 63
     a74:	b0 e2       	ldi	r27, 0x20	; 32
     a76:	e0 ea       	ldi	r30, 0xA0	; 160
     a78:	f8 e0       	ldi	r31, 0x08	; 8
     a7a:	ed 93       	st	X+, r30
     a7c:	fc 93       	st	X, r31
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	12 96       	adiw	r26, 0x02	; 2
     a84:	8c 93       	st	X, r24
     a86:	12 97       	sbiw	r26, 0x02	; 2
     a88:	1c 96       	adiw	r26, 0x0c	; 12
     a8a:	1c 92       	st	X, r1
     a8c:	1c 97       	sbiw	r26, 0x0c	; 12
     a8e:	1b 96       	adiw	r26, 0x0b	; 11
     a90:	1c 92       	st	X, r1
     a92:	1b 97       	sbiw	r26, 0x0b	; 11
     a94:	1e 96       	adiw	r26, 0x0e	; 14
     a96:	1c 92       	st	X, r1
     a98:	1e 97       	sbiw	r26, 0x0e	; 14
     a9a:	1d 96       	adiw	r26, 0x0d	; 13
     a9c:	1c 92       	st	X, r1
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	85 83       	std	Z+5, r24	; 0x05
     aa2:	83 81       	ldd	r24, Z+3	; 0x03
     aa4:	8f 7c       	andi	r24, 0xCF	; 207
     aa6:	80 61       	ori	r24, 0x10	; 16
     aa8:	83 83       	std	Z+3, r24	; 0x03
     aaa:	8c e0       	ldi	r24, 0x0C	; 12
     aac:	86 83       	std	Z+6, r24	; 0x06
     aae:	17 82       	std	Z+7, r1	; 0x07
     ab0:	84 81       	ldd	r24, Z+4	; 0x04
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	84 83       	std	Z+4, r24	; 0x04
     ab6:	84 81       	ldd	r24, Z+4	; 0x04
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	84 83       	std	Z+4, r24	; 0x04
     abc:	e0 ea       	ldi	r30, 0xA0	; 160
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	82 81       	ldd	r24, Z+2	; 0x02
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	82 83       	std	Z+2, r24	; 0x02
     ac6:	08 95       	ret

00000ac8 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	0b b6       	in	r0, 0x3b	; 59
     ad4:	0f 92       	push	r0
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
     aee:	8f e3       	ldi	r24, 0x3F	; 63
     af0:	90 e2       	ldi	r25, 0x20	; 32
     af2:	0e 94 19 05 	call	0xa32	; 0xa32 <USART_DataRegEmpty>
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0b be       	out	0x3b, r0	; 59
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <__subsf3>:
     b1c:	50 58       	subi	r21, 0x80	; 128

00000b1e <__addsf3>:
     b1e:	bb 27       	eor	r27, r27
     b20:	aa 27       	eor	r26, r26
     b22:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__addsf3x>
     b26:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_round>
     b2a:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_pscA>
     b2e:	38 f0       	brcs	.+14     	; 0xb3e <__addsf3+0x20>
     b30:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscB>
     b34:	20 f0       	brcs	.+8      	; 0xb3e <__addsf3+0x20>
     b36:	39 f4       	brne	.+14     	; 0xb46 <__addsf3+0x28>
     b38:	9f 3f       	cpi	r25, 0xFF	; 255
     b3a:	19 f4       	brne	.+6      	; 0xb42 <__addsf3+0x24>
     b3c:	26 f4       	brtc	.+8      	; 0xb46 <__addsf3+0x28>
     b3e:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_nan>
     b42:	0e f4       	brtc	.+2      	; 0xb46 <__addsf3+0x28>
     b44:	e0 95       	com	r30
     b46:	e7 fb       	bst	r30, 7
     b48:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_inf>

00000b4c <__addsf3x>:
     b4c:	e9 2f       	mov	r30, r25
     b4e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_split3>
     b52:	58 f3       	brcs	.-42     	; 0xb2a <__addsf3+0xc>
     b54:	ba 17       	cp	r27, r26
     b56:	62 07       	cpc	r22, r18
     b58:	73 07       	cpc	r23, r19
     b5a:	84 07       	cpc	r24, r20
     b5c:	95 07       	cpc	r25, r21
     b5e:	20 f0       	brcs	.+8      	; 0xb68 <__addsf3x+0x1c>
     b60:	79 f4       	brne	.+30     	; 0xb80 <__addsf3x+0x34>
     b62:	a6 f5       	brtc	.+104    	; 0xbcc <__addsf3x+0x80>
     b64:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_zero>
     b68:	0e f4       	brtc	.+2      	; 0xb6c <__addsf3x+0x20>
     b6a:	e0 95       	com	r30
     b6c:	0b 2e       	mov	r0, r27
     b6e:	ba 2f       	mov	r27, r26
     b70:	a0 2d       	mov	r26, r0
     b72:	0b 01       	movw	r0, r22
     b74:	b9 01       	movw	r22, r18
     b76:	90 01       	movw	r18, r0
     b78:	0c 01       	movw	r0, r24
     b7a:	ca 01       	movw	r24, r20
     b7c:	a0 01       	movw	r20, r0
     b7e:	11 24       	eor	r1, r1
     b80:	ff 27       	eor	r31, r31
     b82:	59 1b       	sub	r21, r25
     b84:	99 f0       	breq	.+38     	; 0xbac <__addsf3x+0x60>
     b86:	59 3f       	cpi	r21, 0xF9	; 249
     b88:	50 f4       	brcc	.+20     	; 0xb9e <__addsf3x+0x52>
     b8a:	50 3e       	cpi	r21, 0xE0	; 224
     b8c:	68 f1       	brcs	.+90     	; 0xbe8 <__addsf3x+0x9c>
     b8e:	1a 16       	cp	r1, r26
     b90:	f0 40       	sbci	r31, 0x00	; 0
     b92:	a2 2f       	mov	r26, r18
     b94:	23 2f       	mov	r18, r19
     b96:	34 2f       	mov	r19, r20
     b98:	44 27       	eor	r20, r20
     b9a:	58 5f       	subi	r21, 0xF8	; 248
     b9c:	f3 cf       	rjmp	.-26     	; 0xb84 <__addsf3x+0x38>
     b9e:	46 95       	lsr	r20
     ba0:	37 95       	ror	r19
     ba2:	27 95       	ror	r18
     ba4:	a7 95       	ror	r26
     ba6:	f0 40       	sbci	r31, 0x00	; 0
     ba8:	53 95       	inc	r21
     baa:	c9 f7       	brne	.-14     	; 0xb9e <__addsf3x+0x52>
     bac:	7e f4       	brtc	.+30     	; 0xbcc <__addsf3x+0x80>
     bae:	1f 16       	cp	r1, r31
     bb0:	ba 0b       	sbc	r27, r26
     bb2:	62 0b       	sbc	r22, r18
     bb4:	73 0b       	sbc	r23, r19
     bb6:	84 0b       	sbc	r24, r20
     bb8:	ba f0       	brmi	.+46     	; 0xbe8 <__addsf3x+0x9c>
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	a1 f0       	breq	.+40     	; 0xbe6 <__addsf3x+0x9a>
     bbe:	ff 0f       	add	r31, r31
     bc0:	bb 1f       	adc	r27, r27
     bc2:	66 1f       	adc	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	88 1f       	adc	r24, r24
     bc8:	c2 f7       	brpl	.-16     	; 0xbba <__addsf3x+0x6e>
     bca:	0e c0       	rjmp	.+28     	; 0xbe8 <__addsf3x+0x9c>
     bcc:	ba 0f       	add	r27, r26
     bce:	62 1f       	adc	r22, r18
     bd0:	73 1f       	adc	r23, r19
     bd2:	84 1f       	adc	r24, r20
     bd4:	48 f4       	brcc	.+18     	; 0xbe8 <__addsf3x+0x9c>
     bd6:	87 95       	ror	r24
     bd8:	77 95       	ror	r23
     bda:	67 95       	ror	r22
     bdc:	b7 95       	ror	r27
     bde:	f7 95       	ror	r31
     be0:	9e 3f       	cpi	r25, 0xFE	; 254
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <__addsf3x+0x9a>
     be4:	b0 cf       	rjmp	.-160    	; 0xb46 <__addsf3+0x28>
     be6:	93 95       	inc	r25
     be8:	88 0f       	add	r24, r24
     bea:	08 f0       	brcs	.+2      	; 0xbee <__addsf3x+0xa2>
     bec:	99 27       	eor	r25, r25
     bee:	ee 0f       	add	r30, r30
     bf0:	97 95       	ror	r25
     bf2:	87 95       	ror	r24
     bf4:	08 95       	ret

00000bf6 <__divsf3>:
     bf6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__divsf3x>
     bfa:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_round>
     bfe:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscB>
     c02:	58 f0       	brcs	.+22     	; 0xc1a <__divsf3+0x24>
     c04:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_pscA>
     c08:	40 f0       	brcs	.+16     	; 0xc1a <__divsf3+0x24>
     c0a:	29 f4       	brne	.+10     	; 0xc16 <__divsf3+0x20>
     c0c:	5f 3f       	cpi	r21, 0xFF	; 255
     c0e:	29 f0       	breq	.+10     	; 0xc1a <__divsf3+0x24>
     c10:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_inf>
     c14:	51 11       	cpse	r21, r1
     c16:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     c1a:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_nan>

00000c1e <__divsf3x>:
     c1e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_split3>
     c22:	68 f3       	brcs	.-38     	; 0xbfe <__divsf3+0x8>

00000c24 <__divsf3_pse>:
     c24:	99 23       	and	r25, r25
     c26:	b1 f3       	breq	.-20     	; 0xc14 <__divsf3+0x1e>
     c28:	55 23       	and	r21, r21
     c2a:	91 f3       	breq	.-28     	; 0xc10 <__divsf3+0x1a>
     c2c:	95 1b       	sub	r25, r21
     c2e:	55 0b       	sbc	r21, r21
     c30:	bb 27       	eor	r27, r27
     c32:	aa 27       	eor	r26, r26
     c34:	62 17       	cp	r22, r18
     c36:	73 07       	cpc	r23, r19
     c38:	84 07       	cpc	r24, r20
     c3a:	38 f0       	brcs	.+14     	; 0xc4a <__divsf3_pse+0x26>
     c3c:	9f 5f       	subi	r25, 0xFF	; 255
     c3e:	5f 4f       	sbci	r21, 0xFF	; 255
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	44 1f       	adc	r20, r20
     c46:	aa 1f       	adc	r26, r26
     c48:	a9 f3       	breq	.-22     	; 0xc34 <__divsf3_pse+0x10>
     c4a:	35 d0       	rcall	.+106    	; 0xcb6 <__divsf3_pse+0x92>
     c4c:	0e 2e       	mov	r0, r30
     c4e:	3a f0       	brmi	.+14     	; 0xc5e <__divsf3_pse+0x3a>
     c50:	e0 e8       	ldi	r30, 0x80	; 128
     c52:	32 d0       	rcall	.+100    	; 0xcb8 <__divsf3_pse+0x94>
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	50 40       	sbci	r21, 0x00	; 0
     c58:	e6 95       	lsr	r30
     c5a:	00 1c       	adc	r0, r0
     c5c:	ca f7       	brpl	.-14     	; 0xc50 <__divsf3_pse+0x2c>
     c5e:	2b d0       	rcall	.+86     	; 0xcb6 <__divsf3_pse+0x92>
     c60:	fe 2f       	mov	r31, r30
     c62:	29 d0       	rcall	.+82     	; 0xcb6 <__divsf3_pse+0x92>
     c64:	66 0f       	add	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	88 1f       	adc	r24, r24
     c6a:	bb 1f       	adc	r27, r27
     c6c:	26 17       	cp	r18, r22
     c6e:	37 07       	cpc	r19, r23
     c70:	48 07       	cpc	r20, r24
     c72:	ab 07       	cpc	r26, r27
     c74:	b0 e8       	ldi	r27, 0x80	; 128
     c76:	09 f0       	breq	.+2      	; 0xc7a <__divsf3_pse+0x56>
     c78:	bb 0b       	sbc	r27, r27
     c7a:	80 2d       	mov	r24, r0
     c7c:	bf 01       	movw	r22, r30
     c7e:	ff 27       	eor	r31, r31
     c80:	93 58       	subi	r25, 0x83	; 131
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	3a f0       	brmi	.+14     	; 0xc94 <__divsf3_pse+0x70>
     c86:	9e 3f       	cpi	r25, 0xFE	; 254
     c88:	51 05       	cpc	r21, r1
     c8a:	78 f0       	brcs	.+30     	; 0xcaa <__divsf3_pse+0x86>
     c8c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_inf>
     c90:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     c94:	5f 3f       	cpi	r21, 0xFF	; 255
     c96:	e4 f3       	brlt	.-8      	; 0xc90 <__divsf3_pse+0x6c>
     c98:	98 3e       	cpi	r25, 0xE8	; 232
     c9a:	d4 f3       	brlt	.-12     	; 0xc90 <__divsf3_pse+0x6c>
     c9c:	86 95       	lsr	r24
     c9e:	77 95       	ror	r23
     ca0:	67 95       	ror	r22
     ca2:	b7 95       	ror	r27
     ca4:	f7 95       	ror	r31
     ca6:	9f 5f       	subi	r25, 0xFF	; 255
     ca8:	c9 f7       	brne	.-14     	; 0xc9c <__divsf3_pse+0x78>
     caa:	88 0f       	add	r24, r24
     cac:	91 1d       	adc	r25, r1
     cae:	96 95       	lsr	r25
     cb0:	87 95       	ror	r24
     cb2:	97 f9       	bld	r25, 7
     cb4:	08 95       	ret
     cb6:	e1 e0       	ldi	r30, 0x01	; 1
     cb8:	66 0f       	add	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	88 1f       	adc	r24, r24
     cbe:	bb 1f       	adc	r27, r27
     cc0:	62 17       	cp	r22, r18
     cc2:	73 07       	cpc	r23, r19
     cc4:	84 07       	cpc	r24, r20
     cc6:	ba 07       	cpc	r27, r26
     cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__divsf3_pse+0xae>
     cca:	62 1b       	sub	r22, r18
     ccc:	73 0b       	sbc	r23, r19
     cce:	84 0b       	sbc	r24, r20
     cd0:	ba 0b       	sbc	r27, r26
     cd2:	ee 1f       	adc	r30, r30
     cd4:	88 f7       	brcc	.-30     	; 0xcb8 <__divsf3_pse+0x94>
     cd6:	e0 95       	com	r30
     cd8:	08 95       	ret

00000cda <__fixsfsi>:
     cda:	0e 94 74 06 	call	0xce8	; 0xce8 <__fixunssfsi>
     cde:	68 94       	set
     ce0:	b1 11       	cpse	r27, r1
     ce2:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     ce6:	08 95       	ret

00000ce8 <__fixunssfsi>:
     ce8:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_splitA>
     cec:	88 f0       	brcs	.+34     	; 0xd10 <__fixunssfsi+0x28>
     cee:	9f 57       	subi	r25, 0x7F	; 127
     cf0:	98 f0       	brcs	.+38     	; 0xd18 <__fixunssfsi+0x30>
     cf2:	b9 2f       	mov	r27, r25
     cf4:	99 27       	eor	r25, r25
     cf6:	b7 51       	subi	r27, 0x17	; 23
     cf8:	b0 f0       	brcs	.+44     	; 0xd26 <__fixunssfsi+0x3e>
     cfa:	e1 f0       	breq	.+56     	; 0xd34 <__fixunssfsi+0x4c>
     cfc:	66 0f       	add	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	1a f0       	brmi	.+6      	; 0xd0c <__fixunssfsi+0x24>
     d06:	ba 95       	dec	r27
     d08:	c9 f7       	brne	.-14     	; 0xcfc <__fixunssfsi+0x14>
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <__fixunssfsi+0x4c>
     d0c:	b1 30       	cpi	r27, 0x01	; 1
     d0e:	91 f0       	breq	.+36     	; 0xd34 <__fixunssfsi+0x4c>
     d10:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fp_zero>
     d14:	b1 e0       	ldi	r27, 0x01	; 1
     d16:	08 95       	ret
     d18:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__fp_zero>
     d1c:	67 2f       	mov	r22, r23
     d1e:	78 2f       	mov	r23, r24
     d20:	88 27       	eor	r24, r24
     d22:	b8 5f       	subi	r27, 0xF8	; 248
     d24:	39 f0       	breq	.+14     	; 0xd34 <__fixunssfsi+0x4c>
     d26:	b9 3f       	cpi	r27, 0xF9	; 249
     d28:	cc f3       	brlt	.-14     	; 0xd1c <__fixunssfsi+0x34>
     d2a:	86 95       	lsr	r24
     d2c:	77 95       	ror	r23
     d2e:	67 95       	ror	r22
     d30:	b3 95       	inc	r27
     d32:	d9 f7       	brne	.-10     	; 0xd2a <__fixunssfsi+0x42>
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__fixunssfsi+0x5c>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	08 95       	ret

00000d46 <__floatunsisf>:
     d46:	e8 94       	clt
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <__floatsisf+0x12>

00000d4a <__floatsisf>:
     d4a:	97 fb       	bst	r25, 7
     d4c:	3e f4       	brtc	.+14     	; 0xd5c <__floatsisf+0x12>
     d4e:	90 95       	com	r25
     d50:	80 95       	com	r24
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	99 23       	and	r25, r25
     d5e:	a9 f0       	breq	.+42     	; 0xd8a <__floatsisf+0x40>
     d60:	f9 2f       	mov	r31, r25
     d62:	96 e9       	ldi	r25, 0x96	; 150
     d64:	bb 27       	eor	r27, r27
     d66:	93 95       	inc	r25
     d68:	f6 95       	lsr	r31
     d6a:	87 95       	ror	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f1 11       	cpse	r31, r1
     d74:	f8 cf       	rjmp	.-16     	; 0xd66 <__floatsisf+0x1c>
     d76:	fa f4       	brpl	.+62     	; 0xdb6 <__floatsisf+0x6c>
     d78:	bb 0f       	add	r27, r27
     d7a:	11 f4       	brne	.+4      	; 0xd80 <__floatsisf+0x36>
     d7c:	60 ff       	sbrs	r22, 0
     d7e:	1b c0       	rjmp	.+54     	; 0xdb6 <__floatsisf+0x6c>
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8f 4f       	sbci	r24, 0xFF	; 255
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <__floatsisf+0x6c>
     d8a:	88 23       	and	r24, r24
     d8c:	11 f0       	breq	.+4      	; 0xd92 <__floatsisf+0x48>
     d8e:	96 e9       	ldi	r25, 0x96	; 150
     d90:	11 c0       	rjmp	.+34     	; 0xdb4 <__floatsisf+0x6a>
     d92:	77 23       	and	r23, r23
     d94:	21 f0       	breq	.+8      	; 0xd9e <__floatsisf+0x54>
     d96:	9e e8       	ldi	r25, 0x8E	; 142
     d98:	87 2f       	mov	r24, r23
     d9a:	76 2f       	mov	r23, r22
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <__floatsisf+0x5e>
     d9e:	66 23       	and	r22, r22
     da0:	71 f0       	breq	.+28     	; 0xdbe <__floatsisf+0x74>
     da2:	96 e8       	ldi	r25, 0x86	; 134
     da4:	86 2f       	mov	r24, r22
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	2a f0       	brmi	.+10     	; 0xdb6 <__floatsisf+0x6c>
     dac:	9a 95       	dec	r25
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	da f7       	brpl	.-10     	; 0xdac <__floatsisf+0x62>
     db6:	88 0f       	add	r24, r24
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	97 f9       	bld	r25, 7
     dbe:	08 95       	ret
     dc0:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_pscA>
     dc4:	20 f0       	brcs	.+8      	; 0xdce <__floatsisf+0x84>
     dc6:	19 f0       	breq	.+6      	; 0xdce <__floatsisf+0x84>
     dc8:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscB>
     dcc:	50 f4       	brcc	.+20     	; 0xde2 <fmod+0xc>
     dce:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_nan>
     dd2:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>

00000dd6 <fmod>:
     dd6:	e9 2f       	mov	r30, r25
     dd8:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_split3>
     ddc:	88 f3       	brcs	.-30     	; 0xdc0 <__floatsisf+0x76>
     dde:	55 23       	and	r21, r21
     de0:	b1 f3       	breq	.-20     	; 0xdce <__floatsisf+0x84>
     de2:	e7 fb       	bst	r30, 7
     de4:	62 17       	cp	r22, r18
     de6:	73 07       	cpc	r23, r19
     de8:	84 07       	cpc	r24, r20
     dea:	95 07       	cpc	r25, r21
     dec:	a8 f1       	brcs	.+106    	; 0xe58 <fmod+0x82>
     dee:	89 f3       	breq	.-30     	; 0xdd2 <__floatsisf+0x88>
     df0:	e9 2f       	mov	r30, r25
     df2:	ff 27       	eor	r31, r31
     df4:	88 23       	and	r24, r24
     df6:	2a f0       	brmi	.+10     	; 0xe02 <fmod+0x2c>
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	da f7       	brpl	.-10     	; 0xdf8 <fmod+0x22>
     e02:	95 2f       	mov	r25, r21
     e04:	55 27       	eor	r21, r21
     e06:	44 23       	and	r20, r20
     e08:	32 f0       	brmi	.+12     	; 0xe16 <fmod+0x40>
     e0a:	91 50       	subi	r25, 0x01	; 1
     e0c:	50 40       	sbci	r21, 0x00	; 0
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	d2 f7       	brpl	.-12     	; 0xe0a <fmod+0x34>
     e16:	bb 27       	eor	r27, r27
     e18:	e9 1b       	sub	r30, r25
     e1a:	f5 0b       	sbc	r31, r21
     e1c:	62 1b       	sub	r22, r18
     e1e:	73 0b       	sbc	r23, r19
     e20:	84 0b       	sbc	r24, r20
     e22:	b1 09       	sbc	r27, r1
     e24:	b1 f2       	breq	.-84     	; 0xdd2 <__floatsisf+0x88>
     e26:	22 f4       	brpl	.+8      	; 0xe30 <fmod+0x5a>
     e28:	62 0f       	add	r22, r18
     e2a:	73 1f       	adc	r23, r19
     e2c:	84 1f       	adc	r24, r20
     e2e:	b1 1d       	adc	r27, r1
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	2a f0       	brmi	.+10     	; 0xe3e <fmod+0x68>
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	bb 1f       	adc	r27, r27
     e3c:	ef cf       	rjmp	.-34     	; 0xe1c <fmod+0x46>
     e3e:	91 50       	subi	r25, 0x01	; 1
     e40:	50 40       	sbci	r21, 0x00	; 0
     e42:	62 f0       	brmi	.+24     	; 0xe5c <fmod+0x86>
     e44:	41 f0       	breq	.+16     	; 0xe56 <fmod+0x80>
     e46:	88 23       	and	r24, r24
     e48:	32 f0       	brmi	.+12     	; 0xe56 <fmod+0x80>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	91 50       	subi	r25, 0x01	; 1
     e52:	50 40       	sbci	r21, 0x00	; 0
     e54:	c1 f7       	brne	.-16     	; 0xe46 <fmod+0x70>
     e56:	93 95       	inc	r25
     e58:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_mpack>
     e5c:	86 95       	lsr	r24
     e5e:	77 95       	ror	r23
     e60:	67 95       	ror	r22
     e62:	9f 5f       	subi	r25, 0xFF	; 255
     e64:	d9 f7       	brne	.-10     	; 0xe5c <fmod+0x86>
     e66:	f7 cf       	rjmp	.-18     	; 0xe56 <fmod+0x80>

00000e68 <__fp_inf>:
     e68:	97 f9       	bld	r25, 7
     e6a:	9f 67       	ori	r25, 0x7F	; 127
     e6c:	80 e8       	ldi	r24, 0x80	; 128
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	08 95       	ret

00000e74 <__fp_mpack>:
     e74:	9f 3f       	cpi	r25, 0xFF	; 255
     e76:	31 f0       	breq	.+12     	; 0xe84 <__fp_mpack_finite+0xc>

00000e78 <__fp_mpack_finite>:
     e78:	91 50       	subi	r25, 0x01	; 1
     e7a:	20 f4       	brcc	.+8      	; 0xe84 <__fp_mpack_finite+0xc>
     e7c:	87 95       	ror	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b7 95       	ror	r27
     e84:	88 0f       	add	r24, r24
     e86:	91 1d       	adc	r25, r1
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	97 f9       	bld	r25, 7
     e8e:	08 95       	ret

00000e90 <__fp_nan>:
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	80 ec       	ldi	r24, 0xC0	; 192
     e94:	08 95       	ret

00000e96 <__fp_pscA>:
     e96:	00 24       	eor	r0, r0
     e98:	0a 94       	dec	r0
     e9a:	16 16       	cp	r1, r22
     e9c:	17 06       	cpc	r1, r23
     e9e:	18 06       	cpc	r1, r24
     ea0:	09 06       	cpc	r0, r25
     ea2:	08 95       	ret

00000ea4 <__fp_pscB>:
     ea4:	00 24       	eor	r0, r0
     ea6:	0a 94       	dec	r0
     ea8:	12 16       	cp	r1, r18
     eaa:	13 06       	cpc	r1, r19
     eac:	14 06       	cpc	r1, r20
     eae:	05 06       	cpc	r0, r21
     eb0:	08 95       	ret

00000eb2 <__fp_round>:
     eb2:	09 2e       	mov	r0, r25
     eb4:	03 94       	inc	r0
     eb6:	00 0c       	add	r0, r0
     eb8:	11 f4       	brne	.+4      	; 0xebe <__fp_round+0xc>
     eba:	88 23       	and	r24, r24
     ebc:	52 f0       	brmi	.+20     	; 0xed2 <__fp_round+0x20>
     ebe:	bb 0f       	add	r27, r27
     ec0:	40 f4       	brcc	.+16     	; 0xed2 <__fp_round+0x20>
     ec2:	bf 2b       	or	r27, r31
     ec4:	11 f4       	brne	.+4      	; 0xeca <__fp_round+0x18>
     ec6:	60 ff       	sbrs	r22, 0
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <__fp_round+0x20>
     eca:	6f 5f       	subi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	08 95       	ret

00000ed4 <__fp_split3>:
     ed4:	57 fd       	sbrc	r21, 7
     ed6:	90 58       	subi	r25, 0x80	; 128
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	59 f0       	breq	.+22     	; 0xef4 <__fp_splitA+0x10>
     ede:	5f 3f       	cpi	r21, 0xFF	; 255
     ee0:	71 f0       	breq	.+28     	; 0xefe <__fp_splitA+0x1a>
     ee2:	47 95       	ror	r20

00000ee4 <__fp_splitA>:
     ee4:	88 0f       	add	r24, r24
     ee6:	97 fb       	bst	r25, 7
     ee8:	99 1f       	adc	r25, r25
     eea:	61 f0       	breq	.+24     	; 0xf04 <__fp_splitA+0x20>
     eec:	9f 3f       	cpi	r25, 0xFF	; 255
     eee:	79 f0       	breq	.+30     	; 0xf0e <__fp_splitA+0x2a>
     ef0:	87 95       	ror	r24
     ef2:	08 95       	ret
     ef4:	12 16       	cp	r1, r18
     ef6:	13 06       	cpc	r1, r19
     ef8:	14 06       	cpc	r1, r20
     efa:	55 1f       	adc	r21, r21
     efc:	f2 cf       	rjmp	.-28     	; 0xee2 <__fp_split3+0xe>
     efe:	46 95       	lsr	r20
     f00:	f1 df       	rcall	.-30     	; 0xee4 <__fp_splitA>
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <__fp_splitA+0x30>
     f04:	16 16       	cp	r1, r22
     f06:	17 06       	cpc	r1, r23
     f08:	18 06       	cpc	r1, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	f1 cf       	rjmp	.-30     	; 0xef0 <__fp_splitA+0xc>
     f0e:	86 95       	lsr	r24
     f10:	71 05       	cpc	r23, r1
     f12:	61 05       	cpc	r22, r1
     f14:	08 94       	sec
     f16:	08 95       	ret

00000f18 <__fp_zero>:
     f18:	e8 94       	clt

00000f1a <__fp_szero>:
     f1a:	bb 27       	eor	r27, r27
     f1c:	66 27       	eor	r22, r22
     f1e:	77 27       	eor	r23, r23
     f20:	cb 01       	movw	r24, r22
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <__mulsf3>:
     f26:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulsf3x>
     f2a:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_round>
     f2e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_pscA>
     f32:	38 f0       	brcs	.+14     	; 0xf42 <__mulsf3+0x1c>
     f34:	0e 94 52 07 	call	0xea4	; 0xea4 <__fp_pscB>
     f38:	20 f0       	brcs	.+8      	; 0xf42 <__mulsf3+0x1c>
     f3a:	95 23       	and	r25, r21
     f3c:	11 f0       	breq	.+4      	; 0xf42 <__mulsf3+0x1c>
     f3e:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_inf>
     f42:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_nan>
     f46:	11 24       	eor	r1, r1
     f48:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>

00000f4c <__mulsf3x>:
     f4c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_split3>
     f50:	70 f3       	brcs	.-36     	; 0xf2e <__mulsf3+0x8>

00000f52 <__mulsf3_pse>:
     f52:	95 9f       	mul	r25, r21
     f54:	c1 f3       	breq	.-16     	; 0xf46 <__mulsf3+0x20>
     f56:	95 0f       	add	r25, r21
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	55 1f       	adc	r21, r21
     f5c:	62 9f       	mul	r22, r18
     f5e:	f0 01       	movw	r30, r0
     f60:	72 9f       	mul	r23, r18
     f62:	bb 27       	eor	r27, r27
     f64:	f0 0d       	add	r31, r0
     f66:	b1 1d       	adc	r27, r1
     f68:	63 9f       	mul	r22, r19
     f6a:	aa 27       	eor	r26, r26
     f6c:	f0 0d       	add	r31, r0
     f6e:	b1 1d       	adc	r27, r1
     f70:	aa 1f       	adc	r26, r26
     f72:	64 9f       	mul	r22, r20
     f74:	66 27       	eor	r22, r22
     f76:	b0 0d       	add	r27, r0
     f78:	a1 1d       	adc	r26, r1
     f7a:	66 1f       	adc	r22, r22
     f7c:	82 9f       	mul	r24, r18
     f7e:	22 27       	eor	r18, r18
     f80:	b0 0d       	add	r27, r0
     f82:	a1 1d       	adc	r26, r1
     f84:	62 1f       	adc	r22, r18
     f86:	73 9f       	mul	r23, r19
     f88:	b0 0d       	add	r27, r0
     f8a:	a1 1d       	adc	r26, r1
     f8c:	62 1f       	adc	r22, r18
     f8e:	83 9f       	mul	r24, r19
     f90:	a0 0d       	add	r26, r0
     f92:	61 1d       	adc	r22, r1
     f94:	22 1f       	adc	r18, r18
     f96:	74 9f       	mul	r23, r20
     f98:	33 27       	eor	r19, r19
     f9a:	a0 0d       	add	r26, r0
     f9c:	61 1d       	adc	r22, r1
     f9e:	23 1f       	adc	r18, r19
     fa0:	84 9f       	mul	r24, r20
     fa2:	60 0d       	add	r22, r0
     fa4:	21 1d       	adc	r18, r1
     fa6:	82 2f       	mov	r24, r18
     fa8:	76 2f       	mov	r23, r22
     faa:	6a 2f       	mov	r22, r26
     fac:	11 24       	eor	r1, r1
     fae:	9f 57       	subi	r25, 0x7F	; 127
     fb0:	50 40       	sbci	r21, 0x00	; 0
     fb2:	9a f0       	brmi	.+38     	; 0xfda <__mulsf3_pse+0x88>
     fb4:	f1 f0       	breq	.+60     	; 0xff2 <__mulsf3_pse+0xa0>
     fb6:	88 23       	and	r24, r24
     fb8:	4a f0       	brmi	.+18     	; 0xfcc <__mulsf3_pse+0x7a>
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	bb 1f       	adc	r27, r27
     fc0:	66 1f       	adc	r22, r22
     fc2:	77 1f       	adc	r23, r23
     fc4:	88 1f       	adc	r24, r24
     fc6:	91 50       	subi	r25, 0x01	; 1
     fc8:	50 40       	sbci	r21, 0x00	; 0
     fca:	a9 f7       	brne	.-22     	; 0xfb6 <__mulsf3_pse+0x64>
     fcc:	9e 3f       	cpi	r25, 0xFE	; 254
     fce:	51 05       	cpc	r21, r1
     fd0:	80 f0       	brcs	.+32     	; 0xff2 <__mulsf3_pse+0xa0>
     fd2:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_inf>
     fd6:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_szero>
     fda:	5f 3f       	cpi	r21, 0xFF	; 255
     fdc:	e4 f3       	brlt	.-8      	; 0xfd6 <__mulsf3_pse+0x84>
     fde:	98 3e       	cpi	r25, 0xE8	; 232
     fe0:	d4 f3       	brlt	.-12     	; 0xfd6 <__mulsf3_pse+0x84>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b7 95       	ror	r27
     fea:	f7 95       	ror	r31
     fec:	e7 95       	ror	r30
     fee:	9f 5f       	subi	r25, 0xFF	; 255
     ff0:	c1 f7       	brne	.-16     	; 0xfe2 <__mulsf3_pse+0x90>
     ff2:	fe 2b       	or	r31, r30
     ff4:	88 0f       	add	r24, r24
     ff6:	91 1d       	adc	r25, r1
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret

00001000 <_exit>:
    1000:	f8 94       	cli

00001002 <__stop_program>:
    1002:	ff cf       	rjmp	.-2      	; 0x1002 <__stop_program>
