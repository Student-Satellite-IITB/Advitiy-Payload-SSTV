
ATXmega_SSTV_Encode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000fb8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00802006  00802006  00001052  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000079c7  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc6  00000000  00000000  00008cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001750  00000000  00000000  0000c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000068c  00000000  00000000  0000e114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bec  00000000  00000000  0000e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021a3  00000000  00000000  0001238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0001452f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_16>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_26>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 eb       	ldi	r30, 0xB8	; 184
 214:	ff e0       	ldi	r31, 0x0F	; 15
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a6 e0       	ldi	r26, 0x06	; 6
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a9 34       	cpi	r26, 0x49	; 73
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 23a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Set_AD9833>:

#include "AD9833.h"
#include "spi_driver.h"

void Set_AD9833(float frequency, unsigned int phase) // Zero amplitude time : 39 miroseconds
{
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	8a 01       	movw	r16, r20
	long FreqReg = (((float)frequency)*pow(2,28))/(float)FMCLK;	  //Calculate frequency to be sent to AD9833
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	5d e4       	ldi	r21, 0x4D	; 77
 25c:	0e 94 6d 07 	call	0xeda	; 0xeda <__mulsf3>
 260:	20 e2       	ldi	r18, 0x20	; 32
 262:	3c eb       	ldi	r19, 0xBC	; 188
 264:	4e eb       	ldi	r20, 0xBE	; 190
 266:	5b e4       	ldi	r21, 0x4B	; 75
 268:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 26c:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);				  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
 274:	cc 24       	eor	r12, r12
 276:	20 ec       	ldi	r18, 0xC0	; 192
 278:	d2 22       	and	r13, r18
 27a:	2f e0       	ldi	r18, 0x0F	; 15
 27c:	f2 22       	and	r15, r18
 27e:	0b 2e       	mov	r0, r27
 280:	be e0       	ldi	r27, 0x0E	; 14
 282:	f5 94       	asr	r15
 284:	e7 94       	ror	r14
 286:	d7 94       	ror	r13
 288:	c7 94       	ror	r12
 28a:	ba 95       	dec	r27
 28c:	d1 f7       	brne	.-12     	; 0x282 <Set_AD9833+0x40>
 28e:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));						  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB
 290:	eb 01       	movw	r28, r22
 292:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;												  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     											  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_send16(0x2100);											  //Define waveform and set reset bit
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	91 e2       	ldi	r25, 0x21	; 33
 298:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_send16>
	SPI_send16(LSB);											  //Write LSBs
 29c:	ce 01       	movw	r24, r28
 29e:	90 64       	ori	r25, 0x40	; 64
 2a0:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_send16>
	SPI_send16(MSB);											  //Write MSBs
 2a4:	c6 01       	movw	r24, r12
 2a6:	90 64       	ori	r25, 0x40	; 64
 2a8:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_send16>
	phase&=0x0FFF;
 2ac:	c8 01       	movw	r24, r16
 2ae:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;												  //Set Phase write enable bytes
	//SPI_write16(0xC000);										  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_send16(phase);											  //Write Phase bytes
 2b0:	90 6c       	ori	r25, 0xC0	; 192
 2b2:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_send16>
	SPI_send16(0x2000);											  //Unset reset bit
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e2       	ldi	r25, 0x20	; 32
 2ba:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_send16>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	08 95       	ret

000002d0 <getphase>:

unsigned int getphase(float prevPhase,float nextFreq, float prevTime)
{
 2d0:	4f 92       	push	r4
 2d2:	5f 92       	push	r5
 2d4:	6f 92       	push	r6
 2d6:	7f 92       	push	r7
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	af 92       	push	r10
 2de:	bf 92       	push	r11
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <getphase+0x22>
 2f2:	1f 92       	push	r1
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	2b 01       	movw	r4, r22
 2fa:	3c 01       	movw	r6, r24
 2fc:	49 01       	movw	r8, r18
 2fe:	5a 01       	movw	r10, r20
 300:	67 01       	movw	r12, r14
 302:	78 01       	movw	r14, r16
	prevTime/=1000000;																	//Convert time to microseconds
	prevPhase/=2048/PI;																	//Change scaling of Phase as required by AD9833
	float returnPhase=((fmod(prevTime,(1/nextFreq))*2*PI*nextFreq)+prevPhase)*2048/PI;	//Calculate phase completed by previous wave
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	9f e3       	ldi	r25, 0x3F	; 63
 30c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 310:	69 83       	std	Y+1, r22	; 0x01
 312:	7a 83       	std	Y+2, r23	; 0x02
 314:	8b 83       	std	Y+3, r24	; 0x03
 316:	9c 83       	std	Y+4, r25	; 0x04
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	34 e2       	ldi	r19, 0x24	; 36
 31c:	44 e7       	ldi	r20, 0x74	; 116
 31e:	59 e4       	ldi	r21, 0x49	; 73
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 328:	29 81       	ldd	r18, Y+1	; 0x01
 32a:	3a 81       	ldd	r19, Y+2	; 0x02
 32c:	4b 81       	ldd	r20, Y+3	; 0x03
 32e:	5c 81       	ldd	r21, Y+4	; 0x04
 330:	0e 94 c5 06 	call	0xd8a	; 0xd8a <fmod>
	return (unsigned int) returnPhase;													//Return in 16 bit format
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	0e 94 69 05 	call	0xad2	; 0xad2 <__addsf3>
 33c:	20 ed       	ldi	r18, 0xD0	; 208
 33e:	3f e0       	ldi	r19, 0x0F	; 15
 340:	49 e4       	ldi	r20, 0x49	; 73
 342:	50 e4       	ldi	r21, 0x40	; 64
 344:	0e 94 6d 07 	call	0xeda	; 0xeda <__mulsf3>
 348:	a5 01       	movw	r20, r10
 34a:	94 01       	movw	r18, r8
 34c:	0e 94 6d 07 	call	0xeda	; 0xeda <__mulsf3>
 350:	6b 01       	movw	r12, r22
 352:	7c 01       	movw	r14, r24
 354:	2c e8       	ldi	r18, 0x8C	; 140
 356:	39 ef       	ldi	r19, 0xF9	; 249
 358:	42 e2       	ldi	r20, 0x22	; 34
 35a:	54 e4       	ldi	r21, 0x44	; 68
 35c:	c3 01       	movw	r24, r6
 35e:	b2 01       	movw	r22, r4
 360:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	c7 01       	movw	r24, r14
 36a:	b6 01       	movw	r22, r12
 36c:	0e 94 69 05 	call	0xad2	; 0xad2 <__addsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	55 e4       	ldi	r21, 0x45	; 69
 378:	0e 94 6d 07 	call	0xeda	; 0xeda <__mulsf3>
 37c:	20 ed       	ldi	r18, 0xD0	; 208
 37e:	3f e0       	ldi	r19, 0x0F	; 15
 380:	49 e4       	ldi	r20, 0x49	; 73
 382:	50 e4       	ldi	r21, 0x40	; 64
 384:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3>
 388:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fixunssfsi>
}
 38c:	cb 01       	movw	r24, r22
 38e:	24 96       	adiw	r28, 0x04	; 4
 390:	cd bf       	out	0x3d, r28	; 61
 392:	de bf       	out	0x3e, r29	; 62
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <main>:

volatile int frequency=1757,phase=0,prevPhase=0,prevFreq=0,pixelCount=0;

int main(void)
{
	setUp16MhzExternalOsc();	//Required for setting 16Mhz frequency
 3b6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <setUp16MhzExternalOsc>
	SetClock0();				//Initialize 532 us interrupts
 3ba:	0e 94 c6 04 	call	0x98c	; 0x98c <SetClock0>
	SPI_Master_init();			//Initialize SPI for AD9833
 3be:	0e 94 67 04 	call	0x8ce	; 0x8ce <SPI_Master_init>
	eepromInit();				//Initialize SPI for EEPROM
 3c2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <eepromInit>
	SetUsart();					
 3c6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SetUsart>
	SPI_send16(0x100);			//Reset AD9833
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 97 04 	call	0x92e	; 0x92e <SPI_send16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	81 ee       	ldi	r24, 0xE1	; 225
 3d6:	94 e0       	ldi	r25, 0x04	; 4
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x22>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x2c>
 3e2:	00 00       	nop
// VIS Code 
	{_delay_ms(100);
	Set_AD9833(1900,0);	_delay_ms(300);	//leader tone
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	70 e8       	ldi	r23, 0x80	; 128
 3ec:	8d ee       	ldi	r24, 0xED	; 237
 3ee:	94 e4       	ldi	r25, 0x44	; 68
 3f0:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 3f4:	ef ef       	ldi	r30, 0xFF	; 255
 3f6:	f5 ea       	ldi	r31, 0xA5	; 165
 3f8:	2e e0       	ldi	r18, 0x0E	; 14
 3fa:	e1 50       	subi	r30, 0x01	; 1
 3fc:	f0 40       	sbci	r31, 0x00	; 0
 3fe:	20 40       	sbci	r18, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x44>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	Set_AD9833(1200,0);	_delay_ms(10);	//break
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	86 e9       	ldi	r24, 0x96	; 150
 410:	94 e4       	ldi	r25, 0x44	; 68
 412:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9c e9       	ldi	r25, 0x9C	; 156
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	Set_AD9833(1900,0);	_delay_ms(300);	//leader
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	70 e8       	ldi	r23, 0x80	; 128
 42a:	8d ee       	ldi	r24, 0xED	; 237
 42c:	94 e4       	ldi	r25, 0x44	; 68
 42e:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 432:	9f ef       	ldi	r25, 0xFF	; 255
 434:	e5 ea       	ldi	r30, 0xA5	; 165
 436:	fe e0       	ldi	r31, 0x0E	; 14
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	e0 40       	sbci	r30, 0x00	; 0
 43c:	f0 40       	sbci	r31, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//VIS start bit
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	86 e9       	ldi	r24, 0x96	; 150
 44e:	94 e4       	ldi	r25, 0x44	; 68
 450:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 454:	2f e7       	ldi	r18, 0x7F	; 127
 456:	8a e6       	ldi	r24, 0x6A	; 106
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	e3 e0       	ldi	r30, 0x03	; 3
 468:	ff e0       	ldi	r31, 0x0F	; 15
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
	//PD90 VIS code = 99d = 0b1100011
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 0=1
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	70 e8       	ldi	r23, 0x80	; 128
 47a:	89 e8       	ldi	r24, 0x89	; 137
 47c:	94 e4       	ldi	r25, 0x44	; 68
 47e:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	ff e7       	ldi	r31, 0x7F	; 127
 484:	2a e6       	ldi	r18, 0x6A	; 106
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	f1 50       	subi	r31, 0x01	; 1
 48a:	20 40       	sbci	r18, 0x00	; 0
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 494:	e3 e0       	ldi	r30, 0x03	; 3
 496:	ff e0       	ldi	r31, 0x0F	; 15
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 1=1
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	70 e8       	ldi	r23, 0x80	; 128
 4a8:	89 e8       	ldi	r24, 0x89	; 137
 4aa:	94 e4       	ldi	r25, 0x44	; 68
 4ac:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	ff e7       	ldi	r31, 0x7F	; 127
 4b2:	2a e6       	ldi	r18, 0x6A	; 106
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	f1 50       	subi	r31, 0x01	; 1
 4b8:	20 40       	sbci	r18, 0x00	; 0
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	e3 e0       	ldi	r30, 0x03	; 3
 4c4:	ff e0       	ldi	r31, 0x0F	; 15
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);  _delay_us(961);	//bit 2=0
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	70 e8       	ldi	r23, 0x80	; 128
 4d6:	82 ea       	ldi	r24, 0xA2	; 162
 4d8:	94 e4       	ldi	r25, 0x44	; 68
 4da:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	ff e7       	ldi	r31, 0x7F	; 127
 4e0:	2a e6       	ldi	r18, 0x6A	; 106
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	f1 50       	subi	r31, 0x01	; 1
 4e6:	20 40       	sbci	r18, 0x00	; 0
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f0:	e3 e0       	ldi	r30, 0x03	; 3
 4f2:	ff e0       	ldi	r31, 0x0F	; 15
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4fa:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//bit 3=0
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	70 e8       	ldi	r23, 0x80	; 128
 504:	82 ea       	ldi	r24, 0xA2	; 162
 506:	94 e4       	ldi	r25, 0x44	; 68
 508:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50c:	ff e7       	ldi	r31, 0x7F	; 127
 50e:	2a e6       	ldi	r18, 0x6A	; 106
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	f1 50       	subi	r31, 0x01	; 1
 514:	20 40       	sbci	r18, 0x00	; 0
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 51c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51e:	e3 e0       	ldi	r30, 0x03	; 3
 520:	ff e0       	ldi	r31, 0x0F	; 15
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 526:	00 c0       	rjmp	.+0      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 528:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//bit 4=0
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	70 e8       	ldi	r23, 0x80	; 128
 532:	82 ea       	ldi	r24, 0xA2	; 162
 534:	94 e4       	ldi	r25, 0x44	; 68
 536:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	ff e7       	ldi	r31, 0x7F	; 127
 53c:	2a e6       	ldi	r18, 0x6A	; 106
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	f1 50       	subi	r31, 0x01	; 1
 542:	20 40       	sbci	r18, 0x00	; 0
 544:	80 40       	sbci	r24, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 54a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54c:	e3 e0       	ldi	r30, 0x03	; 3
 54e:	ff e0       	ldi	r31, 0x0F	; 15
 550:	31 97       	sbiw	r30, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 556:	00 00       	nop
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 5=1
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	70 e8       	ldi	r23, 0x80	; 128
 560:	89 e8       	ldi	r24, 0x89	; 137
 562:	94 e4       	ldi	r25, 0x44	; 68
 564:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 568:	ff e7       	ldi	r31, 0x7F	; 127
 56a:	2a e6       	ldi	r18, 0x6A	; 106
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	f1 50       	subi	r31, 0x01	; 1
 570:	20 40       	sbci	r18, 0x00	; 0
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 578:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	e3 e0       	ldi	r30, 0x03	; 3
 57c:	ff e0       	ldi	r31, 0x0F	; 15
 57e:	31 97       	sbiw	r30, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 582:	00 c0       	rjmp	.+0      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 584:	00 00       	nop
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 6=1
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	70 e8       	ldi	r23, 0x80	; 128
 58e:	89 e8       	ldi	r24, 0x89	; 137
 590:	94 e4       	ldi	r25, 0x44	; 68
 592:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	ff e7       	ldi	r31, 0x7F	; 127
 598:	2a e6       	ldi	r18, 0x6A	; 106
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	f1 50       	subi	r31, 0x01	; 1
 59e:	20 40       	sbci	r18, 0x00	; 0
 5a0:	80 40       	sbci	r24, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a8:	e3 e0       	ldi	r30, 0x03	; 3
 5aa:	ff e0       	ldi	r31, 0x0F	; 15
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b2:	00 00       	nop
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//Parity bit
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e8       	ldi	r23, 0x80	; 128
 5bc:	82 ea       	ldi	r24, 0xA2	; 162
 5be:	94 e4       	ldi	r25, 0x44	; 68
 5c0:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c4:	ff e7       	ldi	r31, 0x7F	; 127
 5c6:	2a e6       	ldi	r18, 0x6A	; 106
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	f1 50       	subi	r31, 0x01	; 1
 5cc:	20 40       	sbci	r18, 0x00	; 0
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	e3 e0       	ldi	r30, 0x03	; 3
 5d8:	ff e0       	ldi	r31, 0x0F	; 15
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5e0:	00 00       	nop
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	86 e9       	ldi	r24, 0x96	; 150
 5ec:	94 e4       	ldi	r25, 0x44	; 68
 5ee:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f2:	ff e7       	ldi	r31, 0x7F	; 127
 5f4:	2a e6       	ldi	r18, 0x6A	; 106
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	f1 50       	subi	r31, 0x01	; 1
 5fa:	20 40       	sbci	r18, 0x00	; 0
 5fc:	80 40       	sbci	r24, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 600:	00 c0       	rjmp	.+0      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 602:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 604:	e3 e0       	ldi	r30, 0x03	; 3
 606:	ff e0       	ldi	r31, 0x0F	; 15
 608:	31 97       	sbiw	r30, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60e:	00 00       	nop
 610:	c1 e8       	ldi	r28, 0x81	; 129
 612:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Set_AD9833(1200,0); _delay_ms(19); _delay_us(961);	//Sync Pulse
		Set_AD9833(1500,0); _delay_ms(2); _delay_us(41);	//Porch
	//Pixel Interrupt sequence
		pixelCount=0;
		TCC0.CNT=0;
 614:	00 e0       	ldi	r16, 0x00	; 0
 616:	18 e0       	ldi	r17, 0x08	; 8
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
	}
//Image Data	
	for(int lineSet=0; lineSet<=128; lineSet++)
	{
		Set_AD9833(1200,0); _delay_ms(19); _delay_us(961);	//Sync Pulse
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	86 e9       	ldi	r24, 0x96	; 150
 622:	94 e4       	ldi	r25, 0x44	; 68
 624:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 628:	ff e7       	ldi	r31, 0x7F	; 127
 62a:	2d ee       	ldi	r18, 0xED	; 237
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	f1 50       	subi	r31, 0x01	; 1
 630:	20 40       	sbci	r18, 0x00	; 0
 632:	80 40       	sbci	r24, 0x00	; 0
 634:	e1 f7       	brne	.-8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 636:	00 c0       	rjmp	.+0      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 638:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63a:	e3 e0       	ldi	r30, 0x03	; 3
 63c:	ff e0       	ldi	r31, 0x0F	; 15
 63e:	31 97       	sbiw	r30, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 642:	00 c0       	rjmp	.+0      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 644:	00 00       	nop
		Set_AD9833(1500,0); _delay_ms(2); _delay_us(41);	//Porch
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	70 e8       	ldi	r23, 0x80	; 128
 64e:	8b eb       	ldi	r24, 0xBB	; 187
 650:	94 e4       	ldi	r25, 0x44	; 68
 652:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 656:	8f e3       	ldi	r24, 0x3F	; 63
 658:	9f e1       	ldi	r25, 0x1F	; 31
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 660:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 662:	9a ed       	ldi	r25, 0xDA	; 218
 664:	9a 95       	dec	r25
 666:	f1 f7       	brne	.-4      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 668:	00 c0       	rjmp	.+0      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
	//Pixel Interrupt sequence
		pixelCount=0;
 66a:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
 66e:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
		TCC0.CNT=0;
 672:	f8 01       	movw	r30, r16
 674:	10 a2       	std	Z+32, r1	; 0x20
 676:	11 a2       	std	Z+33, r1	; 0x21
		sei();
 678:	78 94       	sei
		while(pixelCount<=1280);
 67a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 67e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	95 40       	sbci	r25, 0x05	; 5
 686:	cc f3       	brlt	.-14     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
		cli();
 688:	f8 94       	cli
 68a:	21 97       	sbiw	r28, 0x01	; 1
	Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 6=1
	Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//Parity bit
	Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
	}
//Image Data	
	for(int lineSet=0; lineSet<=128; lineSet++)
 68c:	29 f6       	brne	.-118    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		TCC0.CNT=0;
		sei();
		while(pixelCount<=1280);
		cli();
	}
	Set_AD9833(0,0);
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	cb 01       	movw	r24, r22
 698:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>

0000069e <__vector_16>:
		
	}
}

ISR(TCC0_CCA_vect)
{
 69e:	1f 92       	push	r1
 6a0:	0f 92       	push	r0
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	0f 92       	push	r0
 6a6:	11 24       	eor	r1, r1
 6a8:	0b b6       	in	r0, 0x3b	; 59
 6aa:	0f 92       	push	r0
 6ac:	8f 92       	push	r8
 6ae:	9f 92       	push	r9
 6b0:	af 92       	push	r10
 6b2:	bf 92       	push	r11
 6b4:	ef 92       	push	r14
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	2f 93       	push	r18
 6be:	3f 93       	push	r19
 6c0:	4f 93       	push	r20
 6c2:	5f 93       	push	r21
 6c4:	6f 93       	push	r22
 6c6:	7f 93       	push	r23
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
	Set_AD9833(frequency,phase);
 6d8:	c0 91 0c 20 	lds	r28, 0x200C	; 0x80200c <phase>
 6dc:	d0 91 0d 20 	lds	r29, 0x200D	; 0x80200d <phase+0x1>
 6e0:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
 6e4:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
 6e8:	07 2e       	mov	r0, r23
 6ea:	00 0c       	add	r0, r0
 6ec:	88 0b       	sbc	r24, r24
 6ee:	99 0b       	sbc	r25, r25
 6f0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__floatsisf>
 6f4:	ae 01       	movw	r20, r28
 6f6:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	prevPhase=phase;
 6fa:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <phase>
 6fe:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <phase+0x1>
 702:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <prevPhase>
 706:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <prevPhase+0x1>
	prevFreq=frequency;
 70a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 70e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 712:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <prevFreq>
 716:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <prevFreq+0x1>
// Todo : Frequency Retrieval section from EEPROM
	if(pixelCount==319) frequency = 2253;
 71a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 71e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 722:	8f 33       	cpi	r24, 0x3F	; 63
 724:	91 40       	sbci	r25, 0x01	; 1
 726:	39 f4       	brne	.+14     	; 0x736 <__vector_16+0x98>
 728:	8d ec       	ldi	r24, 0xCD	; 205
 72a:	98 e0       	ldi	r25, 0x08	; 8
 72c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 730:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 734:	1b c0       	rjmp	.+54     	; 0x76c <__vector_16+0xce>
	else if(pixelCount==639) frequency = 1782;
 736:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 73a:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 73e:	8f 37       	cpi	r24, 0x7F	; 127
 740:	92 40       	sbci	r25, 0x02	; 2
 742:	39 f4       	brne	.+14     	; 0x752 <__vector_16+0xb4>
 744:	86 ef       	ldi	r24, 0xF6	; 246
 746:	96 e0       	ldi	r25, 0x06	; 6
 748:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 74c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 750:	0d c0       	rjmp	.+26     	; 0x76c <__vector_16+0xce>
	else if(pixelCount==959) frequency = 1757;
 752:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 756:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 75a:	8f 3b       	cpi	r24, 0xBF	; 191
 75c:	93 40       	sbci	r25, 0x03	; 3
 75e:	31 f4       	brne	.+12     	; 0x76c <__vector_16+0xce>
 760:	8d ed       	ldi	r24, 0xDD	; 221
 762:	96 e0       	ldi	r25, 0x06	; 6
 764:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 768:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
	phase=getphase(prevPhase,prevFreq,532);
 76c:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <prevFreq>
 770:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <prevFreq+0x1>
 774:	c0 91 0a 20 	lds	r28, 0x200A	; 0x80200a <prevPhase>
 778:	d0 91 0b 20 	lds	r29, 0x200B	; 0x80200b <prevPhase+0x1>
 77c:	07 2e       	mov	r0, r23
 77e:	00 0c       	add	r0, r0
 780:	88 0b       	sbc	r24, r24
 782:	99 0b       	sbc	r25, r25
 784:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__floatsisf>
 788:	4b 01       	movw	r8, r22
 78a:	5c 01       	movw	r10, r24
 78c:	be 01       	movw	r22, r28
 78e:	dd 0f       	add	r29, r29
 790:	88 0b       	sbc	r24, r24
 792:	99 0b       	sbc	r25, r25
 794:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__floatsisf>
 798:	e1 2c       	mov	r14, r1
 79a:	f1 2c       	mov	r15, r1
 79c:	05 e0       	ldi	r16, 0x05	; 5
 79e:	14 e4       	ldi	r17, 0x44	; 68
 7a0:	a5 01       	movw	r20, r10
 7a2:	94 01       	movw	r18, r8
 7a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <getphase>
 7a8:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <phase>
 7ac:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <phase+0x1>
	pixelCount++;
 7b0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 7b4:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 7b8:	01 96       	adiw	r24, 0x01	; 1
 7ba:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
 7be:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	bf 91       	pop	r27
 7cc:	af 91       	pop	r26
 7ce:	9f 91       	pop	r25
 7d0:	8f 91       	pop	r24
 7d2:	7f 91       	pop	r23
 7d4:	6f 91       	pop	r22
 7d6:	5f 91       	pop	r21
 7d8:	4f 91       	pop	r20
 7da:	3f 91       	pop	r19
 7dc:	2f 91       	pop	r18
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	bf 90       	pop	r11
 7e8:	af 90       	pop	r10
 7ea:	9f 90       	pop	r9
 7ec:	8f 90       	pop	r8
 7ee:	0f 90       	pop	r0
 7f0:	0b be       	out	0x3b, r0	; 59
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <eepromInit>:
uint8_t masterReceivedDataD[1];
//bool success = true;
int eepromID = 2;				//Downlink 2 set as default memory for testing SSTV

void eepromInit()
{
 7fc:	af 92       	push	r10
 7fe:	cf 92       	push	r12
 800:	ef 92       	push	r14
 802:	0f 93       	push	r16
	PORTD.DIRSET = PIN2_bm;																							//Set SS1 as output
 804:	e0 e6       	ldi	r30, 0x60	; 96
 806:	f6 e0       	ldi	r31, 0x06	; 6
 808:	34 e0       	ldi	r19, 0x04	; 4
 80a:	31 83       	std	Z+1, r19	; 0x01
	PORTD.DIRSET = PIN3_bm;																							//Set SS2 as output
 80c:	28 e0       	ldi	r18, 0x08	; 8
 80e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN4_bm;																							//Set SS3 as output
 810:	90 e1       	ldi	r25, 0x10	; 16
 812:	91 83       	std	Z+1, r25	; 0x01
	PORTD.DIRSET = PIN5_bm;																							//MOSI as output
 814:	80 e2       	ldi	r24, 0x20	; 32
 816:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN7_bm;																							//SCK as output
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.PIN2CTRL = PORT_OPC_WIREDANDPULL_gc;																		//Set PullUp at SS1 
 81c:	88 e3       	ldi	r24, 0x38	; 56
 81e:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_WIREDANDPULL_gc;																		//Set PullUp at SS2
 820:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;																		//Set PullUp at SS3
 822:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.OUTSET = PIN2_bm;																							//Set SS1 high for no Slave
 824:	35 83       	std	Z+5, r19	; 0x05
	PORTD.OUTSET = PIN3_bm;																							//Set SS2 high for no Slave
 826:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTSET = PIN4_bm;																							//Set SS3 high for no Slave
 828:	95 83       	std	Z+5, r25	; 0x05
	SPI_MasterInit(&spiMasterD,&SPID,&PORTD,false,SPI_MODE_2_gc,SPI_INTLVL_OFF_gc,true,SPI_PRESCALER_DIV4_gc);		//Initialize device as master (Mode 2, MSB first, 2X speed, prescaler 4)
 82a:	a1 2c       	mov	r10, r1
 82c:	cc 24       	eor	r12, r12
 82e:	c3 94       	inc	r12
 830:	e1 2c       	mov	r14, r1
 832:	08 e0       	ldi	r16, 0x08	; 8
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	40 e6       	ldi	r20, 0x60	; 96
 838:	56 e0       	ldi	r21, 0x06	; 6
 83a:	60 ec       	ldi	r22, 0xC0	; 192
 83c:	79 e0       	ldi	r23, 0x09	; 9
 83e:	89 e1       	ldi	r24, 0x19	; 25
 840:	90 e2       	ldi	r25, 0x20	; 32
 842:	0e 94 2e 04 	call	0x85c	; 0x85c <SPI_MasterInit>
	eepromID=DOWNLINK2;
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <eepromID>
 84e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <eepromID+0x1>
}
 852:	0f 91       	pop	r16
 854:	ef 90       	pop	r14
 856:	cf 90       	pop	r12
 858:	af 90       	pop	r10
 85a:	08 95       	ret

0000085c <SPI_MasterInit>:
uint8_t SPI_receive8()
{
	SPI_MasterCreateDataPacket(&dataPacket,masterSendData,masterReceivedData,NUM_BYTES,&PORTC,PIN4_bm);		
	SPI_MasterTransceivePacket(&spiMasterC, &dataPacket);	//Wait for reception
	return masterReceivedData[0];							
}
 85c:	af 92       	push	r10
 85e:	cf 92       	push	r12
 860:	ef 92       	push	r14
 862:	0f 93       	push	r16
 864:	fc 01       	movw	r30, r24
 866:	60 83       	st	Z, r22
 868:	71 83       	std	Z+1, r23	; 0x01
 86a:	42 83       	std	Z+2, r20	; 0x02
 86c:	53 83       	std	Z+3, r21	; 0x03
 86e:	14 82       	std	Z+4, r1	; 0x04
 870:	c1 10       	cpse	r12, r1
 872:	02 c0       	rjmp	.+4      	; 0x878 <SPI_MasterInit+0x1c>
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	01 c0       	rjmp	.+2      	; 0x87a <SPI_MasterInit+0x1e>
 878:	80 e8       	ldi	r24, 0x80	; 128
 87a:	9a 2d       	mov	r25, r10
 87c:	90 64       	ori	r25, 0x40	; 64
 87e:	a9 2e       	mov	r10, r25
 880:	a8 2a       	or	r10, r24
 882:	21 11       	cpse	r18, r1
 884:	02 c0       	rjmp	.+4      	; 0x88a <SPI_MasterInit+0x2e>
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	01 c0       	rjmp	.+2      	; 0x88c <SPI_MasterInit+0x30>
 88a:	80 e2       	ldi	r24, 0x20	; 32
 88c:	a8 2a       	or	r10, r24
 88e:	00 61       	ori	r16, 0x10	; 16
 890:	0a 29       	or	r16, r10
 892:	db 01       	movw	r26, r22
 894:	0c 93       	st	X, r16
 896:	a0 81       	ld	r26, Z
 898:	b1 81       	ldd	r27, Z+1	; 0x01
 89a:	11 96       	adiw	r26, 0x01	; 1
 89c:	ec 92       	st	X, r14
 89e:	15 82       	std	Z+5, r1	; 0x05
 8a0:	16 82       	std	Z+6, r1	; 0x06
 8a2:	02 80       	ldd	r0, Z+2	; 0x02
 8a4:	f3 81       	ldd	r31, Z+3	; 0x03
 8a6:	e0 2d       	mov	r30, r0
 8a8:	80 ea       	ldi	r24, 0xA0	; 160
 8aa:	81 83       	std	Z+1, r24	; 0x01
 8ac:	0f 91       	pop	r16
 8ae:	ef 90       	pop	r14
 8b0:	cf 90       	pop	r12
 8b2:	af 90       	pop	r10
 8b4:	08 95       	ret

000008b6 <SPI_MasterTransceiveByte>:
 8b6:	dc 01       	movw	r26, r24
 8b8:	ed 91       	ld	r30, X+
 8ba:	fc 91       	ld	r31, X
 8bc:	11 97       	sbiw	r26, 0x01	; 1
 8be:	63 83       	std	Z+3, r22	; 0x03
 8c0:	ed 91       	ld	r30, X+
 8c2:	fc 91       	ld	r31, X
 8c4:	82 81       	ldd	r24, Z+2	; 0x02
 8c6:	88 23       	and	r24, r24
 8c8:	ec f7       	brge	.-6      	; 0x8c4 <SPI_MasterTransceiveByte+0xe>
 8ca:	83 81       	ldd	r24, Z+3	; 0x03
 8cc:	08 95       	ret

000008ce <SPI_Master_init>:
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	a0 e4       	ldi	r26, 0x40	; 64
 8d4:	b6 e0       	ldi	r27, 0x06	; 6
 8d6:	80 e1       	ldi	r24, 0x10	; 16
 8d8:	11 96       	adiw	r26, 0x01	; 1
 8da:	8c 93       	st	X, r24
 8dc:	11 97       	sbiw	r26, 0x01	; 1
 8de:	90 e2       	ldi	r25, 0x20	; 32
 8e0:	11 96       	adiw	r26, 0x01	; 1
 8e2:	9c 93       	st	X, r25
 8e4:	11 97       	sbiw	r26, 0x01	; 1
 8e6:	90 e8       	ldi	r25, 0x80	; 128
 8e8:	11 96       	adiw	r26, 0x01	; 1
 8ea:	9c 93       	st	X, r25
 8ec:	11 97       	sbiw	r26, 0x01	; 1
 8ee:	98 e3       	ldi	r25, 0x38	; 56
 8f0:	54 96       	adiw	r26, 0x14	; 20
 8f2:	9c 93       	st	X, r25
 8f4:	54 97       	sbiw	r26, 0x14	; 20
 8f6:	15 96       	adiw	r26, 0x05	; 5
 8f8:	8c 93       	st	X, r24
 8fa:	15 97       	sbiw	r26, 0x05	; 5
 8fc:	e9 e2       	ldi	r30, 0x29	; 41
 8fe:	f0 e2       	ldi	r31, 0x20	; 32
 900:	c0 ec       	ldi	r28, 0xC0	; 192
 902:	d8 e0       	ldi	r29, 0x08	; 8
 904:	c0 83       	st	Z, r28
 906:	d1 83       	std	Z+1, r29	; 0x01
 908:	a2 83       	std	Z+2, r26	; 0x02
 90a:	b3 83       	std	Z+3, r27	; 0x03
 90c:	14 82       	std	Z+4, r1	; 0x04
 90e:	88 ed       	ldi	r24, 0xD8	; 216
 910:	88 83       	st	Y, r24
 912:	a0 81       	ld	r26, Z
 914:	b1 81       	ldd	r27, Z+1	; 0x01
 916:	11 96       	adiw	r26, 0x01	; 1
 918:	1c 92       	st	X, r1
 91a:	15 82       	std	Z+5, r1	; 0x05
 91c:	16 82       	std	Z+6, r1	; 0x06
 91e:	02 80       	ldd	r0, Z+2	; 0x02
 920:	f3 81       	ldd	r31, Z+3	; 0x03
 922:	e0 2d       	mov	r30, r0
 924:	80 ea       	ldi	r24, 0xA0	; 160
 926:	81 83       	std	Z+1, r24	; 0x01
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	08 95       	ret

0000092e <SPI_send16>:
void SPI_send16(uint16_t data)
{
 92e:	ff 92       	push	r15
 930:	0f 93       	push	r16
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	f8 2e       	mov	r15, r24
	PORTA_DIRSET = PIN0_bm;
 93a:	c1 e0       	ldi	r28, 0x01	; 1
 93c:	c0 93 01 06 	sts	0x0601, r28	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTF_DIRSET = PIN0_bm|PIN1_bm|PIN2_bm|PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTA_OUTSET = PIN0_bm;
 946:	05 e0       	ldi	r16, 0x05	; 5
 948:	16 e0       	ldi	r17, 0x06	; 6
 94a:	f8 01       	movw	r30, r16
 94c:	c0 83       	st	Z, r28
	uint8_t MSdata = ((data>>8) & 0x00FF);		//filter out MS
	uint8_t LSdata = (data & 0x00FF);			//filter out LS
	SPI_MasterSSLow(ssPort, PIN4_bm);			//Set Slave Select Low
 94e:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssPort>
 952:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssPort+0x1>
 956:	d0 e1       	ldi	r29, 0x10	; 16
 958:	d6 83       	std	Z+6, r29	; 0x06
	PORTA_OUTCLR = PIN0_bm;				
 95a:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	SPI_MasterTransceiveByte(&spiMasterC, MSdata); 
 95e:	69 2f       	mov	r22, r25
 960:	89 e2       	ldi	r24, 0x29	; 41
 962:	90 e2       	ldi	r25, 0x20	; 32
 964:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterC, LSdata);
 968:	6f 2d       	mov	r22, r15
 96a:	89 e2       	ldi	r24, 0x29	; 41
 96c:	90 e2       	ldi	r25, 0x20	; 32
 96e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <SPI_MasterTransceiveByte>
	SPI_MasterSSHigh(ssPort, PIN4_bm);			//Set Slave Select High
 972:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <ssPort>
 976:	f0 91 05 20 	lds	r31, 0x2005	; 0x802005 <ssPort+0x1>
 97a:	d5 83       	std	Z+5, r29	; 0x05
	PORTA_OUTSET = PIN0_bm;
 97c:	f8 01       	movw	r30, r16
 97e:	c0 83       	st	Z, r28
}
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	ff 90       	pop	r15
 98a:	08 95       	ret

0000098c <SetClock0>:
}

void SetClock1()
{	
	TCC1.PER = 0xFF;					//Set period 
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;	//Set Prescaler 1
 98c:	e0 e0       	ldi	r30, 0x00	; 0
 98e:	f8 e0       	ldi	r31, 0x08	; 8
 990:	81 e1       	ldi	r24, 0x11	; 17
 992:	81 83       	std	Z+1, r24	; 0x01
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	87 83       	std	Z+7, r24	; 0x07
 998:	2f ef       	ldi	r18, 0xFF	; 255
 99a:	3f ef       	ldi	r19, 0xFF	; 255
 99c:	26 a3       	std	Z+38, r18	; 0x26
 99e:	37 a3       	std	Z+39, r19	; 0x27
 9a0:	20 e4       	ldi	r18, 0x40	; 64
 9a2:	31 e2       	ldi	r19, 0x21	; 33
 9a4:	20 93 28 08 	sts	0x0828, r18	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 9a8:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
 9ac:	80 83       	st	Z, r24
 9ae:	e0 ea       	ldi	r30, 0xA0	; 160
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	82 81       	ldd	r24, Z+2	; 0x02
 9b4:	81 60       	ori	r24, 0x01	; 1
 9b6:	82 83       	std	Z+2, r24	; 0x02
 9b8:	08 95       	ret

000009ba <setUp16MhzExternalOsc>:
}

void setUp16MhzExternalOsc()
{
	PORTD_DIR = 0x01;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 9c0:	8b ec       	ldi	r24, 0xCB	; 203
 9c2:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
 9c6:	e0 e5       	ldi	r30, 0x50	; 80
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	80 81       	ld	r24, Z
 9cc:	88 60       	ori	r24, 0x08	; 8
 9ce:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
 9d0:	e1 e5       	ldi	r30, 0x51	; 81
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	83 ff       	sbrs	r24, 3
 9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <setUp16MhzExternalOsc+0x1a>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
 9da:	88 ed       	ldi	r24, 0xD8	; 216
 9dc:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 9e4:	08 95       	ret

000009e6 <USART_DataRegEmpty>:
	uint16_t LSdata = (data & 0x00FF);				//filter out LS
	sei();											//Enable global interrupts
	USART_TXBuffer_PutByte(&USART_data, MSdata);	//Write MSdata and wait for transfer
	USART_TXBuffer_PutByte(&USART_data, LSdata);	//Write LSdata and wait for transfer
	cli();											//Disable global interrupts
}
 9e6:	fc 01       	movw	r30, r24
 9e8:	96 85       	ldd	r25, Z+14	; 0x0e
 9ea:	85 85       	ldd	r24, Z+13	; 0x0d
 9ec:	98 13       	cpse	r25, r24
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <USART_DataRegEmpty+0x18>
 9f0:	01 90       	ld	r0, Z+
 9f2:	f0 81       	ld	r31, Z
 9f4:	e0 2d       	mov	r30, r0
 9f6:	83 81       	ldd	r24, Z+3	; 0x03
 9f8:	8c 7f       	andi	r24, 0xFC	; 252
 9fa:	83 83       	std	Z+3, r24	; 0x03
 9fc:	08 95       	ret
 9fe:	86 85       	ldd	r24, Z+14	; 0x0e
 a00:	df 01       	movw	r26, r30
 a02:	a8 0f       	add	r26, r24
 a04:	b1 1d       	adc	r27, r1
 a06:	17 96       	adiw	r26, 0x07	; 7
 a08:	8c 91       	ld	r24, X
 a0a:	a0 81       	ld	r26, Z
 a0c:	b1 81       	ldd	r27, Z+1	; 0x01
 a0e:	8c 93       	st	X, r24
 a10:	86 85       	ldd	r24, Z+14	; 0x0e
 a12:	8f 5f       	subi	r24, 0xFF	; 255
 a14:	83 70       	andi	r24, 0x03	; 3
 a16:	86 87       	std	Z+14, r24	; 0x0e
 a18:	08 95       	ret

00000a1a <SetUsart>:
 a1a:	e0 e4       	ldi	r30, 0x40	; 64
 a1c:	f6 e0       	ldi	r31, 0x06	; 6
 a1e:	88 e0       	ldi	r24, 0x08	; 8
 a20:	81 83       	std	Z+1, r24	; 0x01
 a22:	84 e0       	ldi	r24, 0x04	; 4
 a24:	82 83       	std	Z+2, r24	; 0x02
 a26:	aa e3       	ldi	r26, 0x3A	; 58
 a28:	b0 e2       	ldi	r27, 0x20	; 32
 a2a:	e0 ea       	ldi	r30, 0xA0	; 160
 a2c:	f8 e0       	ldi	r31, 0x08	; 8
 a2e:	ed 93       	st	X+, r30
 a30:	fc 93       	st	X, r31
 a32:	11 97       	sbiw	r26, 0x01	; 1
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	12 96       	adiw	r26, 0x02	; 2
 a38:	8c 93       	st	X, r24
 a3a:	12 97       	sbiw	r26, 0x02	; 2
 a3c:	1c 96       	adiw	r26, 0x0c	; 12
 a3e:	1c 92       	st	X, r1
 a40:	1c 97       	sbiw	r26, 0x0c	; 12
 a42:	1b 96       	adiw	r26, 0x0b	; 11
 a44:	1c 92       	st	X, r1
 a46:	1b 97       	sbiw	r26, 0x0b	; 11
 a48:	1e 96       	adiw	r26, 0x0e	; 14
 a4a:	1c 92       	st	X, r1
 a4c:	1e 97       	sbiw	r26, 0x0e	; 14
 a4e:	1d 96       	adiw	r26, 0x0d	; 13
 a50:	1c 92       	st	X, r1
 a52:	83 e0       	ldi	r24, 0x03	; 3
 a54:	85 83       	std	Z+5, r24	; 0x05
 a56:	83 81       	ldd	r24, Z+3	; 0x03
 a58:	8f 7c       	andi	r24, 0xCF	; 207
 a5a:	80 61       	ori	r24, 0x10	; 16
 a5c:	83 83       	std	Z+3, r24	; 0x03
 a5e:	8c e0       	ldi	r24, 0x0C	; 12
 a60:	86 83       	std	Z+6, r24	; 0x06
 a62:	17 82       	std	Z+7, r1	; 0x07
 a64:	84 81       	ldd	r24, Z+4	; 0x04
 a66:	80 61       	ori	r24, 0x10	; 16
 a68:	84 83       	std	Z+4, r24	; 0x04
 a6a:	84 81       	ldd	r24, Z+4	; 0x04
 a6c:	88 60       	ori	r24, 0x08	; 8
 a6e:	84 83       	std	Z+4, r24	; 0x04
 a70:	e0 ea       	ldi	r30, 0xA0	; 160
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	82 81       	ldd	r24, Z+2	; 0x02
 a76:	81 60       	ori	r24, 0x01	; 1
 a78:	82 83       	std	Z+2, r24	; 0x02
 a7a:	08 95       	ret

00000a7c <__vector_26>:
ISR(USARTC0_DRE_vect)
{
 a7c:	1f 92       	push	r1
 a7e:	0f 92       	push	r0
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	0f 92       	push	r0
 a84:	11 24       	eor	r1, r1
 a86:	0b b6       	in	r0, 0x3b	; 59
 a88:	0f 92       	push	r0
 a8a:	2f 93       	push	r18
 a8c:	3f 93       	push	r19
 a8e:	4f 93       	push	r20
 a90:	5f 93       	push	r21
 a92:	6f 93       	push	r22
 a94:	7f 93       	push	r23
 a96:	8f 93       	push	r24
 a98:	9f 93       	push	r25
 a9a:	af 93       	push	r26
 a9c:	bf 93       	push	r27
 a9e:	ef 93       	push	r30
 aa0:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
 aa2:	8a e3       	ldi	r24, 0x3A	; 58
 aa4:	90 e2       	ldi	r25, 0x20	; 32
 aa6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_DataRegEmpty>
}
 aaa:	ff 91       	pop	r31
 aac:	ef 91       	pop	r30
 aae:	bf 91       	pop	r27
 ab0:	af 91       	pop	r26
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	7f 91       	pop	r23
 ab8:	6f 91       	pop	r22
 aba:	5f 91       	pop	r21
 abc:	4f 91       	pop	r20
 abe:	3f 91       	pop	r19
 ac0:	2f 91       	pop	r18
 ac2:	0f 90       	pop	r0
 ac4:	0b be       	out	0x3b, r0	; 59
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

00000ad0 <__subsf3>:
 ad0:	50 58       	subi	r21, 0x80	; 128

00000ad2 <__addsf3>:
 ad2:	bb 27       	eor	r27, r27
 ad4:	aa 27       	eor	r26, r26
 ad6:	0e 94 80 05 	call	0xb00	; 0xb00 <__addsf3x>
 ada:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_round>
 ade:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_pscA>
 ae2:	38 f0       	brcs	.+14     	; 0xaf2 <__addsf3+0x20>
 ae4:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscB>
 ae8:	20 f0       	brcs	.+8      	; 0xaf2 <__addsf3+0x20>
 aea:	39 f4       	brne	.+14     	; 0xafa <__addsf3+0x28>
 aec:	9f 3f       	cpi	r25, 0xFF	; 255
 aee:	19 f4       	brne	.+6      	; 0xaf6 <__addsf3+0x24>
 af0:	26 f4       	brtc	.+8      	; 0xafa <__addsf3+0x28>
 af2:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_nan>
 af6:	0e f4       	brtc	.+2      	; 0xafa <__addsf3+0x28>
 af8:	e0 95       	com	r30
 afa:	e7 fb       	bst	r30, 7
 afc:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>

00000b00 <__addsf3x>:
 b00:	e9 2f       	mov	r30, r25
 b02:	0e 94 44 07 	call	0xe88	; 0xe88 <__fp_split3>
 b06:	58 f3       	brcs	.-42     	; 0xade <__addsf3+0xc>
 b08:	ba 17       	cp	r27, r26
 b0a:	62 07       	cpc	r22, r18
 b0c:	73 07       	cpc	r23, r19
 b0e:	84 07       	cpc	r24, r20
 b10:	95 07       	cpc	r25, r21
 b12:	20 f0       	brcs	.+8      	; 0xb1c <__addsf3x+0x1c>
 b14:	79 f4       	brne	.+30     	; 0xb34 <__addsf3x+0x34>
 b16:	a6 f5       	brtc	.+104    	; 0xb80 <__addsf3x+0x80>
 b18:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_zero>
 b1c:	0e f4       	brtc	.+2      	; 0xb20 <__addsf3x+0x20>
 b1e:	e0 95       	com	r30
 b20:	0b 2e       	mov	r0, r27
 b22:	ba 2f       	mov	r27, r26
 b24:	a0 2d       	mov	r26, r0
 b26:	0b 01       	movw	r0, r22
 b28:	b9 01       	movw	r22, r18
 b2a:	90 01       	movw	r18, r0
 b2c:	0c 01       	movw	r0, r24
 b2e:	ca 01       	movw	r24, r20
 b30:	a0 01       	movw	r20, r0
 b32:	11 24       	eor	r1, r1
 b34:	ff 27       	eor	r31, r31
 b36:	59 1b       	sub	r21, r25
 b38:	99 f0       	breq	.+38     	; 0xb60 <__addsf3x+0x60>
 b3a:	59 3f       	cpi	r21, 0xF9	; 249
 b3c:	50 f4       	brcc	.+20     	; 0xb52 <__addsf3x+0x52>
 b3e:	50 3e       	cpi	r21, 0xE0	; 224
 b40:	68 f1       	brcs	.+90     	; 0xb9c <__addsf3x+0x9c>
 b42:	1a 16       	cp	r1, r26
 b44:	f0 40       	sbci	r31, 0x00	; 0
 b46:	a2 2f       	mov	r26, r18
 b48:	23 2f       	mov	r18, r19
 b4a:	34 2f       	mov	r19, r20
 b4c:	44 27       	eor	r20, r20
 b4e:	58 5f       	subi	r21, 0xF8	; 248
 b50:	f3 cf       	rjmp	.-26     	; 0xb38 <__addsf3x+0x38>
 b52:	46 95       	lsr	r20
 b54:	37 95       	ror	r19
 b56:	27 95       	ror	r18
 b58:	a7 95       	ror	r26
 b5a:	f0 40       	sbci	r31, 0x00	; 0
 b5c:	53 95       	inc	r21
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__addsf3x+0x52>
 b60:	7e f4       	brtc	.+30     	; 0xb80 <__addsf3x+0x80>
 b62:	1f 16       	cp	r1, r31
 b64:	ba 0b       	sbc	r27, r26
 b66:	62 0b       	sbc	r22, r18
 b68:	73 0b       	sbc	r23, r19
 b6a:	84 0b       	sbc	r24, r20
 b6c:	ba f0       	brmi	.+46     	; 0xb9c <__addsf3x+0x9c>
 b6e:	91 50       	subi	r25, 0x01	; 1
 b70:	a1 f0       	breq	.+40     	; 0xb9a <__addsf3x+0x9a>
 b72:	ff 0f       	add	r31, r31
 b74:	bb 1f       	adc	r27, r27
 b76:	66 1f       	adc	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	c2 f7       	brpl	.-16     	; 0xb6e <__addsf3x+0x6e>
 b7e:	0e c0       	rjmp	.+28     	; 0xb9c <__addsf3x+0x9c>
 b80:	ba 0f       	add	r27, r26
 b82:	62 1f       	adc	r22, r18
 b84:	73 1f       	adc	r23, r19
 b86:	84 1f       	adc	r24, r20
 b88:	48 f4       	brcc	.+18     	; 0xb9c <__addsf3x+0x9c>
 b8a:	87 95       	ror	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b7 95       	ror	r27
 b92:	f7 95       	ror	r31
 b94:	9e 3f       	cpi	r25, 0xFE	; 254
 b96:	08 f0       	brcs	.+2      	; 0xb9a <__addsf3x+0x9a>
 b98:	b0 cf       	rjmp	.-160    	; 0xafa <__addsf3+0x28>
 b9a:	93 95       	inc	r25
 b9c:	88 0f       	add	r24, r24
 b9e:	08 f0       	brcs	.+2      	; 0xba2 <__addsf3x+0xa2>
 ba0:	99 27       	eor	r25, r25
 ba2:	ee 0f       	add	r30, r30
 ba4:	97 95       	ror	r25
 ba6:	87 95       	ror	r24
 ba8:	08 95       	ret

00000baa <__divsf3>:
 baa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__divsf3x>
 bae:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_round>
 bb2:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscB>
 bb6:	58 f0       	brcs	.+22     	; 0xbce <__divsf3+0x24>
 bb8:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_pscA>
 bbc:	40 f0       	brcs	.+16     	; 0xbce <__divsf3+0x24>
 bbe:	29 f4       	brne	.+10     	; 0xbca <__divsf3+0x20>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	29 f0       	breq	.+10     	; 0xbce <__divsf3+0x24>
 bc4:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
 bc8:	51 11       	cpse	r21, r1
 bca:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 bce:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_nan>

00000bd2 <__divsf3x>:
 bd2:	0e 94 44 07 	call	0xe88	; 0xe88 <__fp_split3>
 bd6:	68 f3       	brcs	.-38     	; 0xbb2 <__divsf3+0x8>

00000bd8 <__divsf3_pse>:
 bd8:	99 23       	and	r25, r25
 bda:	b1 f3       	breq	.-20     	; 0xbc8 <__divsf3+0x1e>
 bdc:	55 23       	and	r21, r21
 bde:	91 f3       	breq	.-28     	; 0xbc4 <__divsf3+0x1a>
 be0:	95 1b       	sub	r25, r21
 be2:	55 0b       	sbc	r21, r21
 be4:	bb 27       	eor	r27, r27
 be6:	aa 27       	eor	r26, r26
 be8:	62 17       	cp	r22, r18
 bea:	73 07       	cpc	r23, r19
 bec:	84 07       	cpc	r24, r20
 bee:	38 f0       	brcs	.+14     	; 0xbfe <__divsf3_pse+0x26>
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	5f 4f       	sbci	r21, 0xFF	; 255
 bf4:	22 0f       	add	r18, r18
 bf6:	33 1f       	adc	r19, r19
 bf8:	44 1f       	adc	r20, r20
 bfa:	aa 1f       	adc	r26, r26
 bfc:	a9 f3       	breq	.-22     	; 0xbe8 <__divsf3_pse+0x10>
 bfe:	35 d0       	rcall	.+106    	; 0xc6a <__divsf3_pse+0x92>
 c00:	0e 2e       	mov	r0, r30
 c02:	3a f0       	brmi	.+14     	; 0xc12 <__divsf3_pse+0x3a>
 c04:	e0 e8       	ldi	r30, 0x80	; 128
 c06:	32 d0       	rcall	.+100    	; 0xc6c <__divsf3_pse+0x94>
 c08:	91 50       	subi	r25, 0x01	; 1
 c0a:	50 40       	sbci	r21, 0x00	; 0
 c0c:	e6 95       	lsr	r30
 c0e:	00 1c       	adc	r0, r0
 c10:	ca f7       	brpl	.-14     	; 0xc04 <__divsf3_pse+0x2c>
 c12:	2b d0       	rcall	.+86     	; 0xc6a <__divsf3_pse+0x92>
 c14:	fe 2f       	mov	r31, r30
 c16:	29 d0       	rcall	.+82     	; 0xc6a <__divsf3_pse+0x92>
 c18:	66 0f       	add	r22, r22
 c1a:	77 1f       	adc	r23, r23
 c1c:	88 1f       	adc	r24, r24
 c1e:	bb 1f       	adc	r27, r27
 c20:	26 17       	cp	r18, r22
 c22:	37 07       	cpc	r19, r23
 c24:	48 07       	cpc	r20, r24
 c26:	ab 07       	cpc	r26, r27
 c28:	b0 e8       	ldi	r27, 0x80	; 128
 c2a:	09 f0       	breq	.+2      	; 0xc2e <__divsf3_pse+0x56>
 c2c:	bb 0b       	sbc	r27, r27
 c2e:	80 2d       	mov	r24, r0
 c30:	bf 01       	movw	r22, r30
 c32:	ff 27       	eor	r31, r31
 c34:	93 58       	subi	r25, 0x83	; 131
 c36:	5f 4f       	sbci	r21, 0xFF	; 255
 c38:	3a f0       	brmi	.+14     	; 0xc48 <__divsf3_pse+0x70>
 c3a:	9e 3f       	cpi	r25, 0xFE	; 254
 c3c:	51 05       	cpc	r21, r1
 c3e:	78 f0       	brcs	.+30     	; 0xc5e <__divsf3_pse+0x86>
 c40:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
 c44:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 c48:	5f 3f       	cpi	r21, 0xFF	; 255
 c4a:	e4 f3       	brlt	.-8      	; 0xc44 <__divsf3_pse+0x6c>
 c4c:	98 3e       	cpi	r25, 0xE8	; 232
 c4e:	d4 f3       	brlt	.-12     	; 0xc44 <__divsf3_pse+0x6c>
 c50:	86 95       	lsr	r24
 c52:	77 95       	ror	r23
 c54:	67 95       	ror	r22
 c56:	b7 95       	ror	r27
 c58:	f7 95       	ror	r31
 c5a:	9f 5f       	subi	r25, 0xFF	; 255
 c5c:	c9 f7       	brne	.-14     	; 0xc50 <__divsf3_pse+0x78>
 c5e:	88 0f       	add	r24, r24
 c60:	91 1d       	adc	r25, r1
 c62:	96 95       	lsr	r25
 c64:	87 95       	ror	r24
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret
 c6a:	e1 e0       	ldi	r30, 0x01	; 1
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	bb 1f       	adc	r27, r27
 c74:	62 17       	cp	r22, r18
 c76:	73 07       	cpc	r23, r19
 c78:	84 07       	cpc	r24, r20
 c7a:	ba 07       	cpc	r27, r26
 c7c:	20 f0       	brcs	.+8      	; 0xc86 <__divsf3_pse+0xae>
 c7e:	62 1b       	sub	r22, r18
 c80:	73 0b       	sbc	r23, r19
 c82:	84 0b       	sbc	r24, r20
 c84:	ba 0b       	sbc	r27, r26
 c86:	ee 1f       	adc	r30, r30
 c88:	88 f7       	brcc	.-30     	; 0xc6c <__divsf3_pse+0x94>
 c8a:	e0 95       	com	r30
 c8c:	08 95       	ret

00000c8e <__fixsfsi>:
 c8e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fixunssfsi>
 c92:	68 94       	set
 c94:	b1 11       	cpse	r27, r1
 c96:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 c9a:	08 95       	ret

00000c9c <__fixunssfsi>:
 c9c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_splitA>
 ca0:	88 f0       	brcs	.+34     	; 0xcc4 <__fixunssfsi+0x28>
 ca2:	9f 57       	subi	r25, 0x7F	; 127
 ca4:	98 f0       	brcs	.+38     	; 0xccc <__fixunssfsi+0x30>
 ca6:	b9 2f       	mov	r27, r25
 ca8:	99 27       	eor	r25, r25
 caa:	b7 51       	subi	r27, 0x17	; 23
 cac:	b0 f0       	brcs	.+44     	; 0xcda <__fixunssfsi+0x3e>
 cae:	e1 f0       	breq	.+56     	; 0xce8 <__fixunssfsi+0x4c>
 cb0:	66 0f       	add	r22, r22
 cb2:	77 1f       	adc	r23, r23
 cb4:	88 1f       	adc	r24, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	1a f0       	brmi	.+6      	; 0xcc0 <__fixunssfsi+0x24>
 cba:	ba 95       	dec	r27
 cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__fixunssfsi+0x14>
 cbe:	14 c0       	rjmp	.+40     	; 0xce8 <__fixunssfsi+0x4c>
 cc0:	b1 30       	cpi	r27, 0x01	; 1
 cc2:	91 f0       	breq	.+36     	; 0xce8 <__fixunssfsi+0x4c>
 cc4:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_zero>
 cc8:	b1 e0       	ldi	r27, 0x01	; 1
 cca:	08 95       	ret
 ccc:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_zero>
 cd0:	67 2f       	mov	r22, r23
 cd2:	78 2f       	mov	r23, r24
 cd4:	88 27       	eor	r24, r24
 cd6:	b8 5f       	subi	r27, 0xF8	; 248
 cd8:	39 f0       	breq	.+14     	; 0xce8 <__fixunssfsi+0x4c>
 cda:	b9 3f       	cpi	r27, 0xF9	; 249
 cdc:	cc f3       	brlt	.-14     	; 0xcd0 <__fixunssfsi+0x34>
 cde:	86 95       	lsr	r24
 ce0:	77 95       	ror	r23
 ce2:	67 95       	ror	r22
 ce4:	b3 95       	inc	r27
 ce6:	d9 f7       	brne	.-10     	; 0xcde <__fixunssfsi+0x42>
 ce8:	3e f4       	brtc	.+14     	; 0xcf8 <__fixunssfsi+0x5c>
 cea:	90 95       	com	r25
 cec:	80 95       	com	r24
 cee:	70 95       	com	r23
 cf0:	61 95       	neg	r22
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255
 cf4:	8f 4f       	sbci	r24, 0xFF	; 255
 cf6:	9f 4f       	sbci	r25, 0xFF	; 255
 cf8:	08 95       	ret

00000cfa <__floatunsisf>:
 cfa:	e8 94       	clt
 cfc:	09 c0       	rjmp	.+18     	; 0xd10 <__floatsisf+0x12>

00000cfe <__floatsisf>:
 cfe:	97 fb       	bst	r25, 7
 d00:	3e f4       	brtc	.+14     	; 0xd10 <__floatsisf+0x12>
 d02:	90 95       	com	r25
 d04:	80 95       	com	r24
 d06:	70 95       	com	r23
 d08:	61 95       	neg	r22
 d0a:	7f 4f       	sbci	r23, 0xFF	; 255
 d0c:	8f 4f       	sbci	r24, 0xFF	; 255
 d0e:	9f 4f       	sbci	r25, 0xFF	; 255
 d10:	99 23       	and	r25, r25
 d12:	a9 f0       	breq	.+42     	; 0xd3e <__floatsisf+0x40>
 d14:	f9 2f       	mov	r31, r25
 d16:	96 e9       	ldi	r25, 0x96	; 150
 d18:	bb 27       	eor	r27, r27
 d1a:	93 95       	inc	r25
 d1c:	f6 95       	lsr	r31
 d1e:	87 95       	ror	r24
 d20:	77 95       	ror	r23
 d22:	67 95       	ror	r22
 d24:	b7 95       	ror	r27
 d26:	f1 11       	cpse	r31, r1
 d28:	f8 cf       	rjmp	.-16     	; 0xd1a <__floatsisf+0x1c>
 d2a:	fa f4       	brpl	.+62     	; 0xd6a <__floatsisf+0x6c>
 d2c:	bb 0f       	add	r27, r27
 d2e:	11 f4       	brne	.+4      	; 0xd34 <__floatsisf+0x36>
 d30:	60 ff       	sbrs	r22, 0
 d32:	1b c0       	rjmp	.+54     	; 0xd6a <__floatsisf+0x6c>
 d34:	6f 5f       	subi	r22, 0xFF	; 255
 d36:	7f 4f       	sbci	r23, 0xFF	; 255
 d38:	8f 4f       	sbci	r24, 0xFF	; 255
 d3a:	9f 4f       	sbci	r25, 0xFF	; 255
 d3c:	16 c0       	rjmp	.+44     	; 0xd6a <__floatsisf+0x6c>
 d3e:	88 23       	and	r24, r24
 d40:	11 f0       	breq	.+4      	; 0xd46 <__floatsisf+0x48>
 d42:	96 e9       	ldi	r25, 0x96	; 150
 d44:	11 c0       	rjmp	.+34     	; 0xd68 <__floatsisf+0x6a>
 d46:	77 23       	and	r23, r23
 d48:	21 f0       	breq	.+8      	; 0xd52 <__floatsisf+0x54>
 d4a:	9e e8       	ldi	r25, 0x8E	; 142
 d4c:	87 2f       	mov	r24, r23
 d4e:	76 2f       	mov	r23, r22
 d50:	05 c0       	rjmp	.+10     	; 0xd5c <__floatsisf+0x5e>
 d52:	66 23       	and	r22, r22
 d54:	71 f0       	breq	.+28     	; 0xd72 <__floatsisf+0x74>
 d56:	96 e8       	ldi	r25, 0x86	; 134
 d58:	86 2f       	mov	r24, r22
 d5a:	70 e0       	ldi	r23, 0x00	; 0
 d5c:	60 e0       	ldi	r22, 0x00	; 0
 d5e:	2a f0       	brmi	.+10     	; 0xd6a <__floatsisf+0x6c>
 d60:	9a 95       	dec	r25
 d62:	66 0f       	add	r22, r22
 d64:	77 1f       	adc	r23, r23
 d66:	88 1f       	adc	r24, r24
 d68:	da f7       	brpl	.-10     	; 0xd60 <__floatsisf+0x62>
 d6a:	88 0f       	add	r24, r24
 d6c:	96 95       	lsr	r25
 d6e:	87 95       	ror	r24
 d70:	97 f9       	bld	r25, 7
 d72:	08 95       	ret
 d74:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_pscA>
 d78:	20 f0       	brcs	.+8      	; 0xd82 <__floatsisf+0x84>
 d7a:	19 f0       	breq	.+6      	; 0xd82 <__floatsisf+0x84>
 d7c:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscB>
 d80:	50 f4       	brcc	.+20     	; 0xd96 <fmod+0xc>
 d82:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_nan>
 d86:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>

00000d8a <fmod>:
 d8a:	e9 2f       	mov	r30, r25
 d8c:	0e 94 44 07 	call	0xe88	; 0xe88 <__fp_split3>
 d90:	88 f3       	brcs	.-30     	; 0xd74 <__floatsisf+0x76>
 d92:	55 23       	and	r21, r21
 d94:	b1 f3       	breq	.-20     	; 0xd82 <__floatsisf+0x84>
 d96:	e7 fb       	bst	r30, 7
 d98:	62 17       	cp	r22, r18
 d9a:	73 07       	cpc	r23, r19
 d9c:	84 07       	cpc	r24, r20
 d9e:	95 07       	cpc	r25, r21
 da0:	a8 f1       	brcs	.+106    	; 0xe0c <fmod+0x82>
 da2:	89 f3       	breq	.-30     	; 0xd86 <__floatsisf+0x88>
 da4:	e9 2f       	mov	r30, r25
 da6:	ff 27       	eor	r31, r31
 da8:	88 23       	and	r24, r24
 daa:	2a f0       	brmi	.+10     	; 0xdb6 <fmod+0x2c>
 dac:	31 97       	sbiw	r30, 0x01	; 1
 dae:	66 0f       	add	r22, r22
 db0:	77 1f       	adc	r23, r23
 db2:	88 1f       	adc	r24, r24
 db4:	da f7       	brpl	.-10     	; 0xdac <fmod+0x22>
 db6:	95 2f       	mov	r25, r21
 db8:	55 27       	eor	r21, r21
 dba:	44 23       	and	r20, r20
 dbc:	32 f0       	brmi	.+12     	; 0xdca <fmod+0x40>
 dbe:	91 50       	subi	r25, 0x01	; 1
 dc0:	50 40       	sbci	r21, 0x00	; 0
 dc2:	22 0f       	add	r18, r18
 dc4:	33 1f       	adc	r19, r19
 dc6:	44 1f       	adc	r20, r20
 dc8:	d2 f7       	brpl	.-12     	; 0xdbe <fmod+0x34>
 dca:	bb 27       	eor	r27, r27
 dcc:	e9 1b       	sub	r30, r25
 dce:	f5 0b       	sbc	r31, r21
 dd0:	62 1b       	sub	r22, r18
 dd2:	73 0b       	sbc	r23, r19
 dd4:	84 0b       	sbc	r24, r20
 dd6:	b1 09       	sbc	r27, r1
 dd8:	b1 f2       	breq	.-84     	; 0xd86 <__floatsisf+0x88>
 dda:	22 f4       	brpl	.+8      	; 0xde4 <fmod+0x5a>
 ddc:	62 0f       	add	r22, r18
 dde:	73 1f       	adc	r23, r19
 de0:	84 1f       	adc	r24, r20
 de2:	b1 1d       	adc	r27, r1
 de4:	31 97       	sbiw	r30, 0x01	; 1
 de6:	2a f0       	brmi	.+10     	; 0xdf2 <fmod+0x68>
 de8:	66 0f       	add	r22, r22
 dea:	77 1f       	adc	r23, r23
 dec:	88 1f       	adc	r24, r24
 dee:	bb 1f       	adc	r27, r27
 df0:	ef cf       	rjmp	.-34     	; 0xdd0 <fmod+0x46>
 df2:	91 50       	subi	r25, 0x01	; 1
 df4:	50 40       	sbci	r21, 0x00	; 0
 df6:	62 f0       	brmi	.+24     	; 0xe10 <fmod+0x86>
 df8:	41 f0       	breq	.+16     	; 0xe0a <fmod+0x80>
 dfa:	88 23       	and	r24, r24
 dfc:	32 f0       	brmi	.+12     	; 0xe0a <fmod+0x80>
 dfe:	66 0f       	add	r22, r22
 e00:	77 1f       	adc	r23, r23
 e02:	88 1f       	adc	r24, r24
 e04:	91 50       	subi	r25, 0x01	; 1
 e06:	50 40       	sbci	r21, 0x00	; 0
 e08:	c1 f7       	brne	.-16     	; 0xdfa <fmod+0x70>
 e0a:	93 95       	inc	r25
 e0c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_mpack>
 e10:	86 95       	lsr	r24
 e12:	77 95       	ror	r23
 e14:	67 95       	ror	r22
 e16:	9f 5f       	subi	r25, 0xFF	; 255
 e18:	d9 f7       	brne	.-10     	; 0xe10 <fmod+0x86>
 e1a:	f7 cf       	rjmp	.-18     	; 0xe0a <fmod+0x80>

00000e1c <__fp_inf>:
 e1c:	97 f9       	bld	r25, 7
 e1e:	9f 67       	ori	r25, 0x7F	; 127
 e20:	80 e8       	ldi	r24, 0x80	; 128
 e22:	70 e0       	ldi	r23, 0x00	; 0
 e24:	60 e0       	ldi	r22, 0x00	; 0
 e26:	08 95       	ret

00000e28 <__fp_mpack>:
 e28:	9f 3f       	cpi	r25, 0xFF	; 255
 e2a:	31 f0       	breq	.+12     	; 0xe38 <__fp_mpack_finite+0xc>

00000e2c <__fp_mpack_finite>:
 e2c:	91 50       	subi	r25, 0x01	; 1
 e2e:	20 f4       	brcc	.+8      	; 0xe38 <__fp_mpack_finite+0xc>
 e30:	87 95       	ror	r24
 e32:	77 95       	ror	r23
 e34:	67 95       	ror	r22
 e36:	b7 95       	ror	r27
 e38:	88 0f       	add	r24, r24
 e3a:	91 1d       	adc	r25, r1
 e3c:	96 95       	lsr	r25
 e3e:	87 95       	ror	r24
 e40:	97 f9       	bld	r25, 7
 e42:	08 95       	ret

00000e44 <__fp_nan>:
 e44:	9f ef       	ldi	r25, 0xFF	; 255
 e46:	80 ec       	ldi	r24, 0xC0	; 192
 e48:	08 95       	ret

00000e4a <__fp_pscA>:
 e4a:	00 24       	eor	r0, r0
 e4c:	0a 94       	dec	r0
 e4e:	16 16       	cp	r1, r22
 e50:	17 06       	cpc	r1, r23
 e52:	18 06       	cpc	r1, r24
 e54:	09 06       	cpc	r0, r25
 e56:	08 95       	ret

00000e58 <__fp_pscB>:
 e58:	00 24       	eor	r0, r0
 e5a:	0a 94       	dec	r0
 e5c:	12 16       	cp	r1, r18
 e5e:	13 06       	cpc	r1, r19
 e60:	14 06       	cpc	r1, r20
 e62:	05 06       	cpc	r0, r21
 e64:	08 95       	ret

00000e66 <__fp_round>:
 e66:	09 2e       	mov	r0, r25
 e68:	03 94       	inc	r0
 e6a:	00 0c       	add	r0, r0
 e6c:	11 f4       	brne	.+4      	; 0xe72 <__fp_round+0xc>
 e6e:	88 23       	and	r24, r24
 e70:	52 f0       	brmi	.+20     	; 0xe86 <__fp_round+0x20>
 e72:	bb 0f       	add	r27, r27
 e74:	40 f4       	brcc	.+16     	; 0xe86 <__fp_round+0x20>
 e76:	bf 2b       	or	r27, r31
 e78:	11 f4       	brne	.+4      	; 0xe7e <__fp_round+0x18>
 e7a:	60 ff       	sbrs	r22, 0
 e7c:	04 c0       	rjmp	.+8      	; 0xe86 <__fp_round+0x20>
 e7e:	6f 5f       	subi	r22, 0xFF	; 255
 e80:	7f 4f       	sbci	r23, 0xFF	; 255
 e82:	8f 4f       	sbci	r24, 0xFF	; 255
 e84:	9f 4f       	sbci	r25, 0xFF	; 255
 e86:	08 95       	ret

00000e88 <__fp_split3>:
 e88:	57 fd       	sbrc	r21, 7
 e8a:	90 58       	subi	r25, 0x80	; 128
 e8c:	44 0f       	add	r20, r20
 e8e:	55 1f       	adc	r21, r21
 e90:	59 f0       	breq	.+22     	; 0xea8 <__fp_splitA+0x10>
 e92:	5f 3f       	cpi	r21, 0xFF	; 255
 e94:	71 f0       	breq	.+28     	; 0xeb2 <__fp_splitA+0x1a>
 e96:	47 95       	ror	r20

00000e98 <__fp_splitA>:
 e98:	88 0f       	add	r24, r24
 e9a:	97 fb       	bst	r25, 7
 e9c:	99 1f       	adc	r25, r25
 e9e:	61 f0       	breq	.+24     	; 0xeb8 <__fp_splitA+0x20>
 ea0:	9f 3f       	cpi	r25, 0xFF	; 255
 ea2:	79 f0       	breq	.+30     	; 0xec2 <__fp_splitA+0x2a>
 ea4:	87 95       	ror	r24
 ea6:	08 95       	ret
 ea8:	12 16       	cp	r1, r18
 eaa:	13 06       	cpc	r1, r19
 eac:	14 06       	cpc	r1, r20
 eae:	55 1f       	adc	r21, r21
 eb0:	f2 cf       	rjmp	.-28     	; 0xe96 <__fp_split3+0xe>
 eb2:	46 95       	lsr	r20
 eb4:	f1 df       	rcall	.-30     	; 0xe98 <__fp_splitA>
 eb6:	08 c0       	rjmp	.+16     	; 0xec8 <__fp_splitA+0x30>
 eb8:	16 16       	cp	r1, r22
 eba:	17 06       	cpc	r1, r23
 ebc:	18 06       	cpc	r1, r24
 ebe:	99 1f       	adc	r25, r25
 ec0:	f1 cf       	rjmp	.-30     	; 0xea4 <__fp_splitA+0xc>
 ec2:	86 95       	lsr	r24
 ec4:	71 05       	cpc	r23, r1
 ec6:	61 05       	cpc	r22, r1
 ec8:	08 94       	sec
 eca:	08 95       	ret

00000ecc <__fp_zero>:
 ecc:	e8 94       	clt

00000ece <__fp_szero>:
 ece:	bb 27       	eor	r27, r27
 ed0:	66 27       	eor	r22, r22
 ed2:	77 27       	eor	r23, r23
 ed4:	cb 01       	movw	r24, r22
 ed6:	97 f9       	bld	r25, 7
 ed8:	08 95       	ret

00000eda <__mulsf3>:
 eda:	0e 94 80 07 	call	0xf00	; 0xf00 <__mulsf3x>
 ede:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_round>
 ee2:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_pscA>
 ee6:	38 f0       	brcs	.+14     	; 0xef6 <__mulsf3+0x1c>
 ee8:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscB>
 eec:	20 f0       	brcs	.+8      	; 0xef6 <__mulsf3+0x1c>
 eee:	95 23       	and	r25, r21
 ef0:	11 f0       	breq	.+4      	; 0xef6 <__mulsf3+0x1c>
 ef2:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
 ef6:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_nan>
 efa:	11 24       	eor	r1, r1
 efc:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>

00000f00 <__mulsf3x>:
 f00:	0e 94 44 07 	call	0xe88	; 0xe88 <__fp_split3>
 f04:	70 f3       	brcs	.-36     	; 0xee2 <__mulsf3+0x8>

00000f06 <__mulsf3_pse>:
 f06:	95 9f       	mul	r25, r21
 f08:	c1 f3       	breq	.-16     	; 0xefa <__mulsf3+0x20>
 f0a:	95 0f       	add	r25, r21
 f0c:	50 e0       	ldi	r21, 0x00	; 0
 f0e:	55 1f       	adc	r21, r21
 f10:	62 9f       	mul	r22, r18
 f12:	f0 01       	movw	r30, r0
 f14:	72 9f       	mul	r23, r18
 f16:	bb 27       	eor	r27, r27
 f18:	f0 0d       	add	r31, r0
 f1a:	b1 1d       	adc	r27, r1
 f1c:	63 9f       	mul	r22, r19
 f1e:	aa 27       	eor	r26, r26
 f20:	f0 0d       	add	r31, r0
 f22:	b1 1d       	adc	r27, r1
 f24:	aa 1f       	adc	r26, r26
 f26:	64 9f       	mul	r22, r20
 f28:	66 27       	eor	r22, r22
 f2a:	b0 0d       	add	r27, r0
 f2c:	a1 1d       	adc	r26, r1
 f2e:	66 1f       	adc	r22, r22
 f30:	82 9f       	mul	r24, r18
 f32:	22 27       	eor	r18, r18
 f34:	b0 0d       	add	r27, r0
 f36:	a1 1d       	adc	r26, r1
 f38:	62 1f       	adc	r22, r18
 f3a:	73 9f       	mul	r23, r19
 f3c:	b0 0d       	add	r27, r0
 f3e:	a1 1d       	adc	r26, r1
 f40:	62 1f       	adc	r22, r18
 f42:	83 9f       	mul	r24, r19
 f44:	a0 0d       	add	r26, r0
 f46:	61 1d       	adc	r22, r1
 f48:	22 1f       	adc	r18, r18
 f4a:	74 9f       	mul	r23, r20
 f4c:	33 27       	eor	r19, r19
 f4e:	a0 0d       	add	r26, r0
 f50:	61 1d       	adc	r22, r1
 f52:	23 1f       	adc	r18, r19
 f54:	84 9f       	mul	r24, r20
 f56:	60 0d       	add	r22, r0
 f58:	21 1d       	adc	r18, r1
 f5a:	82 2f       	mov	r24, r18
 f5c:	76 2f       	mov	r23, r22
 f5e:	6a 2f       	mov	r22, r26
 f60:	11 24       	eor	r1, r1
 f62:	9f 57       	subi	r25, 0x7F	; 127
 f64:	50 40       	sbci	r21, 0x00	; 0
 f66:	9a f0       	brmi	.+38     	; 0xf8e <__mulsf3_pse+0x88>
 f68:	f1 f0       	breq	.+60     	; 0xfa6 <__mulsf3_pse+0xa0>
 f6a:	88 23       	and	r24, r24
 f6c:	4a f0       	brmi	.+18     	; 0xf80 <__mulsf3_pse+0x7a>
 f6e:	ee 0f       	add	r30, r30
 f70:	ff 1f       	adc	r31, r31
 f72:	bb 1f       	adc	r27, r27
 f74:	66 1f       	adc	r22, r22
 f76:	77 1f       	adc	r23, r23
 f78:	88 1f       	adc	r24, r24
 f7a:	91 50       	subi	r25, 0x01	; 1
 f7c:	50 40       	sbci	r21, 0x00	; 0
 f7e:	a9 f7       	brne	.-22     	; 0xf6a <__mulsf3_pse+0x64>
 f80:	9e 3f       	cpi	r25, 0xFE	; 254
 f82:	51 05       	cpc	r21, r1
 f84:	80 f0       	brcs	.+32     	; 0xfa6 <__mulsf3_pse+0xa0>
 f86:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
 f8a:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 f8e:	5f 3f       	cpi	r21, 0xFF	; 255
 f90:	e4 f3       	brlt	.-8      	; 0xf8a <__mulsf3_pse+0x84>
 f92:	98 3e       	cpi	r25, 0xE8	; 232
 f94:	d4 f3       	brlt	.-12     	; 0xf8a <__mulsf3_pse+0x84>
 f96:	86 95       	lsr	r24
 f98:	77 95       	ror	r23
 f9a:	67 95       	ror	r22
 f9c:	b7 95       	ror	r27
 f9e:	f7 95       	ror	r31
 fa0:	e7 95       	ror	r30
 fa2:	9f 5f       	subi	r25, 0xFF	; 255
 fa4:	c1 f7       	brne	.-16     	; 0xf96 <__mulsf3_pse+0x90>
 fa6:	fe 2b       	or	r31, r30
 fa8:	88 0f       	add	r24, r24
 faa:	91 1d       	adc	r25, r1
 fac:	96 95       	lsr	r25
 fae:	87 95       	ror	r24
 fb0:	97 f9       	bld	r25, 7
 fb2:	08 95       	ret

00000fb4 <_exit>:
 fb4:	f8 94       	cli

00000fb6 <__stop_program>:
 fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <__stop_program>
