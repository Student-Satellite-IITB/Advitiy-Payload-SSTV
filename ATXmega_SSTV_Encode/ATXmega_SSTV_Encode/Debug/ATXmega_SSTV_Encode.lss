
ATXmega_SSTV_Encode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000103c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  0000103c  000010d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00802004  00802004  000010d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000742e  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bb2  00000000  00000000  000087d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001636  00000000  00000000  0000c384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  0000d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b5f  00000000  00000000  0000dffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002066  00000000  00000000  00011b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00013bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_16>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      68:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_26>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ec e3       	ldi	r30, 0x3C	; 60
     214:	f0 e1       	ldi	r31, 0x10	; 16
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a4 30       	cpi	r26, 0x04	; 4
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a4 e0       	ldi	r26, 0x04	; 4
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a4 33       	cpi	r26, 0x34	; 52
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
     23a:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Set_AD9833>:

#include "AD9833.h"
#include "spi_driver.h"

void Set_AD9833(float frequency, unsigned int phase) // Zero amplitude time : 39 miroseconds
{
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	8a 01       	movw	r16, r20
	long FreqReg = (((float)frequency)*pow(2,28))/(float)FMCLK;	  //Calculate frequency to be sent to AD9833
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e8       	ldi	r20, 0x80	; 128
     25a:	5d e4       	ldi	r21, 0x4D	; 77
     25c:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     260:	20 e2       	ldi	r18, 0x20	; 32
     262:	3c eb       	ldi	r19, 0xBC	; 188
     264:	4e eb       	ldi	r20, 0xBE	; 190
     266:	5b e4       	ldi	r21, 0x4B	; 75
     268:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     26c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);				  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
     270:	6b 01       	movw	r12, r22
     272:	7c 01       	movw	r14, r24
     274:	cc 24       	eor	r12, r12
     276:	20 ec       	ldi	r18, 0xC0	; 192
     278:	d2 22       	and	r13, r18
     27a:	2f e0       	ldi	r18, 0x0F	; 15
     27c:	f2 22       	and	r15, r18
     27e:	0b 2e       	mov	r0, r27
     280:	be e0       	ldi	r27, 0x0E	; 14
     282:	f5 94       	asr	r15
     284:	e7 94       	ror	r14
     286:	d7 94       	ror	r13
     288:	c7 94       	ror	r12
     28a:	ba 95       	dec	r27
     28c:	d1 f7       	brne	.-12     	; 0x282 <Set_AD9833+0x40>
     28e:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));						  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB
     290:	eb 01       	movw	r28, r22
     292:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;												  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     											  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_send16(0x2100);											  //Define waveform and set reset bit
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	91 e2       	ldi	r25, 0x21	; 33
     298:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
	SPI_send16(LSB);											  //Write LSBs
     29c:	ce 01       	movw	r24, r28
     29e:	90 64       	ori	r25, 0x40	; 64
     2a0:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
	SPI_send16(MSB);											  //Write MSBs
     2a4:	c6 01       	movw	r24, r12
     2a6:	90 64       	ori	r25, 0x40	; 64
     2a8:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
	phase&=0x0FFF;
     2ac:	c8 01       	movw	r24, r16
     2ae:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;												  //Set Phase write enable bytes
	//SPI_write16(0xC000);										  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_send16(phase);											  //Write Phase bytes
     2b0:	90 6c       	ori	r25, 0xC0	; 192
     2b2:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
	SPI_send16(0x2000);											  //Unset reset bit
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e2       	ldi	r25, 0x20	; 32
     2ba:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	08 95       	ret

000002d0 <getphase>:

unsigned int getphase(float prevPhase,float nextFreq, float prevTime)
{
     2d0:	4f 92       	push	r4
     2d2:	5f 92       	push	r5
     2d4:	6f 92       	push	r6
     2d6:	7f 92       	push	r7
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <getphase+0x22>
     2f2:	1f 92       	push	r1
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	2b 01       	movw	r4, r22
     2fa:	3c 01       	movw	r6, r24
     2fc:	49 01       	movw	r8, r18
     2fe:	5a 01       	movw	r10, r20
     300:	67 01       	movw	r12, r14
     302:	78 01       	movw	r14, r16
	prevTime/=1000000;																	//Convert time to microseconds
	prevPhase/=2048/PI;																	//Change scaling of Phase as required by AD9833
	float returnPhase=((fmod(prevTime,(1/nextFreq))*2*PI*nextFreq)+prevPhase)*2048/PI;	//Calculate phase completed by previous wave
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	80 e8       	ldi	r24, 0x80	; 128
     30a:	9f e3       	ldi	r25, 0x3F	; 63
     30c:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     310:	69 83       	std	Y+1, r22	; 0x01
     312:	7a 83       	std	Y+2, r23	; 0x02
     314:	8b 83       	std	Y+3, r24	; 0x03
     316:	9c 83       	std	Y+4, r25	; 0x04
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	34 e2       	ldi	r19, 0x24	; 36
     31c:	44 e7       	ldi	r20, 0x74	; 116
     31e:	59 e4       	ldi	r21, 0x49	; 73
     320:	c7 01       	movw	r24, r14
     322:	b6 01       	movw	r22, r12
     324:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     328:	29 81       	ldd	r18, Y+1	; 0x01
     32a:	3a 81       	ldd	r19, Y+2	; 0x02
     32c:	4b 81       	ldd	r20, Y+3	; 0x03
     32e:	5c 81       	ldd	r21, Y+4	; 0x04
     330:	0e 94 df 06 	call	0xdbe	; 0xdbe <fmod>
	return (unsigned int) returnPhase;													//Return in 16 bit format
     334:	9b 01       	movw	r18, r22
     336:	ac 01       	movw	r20, r24
     338:	0e 94 83 05 	call	0xb06	; 0xb06 <__addsf3>
     33c:	20 ed       	ldi	r18, 0xD0	; 208
     33e:	3f e0       	ldi	r19, 0x0F	; 15
     340:	49 e4       	ldi	r20, 0x49	; 73
     342:	50 e4       	ldi	r21, 0x40	; 64
     344:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     348:	a5 01       	movw	r20, r10
     34a:	94 01       	movw	r18, r8
     34c:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     350:	6b 01       	movw	r12, r22
     352:	7c 01       	movw	r14, r24
     354:	2c e8       	ldi	r18, 0x8C	; 140
     356:	39 ef       	ldi	r19, 0xF9	; 249
     358:	42 e2       	ldi	r20, 0x22	; 34
     35a:	54 e4       	ldi	r21, 0x44	; 68
     35c:	c3 01       	movw	r24, r6
     35e:	b2 01       	movw	r22, r4
     360:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	0e 94 83 05 	call	0xb06	; 0xb06 <__addsf3>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	55 e4       	ldi	r21, 0x45	; 69
     378:	0e 94 87 07 	call	0xf0e	; 0xf0e <__mulsf3>
     37c:	20 ed       	ldi	r18, 0xD0	; 208
     37e:	3f e0       	ldi	r19, 0x0F	; 15
     380:	49 e4       	ldi	r20, 0x49	; 73
     382:	50 e4       	ldi	r21, 0x40	; 64
     384:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     388:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fixunssfsi>
}
     38c:	cb 01       	movw	r24, r22
     38e:	24 96       	adiw	r28, 0x04	; 4
     390:	cd bf       	out	0x3d, r28	; 61
     392:	de bf       	out	0x3e, r29	; 62
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	6f 90       	pop	r6
     3b0:	5f 90       	pop	r5
     3b2:	4f 90       	pop	r4
     3b4:	08 95       	ret

000003b6 <main>:
#include "TC_driver.h"
#include "PD90.h"

int main(void)
{
	setUp16MhzExternalOsc();	//Required for setting 16Mhz frequency
     3b6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <setUp16MhzExternalOsc>
	SetUsart();
     3ba:	0e 94 27 05 	call	0xa4e	; 0xa4e <SetUsart>
	SSTVinit();
     3be:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SSTVinit>
	SSTVbegin();
     3c2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SSTVbegin>
     3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <main+0x10>

000003c8 <SSTVinit>:
volatile uint8_t sectorAdress=0, pageAddress=0, byteAddress=0;


void SSTVinit()
{
	SetClock0();				//Initialize 532 us interrupts
     3c8:	0e 94 df 04 	call	0x9be	; 0x9be <SetClock0>
	SPI_Master_init();			//Initialize SPI for AD9833
     3cc:	0e 94 80 04 	call	0x900	; 0x900 <SPI_Master_init>
	//eepromInit();				//Initialize SPI for EEPROM
	SPI_send16(0x100);			//Reset AD9833
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
	Set_AD9833(0,0);
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	cb 01       	movw	r24, r22
     3e2:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e6:	2f ef       	ldi	r18, 0xFF	; 255
     3e8:	81 ee       	ldi	r24, 0xE1	; 225
     3ea:	94 e0       	ldi	r25, 0x04	; 4
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	80 40       	sbci	r24, 0x00	; 0
     3f0:	90 40       	sbci	r25, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <SSTVinit+0x24>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <SSTVinit+0x2e>
     3f6:	00 00       	nop
	_delay_ms(100);
	cli();
     3f8:	f8 94       	cli
     3fa:	08 95       	ret

000003fc <SSTVbegin>:
}

void SSTVbegin()
{
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	81 ee       	ldi	r24, 0xE1	; 225
     408:	94 e0       	ldi	r25, 0x04	; 4
     40a:	21 50       	subi	r18, 0x01	; 1
     40c:	80 40       	sbci	r24, 0x00	; 0
     40e:	90 40       	sbci	r25, 0x00	; 0
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     414:	00 00       	nop
	//VIS Code
	{	_delay_ms(100);
		Set_AD9833(1900,0);	_delay_ms(300);	//leader tone
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e8       	ldi	r23, 0x80	; 128
     41e:	8d ee       	ldi	r24, 0xED	; 237
     420:	94 e4       	ldi	r25, 0x44	; 68
     422:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
     426:	ef ef       	ldi	r30, 0xFF	; 255
     428:	f5 ea       	ldi	r31, 0xA5	; 165
     42a:	2e e0       	ldi	r18, 0x0E	; 14
     42c:	e1 50       	subi	r30, 0x01	; 1
     42e:	f0 40       	sbci	r31, 0x00	; 0
     430:	20 40       	sbci	r18, 0x00	; 0
     432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     436:	00 00       	nop
		Set_AD9833(1200,0);	_delay_ms(10);	//break
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	86 e9       	ldi	r24, 0x96	; 150
     442:	94 e4       	ldi	r25, 0x44	; 68
     444:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
     448:	8f e3       	ldi	r24, 0x3F	; 63
     44a:	9c e9       	ldi	r25, 0x9C	; 156
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     452:	00 00       	nop
		Set_AD9833(1900,0);	_delay_ms(300);	//leader
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e8       	ldi	r23, 0x80	; 128
     45c:	8d ee       	ldi	r24, 0xED	; 237
     45e:	94 e4       	ldi	r25, 0x44	; 68
     460:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
     464:	9f ef       	ldi	r25, 0xFF	; 255
     466:	e5 ea       	ldi	r30, 0xA5	; 165
     468:	fe e0       	ldi	r31, 0x0E	; 14
     46a:	91 50       	subi	r25, 0x01	; 1
     46c:	e0 40       	sbci	r30, 0x00	; 0
     46e:	f0 40       	sbci	r31, 0x00	; 0
     470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     474:	00 00       	nop
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//VIS start bit
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	86 e9       	ldi	r24, 0x96	; 150
     480:	94 e4       	ldi	r25, 0x44	; 68
     482:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
     486:	2f e7       	ldi	r18, 0x7F	; 127
     488:	8a e6       	ldi	r24, 0x6A	; 106
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     496:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     498:	e3 e0       	ldi	r30, 0x03	; 3
     49a:	ff e0       	ldi	r31, 0x0F	; 15
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a2:	00 00       	nop
		//PD90 VIS code = 99d = 0b1100011
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 0=1
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e8       	ldi	r23, 0x80	; 128
     4ac:	89 e8       	ldi	r24, 0x89	; 137
     4ae:	94 e4       	ldi	r25, 0x44	; 68
     4b0:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b4:	ff e7       	ldi	r31, 0x7F	; 127
     4b6:	2a e6       	ldi	r18, 0x6A	; 106
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	f1 50       	subi	r31, 0x01	; 1
     4bc:	20 40       	sbci	r18, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c6:	e3 e0       	ldi	r30, 0x03	; 3
     4c8:	ff e0       	ldi	r31, 0x0F	; 15
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d0:	00 00       	nop
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 1=1
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e8       	ldi	r23, 0x80	; 128
     4da:	89 e8       	ldi	r24, 0x89	; 137
     4dc:	94 e4       	ldi	r25, 0x44	; 68
     4de:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e2:	ff e7       	ldi	r31, 0x7F	; 127
     4e4:	2a e6       	ldi	r18, 0x6A	; 106
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	f1 50       	subi	r31, 0x01	; 1
     4ea:	20 40       	sbci	r18, 0x00	; 0
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f4:	e3 e0       	ldi	r30, 0x03	; 3
     4f6:	ff e0       	ldi	r31, 0x0F	; 15
     4f8:	31 97       	sbiw	r30, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fe:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);  _delay_us(961);	//bit 2=0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e8       	ldi	r23, 0x80	; 128
     508:	82 ea       	ldi	r24, 0xA2	; 162
     50a:	94 e4       	ldi	r25, 0x44	; 68
     50c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     510:	ff e7       	ldi	r31, 0x7F	; 127
     512:	2a e6       	ldi	r18, 0x6A	; 106
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	f1 50       	subi	r31, 0x01	; 1
     518:	20 40       	sbci	r18, 0x00	; 0
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	e1 f7       	brne	.-8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     520:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	e3 e0       	ldi	r30, 0x03	; 3
     524:	ff e0       	ldi	r31, 0x0F	; 15
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     52c:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//bit 3=0
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e8       	ldi	r23, 0x80	; 128
     536:	82 ea       	ldi	r24, 0xA2	; 162
     538:	94 e4       	ldi	r25, 0x44	; 68
     53a:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53e:	ff e7       	ldi	r31, 0x7F	; 127
     540:	2a e6       	ldi	r18, 0x6A	; 106
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	f1 50       	subi	r31, 0x01	; 1
     546:	20 40       	sbci	r18, 0x00	; 0
     548:	80 40       	sbci	r24, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     550:	e3 e0       	ldi	r30, 0x03	; 3
     552:	ff e0       	ldi	r31, 0x0F	; 15
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     558:	00 c0       	rjmp	.+0      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     55a:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//bit 4=0
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	70 e8       	ldi	r23, 0x80	; 128
     564:	82 ea       	ldi	r24, 0xA2	; 162
     566:	94 e4       	ldi	r25, 0x44	; 68
     568:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56c:	ff e7       	ldi	r31, 0x7F	; 127
     56e:	2a e6       	ldi	r18, 0x6A	; 106
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	f1 50       	subi	r31, 0x01	; 1
     574:	20 40       	sbci	r18, 0x00	; 0
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     57c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57e:	e3 e0       	ldi	r30, 0x03	; 3
     580:	ff e0       	ldi	r31, 0x0F	; 15
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     586:	00 c0       	rjmp	.+0      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     588:	00 00       	nop
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 5=1
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e8       	ldi	r23, 0x80	; 128
     592:	89 e8       	ldi	r24, 0x89	; 137
     594:	94 e4       	ldi	r25, 0x44	; 68
     596:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59a:	ff e7       	ldi	r31, 0x7F	; 127
     59c:	2a e6       	ldi	r18, 0x6A	; 106
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	f1 50       	subi	r31, 0x01	; 1
     5a2:	20 40       	sbci	r18, 0x00	; 0
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5aa:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ac:	e3 e0       	ldi	r30, 0x03	; 3
     5ae:	ff e0       	ldi	r31, 0x0F	; 15
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b6:	00 00       	nop
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 6=1
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e8       	ldi	r23, 0x80	; 128
     5c0:	89 e8       	ldi	r24, 0x89	; 137
     5c2:	94 e4       	ldi	r25, 0x44	; 68
     5c4:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c8:	ff e7       	ldi	r31, 0x7F	; 127
     5ca:	2a e6       	ldi	r18, 0x6A	; 106
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	f1 50       	subi	r31, 0x01	; 1
     5d0:	20 40       	sbci	r18, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     5d8:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	e3 e0       	ldi	r30, 0x03	; 3
     5dc:	ff e0       	ldi	r31, 0x0F	; 15
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5e4:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//Parity bit
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	70 e8       	ldi	r23, 0x80	; 128
     5ee:	82 ea       	ldi	r24, 0xA2	; 162
     5f0:	94 e4       	ldi	r25, 0x44	; 68
     5f2:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	ff e7       	ldi	r31, 0x7F	; 127
     5f8:	2a e6       	ldi	r18, 0x6A	; 106
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	f1 50       	subi	r31, 0x01	; 1
     5fe:	20 40       	sbci	r18, 0x00	; 0
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	e1 f7       	brne	.-8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     604:	00 c0       	rjmp	.+0      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     606:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     608:	e3 e0       	ldi	r30, 0x03	; 3
     60a:	ff e0       	ldi	r31, 0x0F	; 15
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     610:	00 c0       	rjmp	.+0      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     612:	00 00       	nop
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	86 e9       	ldi	r24, 0x96	; 150
     61e:	94 e4       	ldi	r25, 0x44	; 68
     620:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     624:	ff e7       	ldi	r31, 0x7F	; 127
     626:	2a e6       	ldi	r18, 0x6A	; 106
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	f1 50       	subi	r31, 0x01	; 1
     62c:	20 40       	sbci	r18, 0x00	; 0
     62e:	80 40       	sbci	r24, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     632:	00 c0       	rjmp	.+0      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     634:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     636:	e3 e0       	ldi	r30, 0x03	; 3
     638:	ff e0       	ldi	r31, 0x0F	; 15
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     640:	00 00       	nop
     642:	c1 e8       	ldi	r28, 0x81	; 129
     644:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Set_AD9833(1200,0); _delay_ms(19); _delay_us(952);	//Sync Pulse
		Set_AD9833(1500,0); _delay_ms(2); _delay_us(32);	//Porch
		//Pixel Interrupt sequence
		pixelCount=0;
		TCC0.CNT=0;
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	18 e0       	ldi	r17, 0x08	; 8
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
	}
	//Image Data
	for(int lineSet=0; lineSet<=128; lineSet++)
	{
		Set_AD9833(1200,0); _delay_ms(19); _delay_us(952);	//Sync Pulse
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	86 e9       	ldi	r24, 0x96	; 150
     654:	94 e4       	ldi	r25, 0x44	; 68
     656:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65a:	ff e7       	ldi	r31, 0x7F	; 127
     65c:	2d ee       	ldi	r18, 0xED	; 237
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	f1 50       	subi	r31, 0x01	; 1
     662:	20 40       	sbci	r18, 0x00	; 0
     664:	80 40       	sbci	r24, 0x00	; 0
     666:	e1 f7       	brne	.-8      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     668:	00 c0       	rjmp	.+0      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     66a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66c:	ef ed       	ldi	r30, 0xDF	; 223
     66e:	fe e0       	ldi	r31, 0x0E	; 14
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     674:	00 c0       	rjmp	.+0      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     676:	00 00       	nop
		Set_AD9833(1500,0); _delay_ms(2); _delay_us(32);	//Porch
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e8       	ldi	r23, 0x80	; 128
     680:	8b eb       	ldi	r24, 0xBB	; 187
     682:	94 e4       	ldi	r25, 0x44	; 68
     684:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     688:	8f e3       	ldi	r24, 0x3F	; 63
     68a:	9f e1       	ldi	r25, 0x1F	; 31
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     690:	00 c0       	rjmp	.+0      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     692:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     694:	9a ea       	ldi	r25, 0xAA	; 170
     696:	9a 95       	dec	r25
     698:	f1 f7       	brne	.-4      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
		//Pixel Interrupt sequence
		pixelCount=0;
     69c:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
     6a0:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <__data_end+0x1>
		TCC0.CNT=0;
     6a4:	f8 01       	movw	r30, r16
     6a6:	10 a2       	std	Z+32, r1	; 0x20
     6a8:	11 a2       	std	Z+33, r1	; 0x21
		sei();
     6aa:	78 94       	sei
		while(pixelCount<=1280);
     6ac:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
     6b0:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	95 40       	sbci	r25, 0x05	; 5
     6b8:	cc f3       	brlt	.-14     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
		cli();
     6ba:	f8 94       	cli
     6bc:	21 97       	sbiw	r28, 0x01	; 1
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 6=1
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//Parity bit
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
	}
	//Image Data
	for(int lineSet=0; lineSet<=128; lineSet++)
     6be:	29 f6       	brne	.-118    	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
		TCC0.CNT=0;
		sei();
		while(pixelCount<=1280);
		cli();
	}
	SPI_send16(0x100);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 b0 04 	call	0x960	; 0x960 <SPI_send16>
	Set_AD9833(0,0);
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	cb 01       	movw	r24, r22
     6d2:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d6:	2f ef       	ldi	r18, 0xFF	; 255
     6d8:	81 ee       	ldi	r24, 0xE1	; 225
     6da:	94 e0       	ldi	r25, 0x04	; 4
     6dc:	21 50       	subi	r18, 0x01	; 1
     6de:	80 40       	sbci	r24, 0x00	; 0
     6e0:	90 40       	sbci	r25, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e6:	00 00       	nop
	_delay_ms(100);
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <__vector_16>:

ISR(TCC0_CCA_vect)
{
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	0b b6       	in	r0, 0x3b	; 59
     6fe:	0f 92       	push	r0
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ef 93       	push	r30
     72a:	ff 93       	push	r31
	Set_AD9833(frequency,phase);											//Set waveform generator with frequency and phase calculated in previous cycle
     72c:	c0 91 0a 20 	lds	r28, 0x200A	; 0x80200a <phase>
     730:	d0 91 0b 20 	lds	r29, 0x200B	; 0x80200b <phase+0x1>
     734:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     738:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     73c:	07 2e       	mov	r0, r23
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	0e 94 99 06 	call	0xd32	; 0xd32 <__floatsisf>
     748:	ae 01       	movw	r20, r28
     74a:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	prevPhase=phase;														//Save previous wave's ending phase for next phase calculation
     74e:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <phase>
     752:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <phase+0x1>
     756:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <prevPhase>
     75a:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <prevPhase+0x1>
	prevFreq=frequency;														//Save previous wave's ending frequency for next phase calculation
     75e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     762:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     766:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <prevFreq>
     76a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <prevFreq+0x1>
	//	frequency = 1500 + (frequency* 3.1372549);								//Converting one byte color data to 2 byte frequency
	// Code for generating single color image
	// 	if(pixelCount==319) frequency = 2253;
	// 	else if(pixelCount==639) frequency = 1782;
	// 	else if(pixelCount==959) frequency = 1757;
	if(((pixelCount)%20)==0)
     76e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
     772:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
     776:	64 e1       	ldi	r22, 0x14	; 20
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
     77e:	89 2b       	or	r24, r25
     780:	09 f0       	breq	.+2      	; 0x784 <__vector_16+0x92>
     782:	67 c0       	rjmp	.+206    	; 0x852 <__vector_16+0x160>
	{
		int t = (pixelCount)/20;
     784:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
     788:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
     78c:	64 e1       	ldi	r22, 0x14	; 20
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__divmodhi4>
     794:	cb 01       	movw	r24, r22
		if((t%2)==0)
     796:	60 fd       	sbrc	r22, 0
     798:	28 c0       	rjmp	.+80     	; 0x7ea <__vector_16+0xf8>
		{
			if(t<15) frequency = 1757;
     79a:	6f 30       	cpi	r22, 0x0F	; 15
     79c:	71 05       	cpc	r23, r1
     79e:	3c f4       	brge	.+14     	; 0x7ae <__vector_16+0xbc>
     7a0:	8d ed       	ldi	r24, 0xDD	; 221
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     7a8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     7ac:	52 c0       	rjmp	.+164    	; 0x852 <__vector_16+0x160>
			else if(t<31) frequency = 2253;
     7ae:	6f 31       	cpi	r22, 0x1F	; 31
     7b0:	71 05       	cpc	r23, r1
     7b2:	3c f4       	brge	.+14     	; 0x7c2 <__vector_16+0xd0>
     7b4:	8d ec       	ldi	r24, 0xCD	; 205
     7b6:	98 e0       	ldi	r25, 0x08	; 8
     7b8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     7bc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     7c0:	48 c0       	rjmp	.+144    	; 0x852 <__vector_16+0x160>
			else if(t<47) frequency = 1782;
     7c2:	6f 32       	cpi	r22, 0x2F	; 47
     7c4:	71 05       	cpc	r23, r1
     7c6:	3c f4       	brge	.+14     	; 0x7d6 <__vector_16+0xe4>
     7c8:	86 ef       	ldi	r24, 0xF6	; 246
     7ca:	96 e0       	ldi	r25, 0x06	; 6
     7cc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     7d0:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     7d4:	3e c0       	rjmp	.+124    	; 0x852 <__vector_16+0x160>
			else if(t<63) frequency = 1757;
     7d6:	6f 33       	cpi	r22, 0x3F	; 63
     7d8:	71 05       	cpc	r23, r1
     7da:	dc f5       	brge	.+118    	; 0x852 <__vector_16+0x160>
     7dc:	8d ed       	ldi	r24, 0xDD	; 221
     7de:	96 e0       	ldi	r25, 0x06	; 6
     7e0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     7e4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     7e8:	34 c0       	rjmp	.+104    	; 0x852 <__vector_16+0x160>
		}
		else if((t%2)==1)
     7ea:	61 70       	andi	r22, 0x01	; 1
     7ec:	70 78       	andi	r23, 0x80	; 128
     7ee:	77 23       	and	r23, r23
     7f0:	34 f4       	brge	.+12     	; 0x7fe <__vector_16+0x10c>
     7f2:	61 50       	subi	r22, 0x01	; 1
     7f4:	71 09       	sbc	r23, r1
     7f6:	6e 6f       	ori	r22, 0xFE	; 254
     7f8:	7f 6f       	ori	r23, 0xFF	; 255
     7fa:	6f 5f       	subi	r22, 0xFF	; 255
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	61 30       	cpi	r22, 0x01	; 1
     800:	71 05       	cpc	r23, r1
     802:	39 f5       	brne	.+78     	; 0x852 <__vector_16+0x160>
		{
			if(t<16) frequency = 1955;
     804:	80 31       	cpi	r24, 0x10	; 16
     806:	91 05       	cpc	r25, r1
     808:	3c f4       	brge	.+14     	; 0x818 <__vector_16+0x126>
     80a:	83 ea       	ldi	r24, 0xA3	; 163
     80c:	97 e0       	ldi	r25, 0x07	; 7
     80e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     812:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     816:	1d c0       	rjmp	.+58     	; 0x852 <__vector_16+0x160>
			else if(t<32) frequency = 1607;
     818:	80 32       	cpi	r24, 0x20	; 32
     81a:	91 05       	cpc	r25, r1
     81c:	3c f4       	brge	.+14     	; 0x82c <__vector_16+0x13a>
     81e:	87 e4       	ldi	r24, 0x47	; 71
     820:	96 e0       	ldi	r25, 0x06	; 6
     822:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     826:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     82a:	13 c0       	rjmp	.+38     	; 0x852 <__vector_16+0x160>
			else if(t<48) frequency = 1669;
     82c:	80 33       	cpi	r24, 0x30	; 48
     82e:	91 05       	cpc	r25, r1
     830:	3c f4       	brge	.+14     	; 0x840 <__vector_16+0x14e>
     832:	85 e8       	ldi	r24, 0x85	; 133
     834:	96 e0       	ldi	r25, 0x06	; 6
     836:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     83a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     83e:	09 c0       	rjmp	.+18     	; 0x852 <__vector_16+0x160>
			else if(t<64) frequency = 1955;
     840:	80 34       	cpi	r24, 0x40	; 64
     842:	91 05       	cpc	r25, r1
     844:	34 f4       	brge	.+12     	; 0x852 <__vector_16+0x160>
     846:	83 ea       	ldi	r24, 0xA3	; 163
     848:	97 e0       	ldi	r25, 0x07	; 7
     84a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     84e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
	}

	phase=getphase(prevPhase,prevFreq,532);									//Retrieve phase for next wave
     852:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <prevFreq>
     856:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <prevFreq+0x1>
     85a:	c0 91 08 20 	lds	r28, 0x2008	; 0x802008 <prevPhase>
     85e:	d0 91 09 20 	lds	r29, 0x2009	; 0x802009 <prevPhase+0x1>
     862:	07 2e       	mov	r0, r23
     864:	00 0c       	add	r0, r0
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	0e 94 99 06 	call	0xd32	; 0xd32 <__floatsisf>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24
     872:	be 01       	movw	r22, r28
     874:	dd 0f       	add	r29, r29
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 99 06 	call	0xd32	; 0xd32 <__floatsisf>
     87e:	e1 2c       	mov	r14, r1
     880:	f1 2c       	mov	r15, r1
     882:	05 e0       	ldi	r16, 0x05	; 5
     884:	14 e4       	ldi	r17, 0x44	; 68
     886:	a5 01       	movw	r20, r10
     888:	94 01       	movw	r18, r8
     88a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <getphase>
     88e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <phase>
     892:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <phase+0x1>
	pixelCount++;
     896:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
     89a:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
     8a4:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <__data_end+0x1>
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	0f 90       	pop	r0
     8d6:	0b be       	out	0x3b, r0	; 59
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <SPI_MasterTransceiveByte>:
uint8_t SPI_receive8()
{
	SPI_MasterCreateDataPacket(&dataPacket,masterSendData,masterReceivedData,NUM_BYTES,&PORTC,PIN4_bm);		
	SPI_MasterTransceivePacket(&spiMasterC, &dataPacket);	//Wait for reception
	return masterReceivedData[0];							
}
     8e2:	dc 01       	movw	r26, r24
     8e4:	ed 91       	ld	r30, X+
     8e6:	fc 91       	ld	r31, X
     8e8:	11 97       	sbiw	r26, 0x01	; 1
     8ea:	63 83       	std	Z+3, r22	; 0x03
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	88 23       	and	r24, r24
     8f4:	ec f7       	brge	.-6      	; 0x8f0 <SPI_MasterTransceiveByte+0xe>
     8f6:	83 81       	ldd	r24, Z+3	; 0x03
     8f8:	9f ef       	ldi	r25, 0xFF	; 255
     8fa:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     8fe:	08 95       	ret

00000900 <SPI_Master_init>:
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	a0 e4       	ldi	r26, 0x40	; 64
     906:	b6 e0       	ldi	r27, 0x06	; 6
     908:	80 e1       	ldi	r24, 0x10	; 16
     90a:	11 96       	adiw	r26, 0x01	; 1
     90c:	8c 93       	st	X, r24
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	90 e2       	ldi	r25, 0x20	; 32
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	9c 93       	st	X, r25
     916:	11 97       	sbiw	r26, 0x01	; 1
     918:	90 e8       	ldi	r25, 0x80	; 128
     91a:	11 96       	adiw	r26, 0x01	; 1
     91c:	9c 93       	st	X, r25
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	98 e3       	ldi	r25, 0x38	; 56
     922:	54 96       	adiw	r26, 0x14	; 20
     924:	9c 93       	st	X, r25
     926:	54 97       	sbiw	r26, 0x14	; 20
     928:	15 96       	adiw	r26, 0x05	; 5
     92a:	8c 93       	st	X, r24
     92c:	15 97       	sbiw	r26, 0x05	; 5
     92e:	e4 e1       	ldi	r30, 0x14	; 20
     930:	f0 e2       	ldi	r31, 0x20	; 32
     932:	c0 ec       	ldi	r28, 0xC0	; 192
     934:	d8 e0       	ldi	r29, 0x08	; 8
     936:	c0 83       	st	Z, r28
     938:	d1 83       	std	Z+1, r29	; 0x01
     93a:	a2 83       	std	Z+2, r26	; 0x02
     93c:	b3 83       	std	Z+3, r27	; 0x03
     93e:	14 82       	std	Z+4, r1	; 0x04
     940:	88 ed       	ldi	r24, 0xD8	; 216
     942:	88 83       	st	Y, r24
     944:	a0 81       	ld	r26, Z
     946:	b1 81       	ldd	r27, Z+1	; 0x01
     948:	11 96       	adiw	r26, 0x01	; 1
     94a:	1c 92       	st	X, r1
     94c:	15 82       	std	Z+5, r1	; 0x05
     94e:	16 82       	std	Z+6, r1	; 0x06
     950:	02 80       	ldd	r0, Z+2	; 0x02
     952:	f3 81       	ldd	r31, Z+3	; 0x03
     954:	e0 2d       	mov	r30, r0
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	81 83       	std	Z+1, r24	; 0x01
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <SPI_send16>:
void SPI_send16(uint16_t data)
{
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	f8 2e       	mov	r15, r24
	PORTA_DIRSET = PIN0_bm;
     96c:	c1 e0       	ldi	r28, 0x01	; 1
     96e:	c0 93 01 06 	sts	0x0601, r28	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTF_DIRSET = PIN0_bm|PIN1_bm|PIN2_bm|PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTA_OUTSET = PIN0_bm;
     978:	05 e0       	ldi	r16, 0x05	; 5
     97a:	16 e0       	ldi	r17, 0x06	; 6
     97c:	f8 01       	movw	r30, r16
     97e:	c0 83       	st	Z, r28
	uint8_t MSdata = ((data>>8) & 0x00FF);		//filter out MS
	uint8_t LSdata = (data & 0x00FF);			//filter out LS
	SPI_MasterSSLow(ssPort, PIN4_bm);			//Set Slave Select Low
     980:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssPort>
     984:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssPort+0x1>
     988:	d0 e1       	ldi	r29, 0x10	; 16
     98a:	d6 83       	std	Z+6, r29	; 0x06
	PORTA_OUTCLR = PIN0_bm;				
     98c:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	SPI_MasterTransceiveByte(&spiMasterC, MSdata); 
     990:	69 2f       	mov	r22, r25
     992:	84 e1       	ldi	r24, 0x14	; 20
     994:	90 e2       	ldi	r25, 0x20	; 32
     996:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterC, LSdata);
     99a:	6f 2d       	mov	r22, r15
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	90 e2       	ldi	r25, 0x20	; 32
     9a0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_MasterTransceiveByte>
	SPI_MasterSSHigh(ssPort, PIN4_bm);			//Set Slave Select High
     9a4:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssPort>
     9a8:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssPort+0x1>
     9ac:	d5 83       	std	Z+5, r29	; 0x05
	PORTA_OUTSET = PIN0_bm;
     9ae:	f8 01       	movw	r30, r16
     9b0:	c0 83       	st	Z, r28
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	08 95       	ret

000009be <SetClock0>:
}

void SetClock1()
{	
	TCC1.PER = 0xFF;					//Set period 
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;	//Set Prescaler 1
     9be:	e0 e0       	ldi	r30, 0x00	; 0
     9c0:	f8 e0       	ldi	r31, 0x08	; 8
     9c2:	81 e1       	ldi	r24, 0x11	; 17
     9c4:	81 83       	std	Z+1, r24	; 0x01
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	87 83       	std	Z+7, r24	; 0x07
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
     9ce:	86 a3       	std	Z+38, r24	; 0x26
     9d0:	97 a3       	std	Z+39, r25	; 0x27
     9d2:	85 e4       	ldi	r24, 0x45	; 69
     9d4:	91 e2       	ldi	r25, 0x21	; 33
     9d6:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
     9da:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 83       	st	Z, r24
     9e2:	e0 ea       	ldi	r30, 0xA0	; 160
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	82 81       	ldd	r24, Z+2	; 0x02
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	82 83       	std	Z+2, r24	; 0x02
     9ec:	08 95       	ret

000009ee <setUp16MhzExternalOsc>:
}

void setUp16MhzExternalOsc()
{
	PORTD_DIR = 0x01;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     9f4:	8b ec       	ldi	r24, 0xCB	; 203
     9f6:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
     9fa:	e0 e5       	ldi	r30, 0x50	; 80
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	88 60       	ori	r24, 0x08	; 8
     a02:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
     a04:	e1 e5       	ldi	r30, 0x51	; 81
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	83 ff       	sbrs	r24, 3
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <setUp16MhzExternalOsc+0x1a>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
     a0e:	88 ed       	ldi	r24, 0xD8	; 216
     a10:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     a18:	08 95       	ret

00000a1a <USART_DataRegEmpty>:
	uint16_t LSdata = (data & 0x00FF);				//filter out LS
	sei();											//Enable global interrupts
	USART_TXBuffer_PutByte(&USART_data, MSdata);	//Write MSdata and wait for transfer
	USART_TXBuffer_PutByte(&USART_data, LSdata);	//Write LSdata and wait for transfer
	cli();											//Disable global interrupts
}
     a1a:	fc 01       	movw	r30, r24
     a1c:	96 85       	ldd	r25, Z+14	; 0x0e
     a1e:	85 85       	ldd	r24, Z+13	; 0x0d
     a20:	98 13       	cpse	r25, r24
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <USART_DataRegEmpty+0x18>
     a24:	01 90       	ld	r0, Z+
     a26:	f0 81       	ld	r31, Z
     a28:	e0 2d       	mov	r30, r0
     a2a:	83 81       	ldd	r24, Z+3	; 0x03
     a2c:	8c 7f       	andi	r24, 0xFC	; 252
     a2e:	83 83       	std	Z+3, r24	; 0x03
     a30:	08 95       	ret
     a32:	86 85       	ldd	r24, Z+14	; 0x0e
     a34:	df 01       	movw	r26, r30
     a36:	a8 0f       	add	r26, r24
     a38:	b1 1d       	adc	r27, r1
     a3a:	17 96       	adiw	r26, 0x07	; 7
     a3c:	8c 91       	ld	r24, X
     a3e:	a0 81       	ld	r26, Z
     a40:	b1 81       	ldd	r27, Z+1	; 0x01
     a42:	8c 93       	st	X, r24
     a44:	86 85       	ldd	r24, Z+14	; 0x0e
     a46:	8f 5f       	subi	r24, 0xFF	; 255
     a48:	83 70       	andi	r24, 0x03	; 3
     a4a:	86 87       	std	Z+14, r24	; 0x0e
     a4c:	08 95       	ret

00000a4e <SetUsart>:
     a4e:	e0 e4       	ldi	r30, 0x40	; 64
     a50:	f6 e0       	ldi	r31, 0x06	; 6
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	81 83       	std	Z+1, r24	; 0x01
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	82 83       	std	Z+2, r24	; 0x02
     a5a:	a5 e2       	ldi	r26, 0x25	; 37
     a5c:	b0 e2       	ldi	r27, 0x20	; 32
     a5e:	e0 ea       	ldi	r30, 0xA0	; 160
     a60:	f8 e0       	ldi	r31, 0x08	; 8
     a62:	ed 93       	st	X+, r30
     a64:	fc 93       	st	X, r31
     a66:	11 97       	sbiw	r26, 0x01	; 1
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	8c 93       	st	X, r24
     a6e:	12 97       	sbiw	r26, 0x02	; 2
     a70:	1c 96       	adiw	r26, 0x0c	; 12
     a72:	1c 92       	st	X, r1
     a74:	1c 97       	sbiw	r26, 0x0c	; 12
     a76:	1b 96       	adiw	r26, 0x0b	; 11
     a78:	1c 92       	st	X, r1
     a7a:	1b 97       	sbiw	r26, 0x0b	; 11
     a7c:	1e 96       	adiw	r26, 0x0e	; 14
     a7e:	1c 92       	st	X, r1
     a80:	1e 97       	sbiw	r26, 0x0e	; 14
     a82:	1d 96       	adiw	r26, 0x0d	; 13
     a84:	1c 92       	st	X, r1
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	85 83       	std	Z+5, r24	; 0x05
     a8a:	83 81       	ldd	r24, Z+3	; 0x03
     a8c:	8f 7c       	andi	r24, 0xCF	; 207
     a8e:	80 61       	ori	r24, 0x10	; 16
     a90:	83 83       	std	Z+3, r24	; 0x03
     a92:	8c e0       	ldi	r24, 0x0C	; 12
     a94:	86 83       	std	Z+6, r24	; 0x06
     a96:	17 82       	std	Z+7, r1	; 0x07
     a98:	84 81       	ldd	r24, Z+4	; 0x04
     a9a:	80 61       	ori	r24, 0x10	; 16
     a9c:	84 83       	std	Z+4, r24	; 0x04
     a9e:	84 81       	ldd	r24, Z+4	; 0x04
     aa0:	88 60       	ori	r24, 0x08	; 8
     aa2:	84 83       	std	Z+4, r24	; 0x04
     aa4:	e0 ea       	ldi	r30, 0xA0	; 160
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	82 83       	std	Z+2, r24	; 0x02
     aae:	08 95       	ret

00000ab0 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	0b b6       	in	r0, 0x3b	; 59
     abc:	0f 92       	push	r0
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	ef 93       	push	r30
     ad4:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
     ad6:	85 e2       	ldi	r24, 0x25	; 37
     ad8:	90 e2       	ldi	r25, 0x20	; 32
     ada:	0e 94 0d 05 	call	0xa1a	; 0xa1a <USART_DataRegEmpty>
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0b be       	out	0x3b, r0	; 59
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <__subsf3>:
     b04:	50 58       	subi	r21, 0x80	; 128

00000b06 <__addsf3>:
     b06:	bb 27       	eor	r27, r27
     b08:	aa 27       	eor	r26, r26
     b0a:	0e 94 9a 05 	call	0xb34	; 0xb34 <__addsf3x>
     b0e:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_round>
     b12:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscA>
     b16:	38 f0       	brcs	.+14     	; 0xb26 <__addsf3+0x20>
     b18:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscB>
     b1c:	20 f0       	brcs	.+8      	; 0xb26 <__addsf3+0x20>
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__addsf3+0x28>
     b20:	9f 3f       	cpi	r25, 0xFF	; 255
     b22:	19 f4       	brne	.+6      	; 0xb2a <__addsf3+0x24>
     b24:	26 f4       	brtc	.+8      	; 0xb2e <__addsf3+0x28>
     b26:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_nan>
     b2a:	0e f4       	brtc	.+2      	; 0xb2e <__addsf3+0x28>
     b2c:	e0 95       	com	r30
     b2e:	e7 fb       	bst	r30, 7
     b30:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_inf>

00000b34 <__addsf3x>:
     b34:	e9 2f       	mov	r30, r25
     b36:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_split3>
     b3a:	58 f3       	brcs	.-42     	; 0xb12 <__addsf3+0xc>
     b3c:	ba 17       	cp	r27, r26
     b3e:	62 07       	cpc	r22, r18
     b40:	73 07       	cpc	r23, r19
     b42:	84 07       	cpc	r24, r20
     b44:	95 07       	cpc	r25, r21
     b46:	20 f0       	brcs	.+8      	; 0xb50 <__addsf3x+0x1c>
     b48:	79 f4       	brne	.+30     	; 0xb68 <__addsf3x+0x34>
     b4a:	a6 f5       	brtc	.+104    	; 0xbb4 <__addsf3x+0x80>
     b4c:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_zero>
     b50:	0e f4       	brtc	.+2      	; 0xb54 <__addsf3x+0x20>
     b52:	e0 95       	com	r30
     b54:	0b 2e       	mov	r0, r27
     b56:	ba 2f       	mov	r27, r26
     b58:	a0 2d       	mov	r26, r0
     b5a:	0b 01       	movw	r0, r22
     b5c:	b9 01       	movw	r22, r18
     b5e:	90 01       	movw	r18, r0
     b60:	0c 01       	movw	r0, r24
     b62:	ca 01       	movw	r24, r20
     b64:	a0 01       	movw	r20, r0
     b66:	11 24       	eor	r1, r1
     b68:	ff 27       	eor	r31, r31
     b6a:	59 1b       	sub	r21, r25
     b6c:	99 f0       	breq	.+38     	; 0xb94 <__addsf3x+0x60>
     b6e:	59 3f       	cpi	r21, 0xF9	; 249
     b70:	50 f4       	brcc	.+20     	; 0xb86 <__addsf3x+0x52>
     b72:	50 3e       	cpi	r21, 0xE0	; 224
     b74:	68 f1       	brcs	.+90     	; 0xbd0 <__addsf3x+0x9c>
     b76:	1a 16       	cp	r1, r26
     b78:	f0 40       	sbci	r31, 0x00	; 0
     b7a:	a2 2f       	mov	r26, r18
     b7c:	23 2f       	mov	r18, r19
     b7e:	34 2f       	mov	r19, r20
     b80:	44 27       	eor	r20, r20
     b82:	58 5f       	subi	r21, 0xF8	; 248
     b84:	f3 cf       	rjmp	.-26     	; 0xb6c <__addsf3x+0x38>
     b86:	46 95       	lsr	r20
     b88:	37 95       	ror	r19
     b8a:	27 95       	ror	r18
     b8c:	a7 95       	ror	r26
     b8e:	f0 40       	sbci	r31, 0x00	; 0
     b90:	53 95       	inc	r21
     b92:	c9 f7       	brne	.-14     	; 0xb86 <__addsf3x+0x52>
     b94:	7e f4       	brtc	.+30     	; 0xbb4 <__addsf3x+0x80>
     b96:	1f 16       	cp	r1, r31
     b98:	ba 0b       	sbc	r27, r26
     b9a:	62 0b       	sbc	r22, r18
     b9c:	73 0b       	sbc	r23, r19
     b9e:	84 0b       	sbc	r24, r20
     ba0:	ba f0       	brmi	.+46     	; 0xbd0 <__addsf3x+0x9c>
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	a1 f0       	breq	.+40     	; 0xbce <__addsf3x+0x9a>
     ba6:	ff 0f       	add	r31, r31
     ba8:	bb 1f       	adc	r27, r27
     baa:	66 1f       	adc	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	88 1f       	adc	r24, r24
     bb0:	c2 f7       	brpl	.-16     	; 0xba2 <__addsf3x+0x6e>
     bb2:	0e c0       	rjmp	.+28     	; 0xbd0 <__addsf3x+0x9c>
     bb4:	ba 0f       	add	r27, r26
     bb6:	62 1f       	adc	r22, r18
     bb8:	73 1f       	adc	r23, r19
     bba:	84 1f       	adc	r24, r20
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__addsf3x+0x9c>
     bbe:	87 95       	ror	r24
     bc0:	77 95       	ror	r23
     bc2:	67 95       	ror	r22
     bc4:	b7 95       	ror	r27
     bc6:	f7 95       	ror	r31
     bc8:	9e 3f       	cpi	r25, 0xFE	; 254
     bca:	08 f0       	brcs	.+2      	; 0xbce <__addsf3x+0x9a>
     bcc:	b0 cf       	rjmp	.-160    	; 0xb2e <__addsf3+0x28>
     bce:	93 95       	inc	r25
     bd0:	88 0f       	add	r24, r24
     bd2:	08 f0       	brcs	.+2      	; 0xbd6 <__addsf3x+0xa2>
     bd4:	99 27       	eor	r25, r25
     bd6:	ee 0f       	add	r30, r30
     bd8:	97 95       	ror	r25
     bda:	87 95       	ror	r24
     bdc:	08 95       	ret

00000bde <__divsf3>:
     bde:	0e 94 03 06 	call	0xc06	; 0xc06 <__divsf3x>
     be2:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_round>
     be6:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscB>
     bea:	58 f0       	brcs	.+22     	; 0xc02 <__divsf3+0x24>
     bec:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscA>
     bf0:	40 f0       	brcs	.+16     	; 0xc02 <__divsf3+0x24>
     bf2:	29 f4       	brne	.+10     	; 0xbfe <__divsf3+0x20>
     bf4:	5f 3f       	cpi	r21, 0xFF	; 255
     bf6:	29 f0       	breq	.+10     	; 0xc02 <__divsf3+0x24>
     bf8:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_inf>
     bfc:	51 11       	cpse	r21, r1
     bfe:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
     c02:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_nan>

00000c06 <__divsf3x>:
     c06:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_split3>
     c0a:	68 f3       	brcs	.-38     	; 0xbe6 <__divsf3+0x8>

00000c0c <__divsf3_pse>:
     c0c:	99 23       	and	r25, r25
     c0e:	b1 f3       	breq	.-20     	; 0xbfc <__divsf3+0x1e>
     c10:	55 23       	and	r21, r21
     c12:	91 f3       	breq	.-28     	; 0xbf8 <__divsf3+0x1a>
     c14:	95 1b       	sub	r25, r21
     c16:	55 0b       	sbc	r21, r21
     c18:	bb 27       	eor	r27, r27
     c1a:	aa 27       	eor	r26, r26
     c1c:	62 17       	cp	r22, r18
     c1e:	73 07       	cpc	r23, r19
     c20:	84 07       	cpc	r24, r20
     c22:	38 f0       	brcs	.+14     	; 0xc32 <__divsf3_pse+0x26>
     c24:	9f 5f       	subi	r25, 0xFF	; 255
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	44 1f       	adc	r20, r20
     c2e:	aa 1f       	adc	r26, r26
     c30:	a9 f3       	breq	.-22     	; 0xc1c <__divsf3_pse+0x10>
     c32:	35 d0       	rcall	.+106    	; 0xc9e <__divsf3_pse+0x92>
     c34:	0e 2e       	mov	r0, r30
     c36:	3a f0       	brmi	.+14     	; 0xc46 <__divsf3_pse+0x3a>
     c38:	e0 e8       	ldi	r30, 0x80	; 128
     c3a:	32 d0       	rcall	.+100    	; 0xca0 <__divsf3_pse+0x94>
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	50 40       	sbci	r21, 0x00	; 0
     c40:	e6 95       	lsr	r30
     c42:	00 1c       	adc	r0, r0
     c44:	ca f7       	brpl	.-14     	; 0xc38 <__divsf3_pse+0x2c>
     c46:	2b d0       	rcall	.+86     	; 0xc9e <__divsf3_pse+0x92>
     c48:	fe 2f       	mov	r31, r30
     c4a:	29 d0       	rcall	.+82     	; 0xc9e <__divsf3_pse+0x92>
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	88 1f       	adc	r24, r24
     c52:	bb 1f       	adc	r27, r27
     c54:	26 17       	cp	r18, r22
     c56:	37 07       	cpc	r19, r23
     c58:	48 07       	cpc	r20, r24
     c5a:	ab 07       	cpc	r26, r27
     c5c:	b0 e8       	ldi	r27, 0x80	; 128
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__divsf3_pse+0x56>
     c60:	bb 0b       	sbc	r27, r27
     c62:	80 2d       	mov	r24, r0
     c64:	bf 01       	movw	r22, r30
     c66:	ff 27       	eor	r31, r31
     c68:	93 58       	subi	r25, 0x83	; 131
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	3a f0       	brmi	.+14     	; 0xc7c <__divsf3_pse+0x70>
     c6e:	9e 3f       	cpi	r25, 0xFE	; 254
     c70:	51 05       	cpc	r21, r1
     c72:	78 f0       	brcs	.+30     	; 0xc92 <__divsf3_pse+0x86>
     c74:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_inf>
     c78:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
     c7c:	5f 3f       	cpi	r21, 0xFF	; 255
     c7e:	e4 f3       	brlt	.-8      	; 0xc78 <__divsf3_pse+0x6c>
     c80:	98 3e       	cpi	r25, 0xE8	; 232
     c82:	d4 f3       	brlt	.-12     	; 0xc78 <__divsf3_pse+0x6c>
     c84:	86 95       	lsr	r24
     c86:	77 95       	ror	r23
     c88:	67 95       	ror	r22
     c8a:	b7 95       	ror	r27
     c8c:	f7 95       	ror	r31
     c8e:	9f 5f       	subi	r25, 0xFF	; 255
     c90:	c9 f7       	brne	.-14     	; 0xc84 <__divsf3_pse+0x78>
     c92:	88 0f       	add	r24, r24
     c94:	91 1d       	adc	r25, r1
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret
     c9e:	e1 e0       	ldi	r30, 0x01	; 1
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	88 1f       	adc	r24, r24
     ca6:	bb 1f       	adc	r27, r27
     ca8:	62 17       	cp	r22, r18
     caa:	73 07       	cpc	r23, r19
     cac:	84 07       	cpc	r24, r20
     cae:	ba 07       	cpc	r27, r26
     cb0:	20 f0       	brcs	.+8      	; 0xcba <__divsf3_pse+0xae>
     cb2:	62 1b       	sub	r22, r18
     cb4:	73 0b       	sbc	r23, r19
     cb6:	84 0b       	sbc	r24, r20
     cb8:	ba 0b       	sbc	r27, r26
     cba:	ee 1f       	adc	r30, r30
     cbc:	88 f7       	brcc	.-30     	; 0xca0 <__divsf3_pse+0x94>
     cbe:	e0 95       	com	r30
     cc0:	08 95       	ret

00000cc2 <__fixsfsi>:
     cc2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fixunssfsi>
     cc6:	68 94       	set
     cc8:	b1 11       	cpse	r27, r1
     cca:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
     cce:	08 95       	ret

00000cd0 <__fixunssfsi>:
     cd0:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_splitA>
     cd4:	88 f0       	brcs	.+34     	; 0xcf8 <__fixunssfsi+0x28>
     cd6:	9f 57       	subi	r25, 0x7F	; 127
     cd8:	98 f0       	brcs	.+38     	; 0xd00 <__fixunssfsi+0x30>
     cda:	b9 2f       	mov	r27, r25
     cdc:	99 27       	eor	r25, r25
     cde:	b7 51       	subi	r27, 0x17	; 23
     ce0:	b0 f0       	brcs	.+44     	; 0xd0e <__fixunssfsi+0x3e>
     ce2:	e1 f0       	breq	.+56     	; 0xd1c <__fixunssfsi+0x4c>
     ce4:	66 0f       	add	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	1a f0       	brmi	.+6      	; 0xcf4 <__fixunssfsi+0x24>
     cee:	ba 95       	dec	r27
     cf0:	c9 f7       	brne	.-14     	; 0xce4 <__fixunssfsi+0x14>
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <__fixunssfsi+0x4c>
     cf4:	b1 30       	cpi	r27, 0x01	; 1
     cf6:	91 f0       	breq	.+36     	; 0xd1c <__fixunssfsi+0x4c>
     cf8:	0e 94 80 07 	call	0xf00	; 0xf00 <__fp_zero>
     cfc:	b1 e0       	ldi	r27, 0x01	; 1
     cfe:	08 95       	ret
     d00:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_zero>
     d04:	67 2f       	mov	r22, r23
     d06:	78 2f       	mov	r23, r24
     d08:	88 27       	eor	r24, r24
     d0a:	b8 5f       	subi	r27, 0xF8	; 248
     d0c:	39 f0       	breq	.+14     	; 0xd1c <__fixunssfsi+0x4c>
     d0e:	b9 3f       	cpi	r27, 0xF9	; 249
     d10:	cc f3       	brlt	.-14     	; 0xd04 <__fixunssfsi+0x34>
     d12:	86 95       	lsr	r24
     d14:	77 95       	ror	r23
     d16:	67 95       	ror	r22
     d18:	b3 95       	inc	r27
     d1a:	d9 f7       	brne	.-10     	; 0xd12 <__fixunssfsi+0x42>
     d1c:	3e f4       	brtc	.+14     	; 0xd2c <__fixunssfsi+0x5c>
     d1e:	90 95       	com	r25
     d20:	80 95       	com	r24
     d22:	70 95       	com	r23
     d24:	61 95       	neg	r22
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	8f 4f       	sbci	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	08 95       	ret

00000d2e <__floatunsisf>:
     d2e:	e8 94       	clt
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__floatsisf+0x12>

00000d32 <__floatsisf>:
     d32:	97 fb       	bst	r25, 7
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__floatsisf+0x12>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	99 23       	and	r25, r25
     d46:	a9 f0       	breq	.+42     	; 0xd72 <__floatsisf+0x40>
     d48:	f9 2f       	mov	r31, r25
     d4a:	96 e9       	ldi	r25, 0x96	; 150
     d4c:	bb 27       	eor	r27, r27
     d4e:	93 95       	inc	r25
     d50:	f6 95       	lsr	r31
     d52:	87 95       	ror	r24
     d54:	77 95       	ror	r23
     d56:	67 95       	ror	r22
     d58:	b7 95       	ror	r27
     d5a:	f1 11       	cpse	r31, r1
     d5c:	f8 cf       	rjmp	.-16     	; 0xd4e <__floatsisf+0x1c>
     d5e:	fa f4       	brpl	.+62     	; 0xd9e <__floatsisf+0x6c>
     d60:	bb 0f       	add	r27, r27
     d62:	11 f4       	brne	.+4      	; 0xd68 <__floatsisf+0x36>
     d64:	60 ff       	sbrs	r22, 0
     d66:	1b c0       	rjmp	.+54     	; 0xd9e <__floatsisf+0x6c>
     d68:	6f 5f       	subi	r22, 0xFF	; 255
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <__floatsisf+0x6c>
     d72:	88 23       	and	r24, r24
     d74:	11 f0       	breq	.+4      	; 0xd7a <__floatsisf+0x48>
     d76:	96 e9       	ldi	r25, 0x96	; 150
     d78:	11 c0       	rjmp	.+34     	; 0xd9c <__floatsisf+0x6a>
     d7a:	77 23       	and	r23, r23
     d7c:	21 f0       	breq	.+8      	; 0xd86 <__floatsisf+0x54>
     d7e:	9e e8       	ldi	r25, 0x8E	; 142
     d80:	87 2f       	mov	r24, r23
     d82:	76 2f       	mov	r23, r22
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <__floatsisf+0x5e>
     d86:	66 23       	and	r22, r22
     d88:	71 f0       	breq	.+28     	; 0xda6 <__floatsisf+0x74>
     d8a:	96 e8       	ldi	r25, 0x86	; 134
     d8c:	86 2f       	mov	r24, r22
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	2a f0       	brmi	.+10     	; 0xd9e <__floatsisf+0x6c>
     d94:	9a 95       	dec	r25
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	da f7       	brpl	.-10     	; 0xd94 <__floatsisf+0x62>
     d9e:	88 0f       	add	r24, r24
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	97 f9       	bld	r25, 7
     da6:	08 95       	ret
     da8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscA>
     dac:	20 f0       	brcs	.+8      	; 0xdb6 <__floatsisf+0x84>
     dae:	19 f0       	breq	.+6      	; 0xdb6 <__floatsisf+0x84>
     db0:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscB>
     db4:	50 f4       	brcc	.+20     	; 0xdca <fmod+0xc>
     db6:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_nan>
     dba:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>

00000dbe <fmod>:
     dbe:	e9 2f       	mov	r30, r25
     dc0:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_split3>
     dc4:	88 f3       	brcs	.-30     	; 0xda8 <__floatsisf+0x76>
     dc6:	55 23       	and	r21, r21
     dc8:	b1 f3       	breq	.-20     	; 0xdb6 <__floatsisf+0x84>
     dca:	e7 fb       	bst	r30, 7
     dcc:	62 17       	cp	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	95 07       	cpc	r25, r21
     dd4:	a8 f1       	brcs	.+106    	; 0xe40 <fmod+0x82>
     dd6:	89 f3       	breq	.-30     	; 0xdba <__floatsisf+0x88>
     dd8:	e9 2f       	mov	r30, r25
     dda:	ff 27       	eor	r31, r31
     ddc:	88 23       	and	r24, r24
     dde:	2a f0       	brmi	.+10     	; 0xdea <fmod+0x2c>
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	66 0f       	add	r22, r22
     de4:	77 1f       	adc	r23, r23
     de6:	88 1f       	adc	r24, r24
     de8:	da f7       	brpl	.-10     	; 0xde0 <fmod+0x22>
     dea:	95 2f       	mov	r25, r21
     dec:	55 27       	eor	r21, r21
     dee:	44 23       	and	r20, r20
     df0:	32 f0       	brmi	.+12     	; 0xdfe <fmod+0x40>
     df2:	91 50       	subi	r25, 0x01	; 1
     df4:	50 40       	sbci	r21, 0x00	; 0
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	44 1f       	adc	r20, r20
     dfc:	d2 f7       	brpl	.-12     	; 0xdf2 <fmod+0x34>
     dfe:	bb 27       	eor	r27, r27
     e00:	e9 1b       	sub	r30, r25
     e02:	f5 0b       	sbc	r31, r21
     e04:	62 1b       	sub	r22, r18
     e06:	73 0b       	sbc	r23, r19
     e08:	84 0b       	sbc	r24, r20
     e0a:	b1 09       	sbc	r27, r1
     e0c:	b1 f2       	breq	.-84     	; 0xdba <__floatsisf+0x88>
     e0e:	22 f4       	brpl	.+8      	; 0xe18 <fmod+0x5a>
     e10:	62 0f       	add	r22, r18
     e12:	73 1f       	adc	r23, r19
     e14:	84 1f       	adc	r24, r20
     e16:	b1 1d       	adc	r27, r1
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	2a f0       	brmi	.+10     	; 0xe26 <fmod+0x68>
     e1c:	66 0f       	add	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	bb 1f       	adc	r27, r27
     e24:	ef cf       	rjmp	.-34     	; 0xe04 <fmod+0x46>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	62 f0       	brmi	.+24     	; 0xe44 <fmod+0x86>
     e2c:	41 f0       	breq	.+16     	; 0xe3e <fmod+0x80>
     e2e:	88 23       	and	r24, r24
     e30:	32 f0       	brmi	.+12     	; 0xe3e <fmod+0x80>
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	91 50       	subi	r25, 0x01	; 1
     e3a:	50 40       	sbci	r21, 0x00	; 0
     e3c:	c1 f7       	brne	.-16     	; 0xe2e <fmod+0x70>
     e3e:	93 95       	inc	r25
     e40:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__fp_mpack>
     e44:	86 95       	lsr	r24
     e46:	77 95       	ror	r23
     e48:	67 95       	ror	r22
     e4a:	9f 5f       	subi	r25, 0xFF	; 255
     e4c:	d9 f7       	brne	.-10     	; 0xe44 <fmod+0x86>
     e4e:	f7 cf       	rjmp	.-18     	; 0xe3e <fmod+0x80>

00000e50 <__fp_inf>:
     e50:	97 f9       	bld	r25, 7
     e52:	9f 67       	ori	r25, 0x7F	; 127
     e54:	80 e8       	ldi	r24, 0x80	; 128
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	08 95       	ret

00000e5c <__fp_mpack>:
     e5c:	9f 3f       	cpi	r25, 0xFF	; 255
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__fp_mpack_finite+0xc>

00000e60 <__fp_mpack_finite>:
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	20 f4       	brcc	.+8      	; 0xe6c <__fp_mpack_finite+0xc>
     e64:	87 95       	ror	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b7 95       	ror	r27
     e6c:	88 0f       	add	r24, r24
     e6e:	91 1d       	adc	r25, r1
     e70:	96 95       	lsr	r25
     e72:	87 95       	ror	r24
     e74:	97 f9       	bld	r25, 7
     e76:	08 95       	ret

00000e78 <__fp_nan>:
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	80 ec       	ldi	r24, 0xC0	; 192
     e7c:	08 95       	ret

00000e7e <__fp_pscA>:
     e7e:	00 24       	eor	r0, r0
     e80:	0a 94       	dec	r0
     e82:	16 16       	cp	r1, r22
     e84:	17 06       	cpc	r1, r23
     e86:	18 06       	cpc	r1, r24
     e88:	09 06       	cpc	r0, r25
     e8a:	08 95       	ret

00000e8c <__fp_pscB>:
     e8c:	00 24       	eor	r0, r0
     e8e:	0a 94       	dec	r0
     e90:	12 16       	cp	r1, r18
     e92:	13 06       	cpc	r1, r19
     e94:	14 06       	cpc	r1, r20
     e96:	05 06       	cpc	r0, r21
     e98:	08 95       	ret

00000e9a <__fp_round>:
     e9a:	09 2e       	mov	r0, r25
     e9c:	03 94       	inc	r0
     e9e:	00 0c       	add	r0, r0
     ea0:	11 f4       	brne	.+4      	; 0xea6 <__fp_round+0xc>
     ea2:	88 23       	and	r24, r24
     ea4:	52 f0       	brmi	.+20     	; 0xeba <__fp_round+0x20>
     ea6:	bb 0f       	add	r27, r27
     ea8:	40 f4       	brcc	.+16     	; 0xeba <__fp_round+0x20>
     eaa:	bf 2b       	or	r27, r31
     eac:	11 f4       	brne	.+4      	; 0xeb2 <__fp_round+0x18>
     eae:	60 ff       	sbrs	r22, 0
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <__fp_round+0x20>
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	08 95       	ret

00000ebc <__fp_split3>:
     ebc:	57 fd       	sbrc	r21, 7
     ebe:	90 58       	subi	r25, 0x80	; 128
     ec0:	44 0f       	add	r20, r20
     ec2:	55 1f       	adc	r21, r21
     ec4:	59 f0       	breq	.+22     	; 0xedc <__fp_splitA+0x10>
     ec6:	5f 3f       	cpi	r21, 0xFF	; 255
     ec8:	71 f0       	breq	.+28     	; 0xee6 <__fp_splitA+0x1a>
     eca:	47 95       	ror	r20

00000ecc <__fp_splitA>:
     ecc:	88 0f       	add	r24, r24
     ece:	97 fb       	bst	r25, 7
     ed0:	99 1f       	adc	r25, r25
     ed2:	61 f0       	breq	.+24     	; 0xeec <__fp_splitA+0x20>
     ed4:	9f 3f       	cpi	r25, 0xFF	; 255
     ed6:	79 f0       	breq	.+30     	; 0xef6 <__fp_splitA+0x2a>
     ed8:	87 95       	ror	r24
     eda:	08 95       	ret
     edc:	12 16       	cp	r1, r18
     ede:	13 06       	cpc	r1, r19
     ee0:	14 06       	cpc	r1, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	f2 cf       	rjmp	.-28     	; 0xeca <__fp_split3+0xe>
     ee6:	46 95       	lsr	r20
     ee8:	f1 df       	rcall	.-30     	; 0xecc <__fp_splitA>
     eea:	08 c0       	rjmp	.+16     	; 0xefc <__fp_splitA+0x30>
     eec:	16 16       	cp	r1, r22
     eee:	17 06       	cpc	r1, r23
     ef0:	18 06       	cpc	r1, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	f1 cf       	rjmp	.-30     	; 0xed8 <__fp_splitA+0xc>
     ef6:	86 95       	lsr	r24
     ef8:	71 05       	cpc	r23, r1
     efa:	61 05       	cpc	r22, r1
     efc:	08 94       	sec
     efe:	08 95       	ret

00000f00 <__fp_zero>:
     f00:	e8 94       	clt

00000f02 <__fp_szero>:
     f02:	bb 27       	eor	r27, r27
     f04:	66 27       	eor	r22, r22
     f06:	77 27       	eor	r23, r23
     f08:	cb 01       	movw	r24, r22
     f0a:	97 f9       	bld	r25, 7
     f0c:	08 95       	ret

00000f0e <__mulsf3>:
     f0e:	0e 94 9a 07 	call	0xf34	; 0xf34 <__mulsf3x>
     f12:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__fp_round>
     f16:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_pscA>
     f1a:	38 f0       	brcs	.+14     	; 0xf2a <__mulsf3+0x1c>
     f1c:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscB>
     f20:	20 f0       	brcs	.+8      	; 0xf2a <__mulsf3+0x1c>
     f22:	95 23       	and	r25, r21
     f24:	11 f0       	breq	.+4      	; 0xf2a <__mulsf3+0x1c>
     f26:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_inf>
     f2a:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_nan>
     f2e:	11 24       	eor	r1, r1
     f30:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>

00000f34 <__mulsf3x>:
     f34:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_split3>
     f38:	70 f3       	brcs	.-36     	; 0xf16 <__mulsf3+0x8>

00000f3a <__mulsf3_pse>:
     f3a:	95 9f       	mul	r25, r21
     f3c:	c1 f3       	breq	.-16     	; 0xf2e <__mulsf3+0x20>
     f3e:	95 0f       	add	r25, r21
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	55 1f       	adc	r21, r21
     f44:	62 9f       	mul	r22, r18
     f46:	f0 01       	movw	r30, r0
     f48:	72 9f       	mul	r23, r18
     f4a:	bb 27       	eor	r27, r27
     f4c:	f0 0d       	add	r31, r0
     f4e:	b1 1d       	adc	r27, r1
     f50:	63 9f       	mul	r22, r19
     f52:	aa 27       	eor	r26, r26
     f54:	f0 0d       	add	r31, r0
     f56:	b1 1d       	adc	r27, r1
     f58:	aa 1f       	adc	r26, r26
     f5a:	64 9f       	mul	r22, r20
     f5c:	66 27       	eor	r22, r22
     f5e:	b0 0d       	add	r27, r0
     f60:	a1 1d       	adc	r26, r1
     f62:	66 1f       	adc	r22, r22
     f64:	82 9f       	mul	r24, r18
     f66:	22 27       	eor	r18, r18
     f68:	b0 0d       	add	r27, r0
     f6a:	a1 1d       	adc	r26, r1
     f6c:	62 1f       	adc	r22, r18
     f6e:	73 9f       	mul	r23, r19
     f70:	b0 0d       	add	r27, r0
     f72:	a1 1d       	adc	r26, r1
     f74:	62 1f       	adc	r22, r18
     f76:	83 9f       	mul	r24, r19
     f78:	a0 0d       	add	r26, r0
     f7a:	61 1d       	adc	r22, r1
     f7c:	22 1f       	adc	r18, r18
     f7e:	74 9f       	mul	r23, r20
     f80:	33 27       	eor	r19, r19
     f82:	a0 0d       	add	r26, r0
     f84:	61 1d       	adc	r22, r1
     f86:	23 1f       	adc	r18, r19
     f88:	84 9f       	mul	r24, r20
     f8a:	60 0d       	add	r22, r0
     f8c:	21 1d       	adc	r18, r1
     f8e:	82 2f       	mov	r24, r18
     f90:	76 2f       	mov	r23, r22
     f92:	6a 2f       	mov	r22, r26
     f94:	11 24       	eor	r1, r1
     f96:	9f 57       	subi	r25, 0x7F	; 127
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	9a f0       	brmi	.+38     	; 0xfc2 <__mulsf3_pse+0x88>
     f9c:	f1 f0       	breq	.+60     	; 0xfda <__mulsf3_pse+0xa0>
     f9e:	88 23       	and	r24, r24
     fa0:	4a f0       	brmi	.+18     	; 0xfb4 <__mulsf3_pse+0x7a>
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	bb 1f       	adc	r27, r27
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	50 40       	sbci	r21, 0x00	; 0
     fb2:	a9 f7       	brne	.-22     	; 0xf9e <__mulsf3_pse+0x64>
     fb4:	9e 3f       	cpi	r25, 0xFE	; 254
     fb6:	51 05       	cpc	r21, r1
     fb8:	80 f0       	brcs	.+32     	; 0xfda <__mulsf3_pse+0xa0>
     fba:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_inf>
     fbe:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_szero>
     fc2:	5f 3f       	cpi	r21, 0xFF	; 255
     fc4:	e4 f3       	brlt	.-8      	; 0xfbe <__mulsf3_pse+0x84>
     fc6:	98 3e       	cpi	r25, 0xE8	; 232
     fc8:	d4 f3       	brlt	.-12     	; 0xfbe <__mulsf3_pse+0x84>
     fca:	86 95       	lsr	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	f7 95       	ror	r31
     fd4:	e7 95       	ror	r30
     fd6:	9f 5f       	subi	r25, 0xFF	; 255
     fd8:	c1 f7       	brne	.-16     	; 0xfca <__mulsf3_pse+0x90>
     fda:	fe 2b       	or	r31, r30
     fdc:	88 0f       	add	r24, r24
     fde:	91 1d       	adc	r25, r1
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <__divmodhi4>:
     fe8:	97 fb       	bst	r25, 7
     fea:	07 2e       	mov	r0, r23
     fec:	16 f4       	brtc	.+4      	; 0xff2 <__divmodhi4+0xa>
     fee:	00 94       	com	r0
     ff0:	07 d0       	rcall	.+14     	; 0x1000 <__divmodhi4_neg1>
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	09 d0       	rcall	.+18     	; 0x1008 <__divmodhi4_neg2>
     ff6:	0e 94 08 08 	call	0x1010	; 0x1010 <__udivmodhi4>
     ffa:	07 fc       	sbrc	r0, 7
     ffc:	05 d0       	rcall	.+10     	; 0x1008 <__divmodhi4_neg2>
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__divmodhi4_exit>

00001000 <__divmodhi4_neg1>:
    1000:	90 95       	com	r25
    1002:	81 95       	neg	r24
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__divmodhi4_neg2>:
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255

0000100e <__divmodhi4_exit>:
    100e:	08 95       	ret

00001010 <__udivmodhi4>:
    1010:	aa 1b       	sub	r26, r26
    1012:	bb 1b       	sub	r27, r27
    1014:	51 e1       	ldi	r21, 0x11	; 17
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <__udivmodhi4_ep>

00001018 <__udivmodhi4_loop>:
    1018:	aa 1f       	adc	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	a6 17       	cp	r26, r22
    101e:	b7 07       	cpc	r27, r23
    1020:	10 f0       	brcs	.+4      	; 0x1026 <__udivmodhi4_ep>
    1022:	a6 1b       	sub	r26, r22
    1024:	b7 0b       	sbc	r27, r23

00001026 <__udivmodhi4_ep>:
    1026:	88 1f       	adc	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	5a 95       	dec	r21
    102c:	a9 f7       	brne	.-22     	; 0x1018 <__udivmodhi4_loop>
    102e:	80 95       	com	r24
    1030:	90 95       	com	r25
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	08 95       	ret

00001038 <_exit>:
    1038:	f8 94       	cli

0000103a <__stop_program>:
    103a:	ff cf       	rjmp	.-2      	; 0x103a <__stop_program>
