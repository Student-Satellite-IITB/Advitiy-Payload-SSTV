
ATXmega_SSTV_Encode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  00000fee  00001082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00802004  00802004  00001086  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000072af  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b27  00000000  00000000  000085df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a4  00000000  00000000  0000c106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  0000d6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b40  00000000  00000000  0000dca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f8d  00000000  00000000  000117e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00013771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_16>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_26>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee ee       	ldi	r30, 0xEE	; 238
 214:	ff e0       	ldi	r31, 0x0F	; 15
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 30       	cpi	r26, 0x04	; 4
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a4 e0       	ldi	r26, 0x04	; 4
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a4 33       	cpi	r26, 0x34	; 52
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
 23a:	0c 94 f5 07 	jmp	0xfea	; 0xfea <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Set_AD9833>:

#include "AD9833.h"
#include "spi_driver.h"

void Set_AD9833(float frequency, unsigned int phase) // Zero amplitude time : 39 miroseconds
{
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	8a 01       	movw	r16, r20
	long FreqReg = (((float)frequency)*pow(2,28))/(float)FMCLK;	  //Calculate frequency to be sent to AD9833
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	5d e4       	ldi	r21, 0x4D	; 77
 25c:	0e 94 60 07 	call	0xec0	; 0xec0 <__mulsf3>
 260:	20 e2       	ldi	r18, 0x20	; 32
 262:	3c eb       	ldi	r19, 0xBC	; 188
 264:	4e eb       	ldi	r20, 0xBE	; 190
 266:	5b e4       	ldi	r21, 0x4B	; 75
 268:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 26c:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fixsfsi>
	int MSB = (int)((FreqReg &  0xFFFC000) >> 14);				  //Extract first 14 bits of FreqReg and place them at last 14 bits of MSB
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
 274:	cc 24       	eor	r12, r12
 276:	20 ec       	ldi	r18, 0xC0	; 192
 278:	d2 22       	and	r13, r18
 27a:	2f e0       	ldi	r18, 0x0F	; 15
 27c:	f2 22       	and	r15, r18
 27e:	0b 2e       	mov	r0, r27
 280:	be e0       	ldi	r27, 0x0E	; 14
 282:	f5 94       	asr	r15
 284:	e7 94       	ror	r14
 286:	d7 94       	ror	r13
 288:	c7 94       	ror	r12
 28a:	ba 95       	dec	r27
 28c:	d1 f7       	brne	.-12     	; 0x282 <Set_AD9833+0x40>
 28e:	b0 2d       	mov	r27, r0
	int LSB = (int)((FreqReg & 0x3FFF));						  //Extract last 14 bits of FreqReg and place them at last 14 bits of MSB
 290:	eb 01       	movw	r28, r22
 292:	df 73       	andi	r29, 0x3F	; 63
	MSB|=0x4000;												  //Set D14,D15 = (1,0) for using FREQ0 registers, MSB has all 16 bits set
	LSB|=0x4000;     											  //Set D14,D15 = (1,0) for using FREQ0 registers, LSB has all 16 bits set
	SPI_send16(0x2100);											  //Define waveform and set reset bit
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	91 e2       	ldi	r25, 0x21	; 33
 298:	0e 94 8a 04 	call	0x914	; 0x914 <SPI_send16>
	SPI_send16(LSB);											  //Write LSBs
 29c:	ce 01       	movw	r24, r28
 29e:	90 64       	ori	r25, 0x40	; 64
 2a0:	0e 94 8a 04 	call	0x914	; 0x914 <SPI_send16>
	SPI_send16(MSB);											  //Write MSBs
 2a4:	c6 01       	movw	r24, r12
 2a6:	90 64       	ori	r25, 0x40	; 64
 2a8:	0e 94 8a 04 	call	0x914	; 0x914 <SPI_send16>
	phase&=0x0FFF;
 2ac:	c8 01       	movw	r24, r16
 2ae:	9f 70       	andi	r25, 0x0F	; 15
	phase|=0xC000;												  //Set Phase write enable bytes
	//SPI_write16(0xC000);										  //Mode selection for writing to phase register bit, selection of PHASE0 register (Needs to be fixed)
	SPI_send16(phase);											  //Write Phase bytes
 2b0:	90 6c       	ori	r25, 0xC0	; 192
 2b2:	0e 94 8a 04 	call	0x914	; 0x914 <SPI_send16>
	SPI_send16(0x2000);											  //Unset reset bit
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e2       	ldi	r25, 0x20	; 32
 2ba:	0e 94 8a 04 	call	0x914	; 0x914 <SPI_send16>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	08 95       	ret

000002d0 <getphase>:

unsigned int getphase(float prevPhase,float nextFreq, float prevTime)
{
 2d0:	4f 92       	push	r4
 2d2:	5f 92       	push	r5
 2d4:	6f 92       	push	r6
 2d6:	7f 92       	push	r7
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	af 92       	push	r10
 2de:	bf 92       	push	r11
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <getphase+0x22>
 2f2:	1f 92       	push	r1
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	2b 01       	movw	r4, r22
 2fa:	3c 01       	movw	r6, r24
 2fc:	49 01       	movw	r8, r18
 2fe:	5a 01       	movw	r10, r20
 300:	67 01       	movw	r12, r14
 302:	78 01       	movw	r14, r16
	prevTime/=1000000;																	//Convert time to microseconds
	prevPhase/=2048/PI;																	//Change scaling of Phase as required by AD9833
	float returnPhase=((fmod(prevTime,(1/nextFreq))*2*PI*nextFreq)+prevPhase)*2048/PI;	//Calculate phase completed by previous wave
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	9f e3       	ldi	r25, 0x3F	; 63
 30c:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 310:	69 83       	std	Y+1, r22	; 0x01
 312:	7a 83       	std	Y+2, r23	; 0x02
 314:	8b 83       	std	Y+3, r24	; 0x03
 316:	9c 83       	std	Y+4, r25	; 0x04
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	34 e2       	ldi	r19, 0x24	; 36
 31c:	44 e7       	ldi	r20, 0x74	; 116
 31e:	59 e4       	ldi	r21, 0x49	; 73
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 328:	29 81       	ldd	r18, Y+1	; 0x01
 32a:	3a 81       	ldd	r19, Y+2	; 0x02
 32c:	4b 81       	ldd	r20, Y+3	; 0x03
 32e:	5c 81       	ldd	r21, Y+4	; 0x04
 330:	0e 94 b8 06 	call	0xd70	; 0xd70 <fmod>
	return (unsigned int) returnPhase;													//Return in 16 bit format
 334:	9b 01       	movw	r18, r22
 336:	ac 01       	movw	r20, r24
 338:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
 33c:	20 ed       	ldi	r18, 0xD0	; 208
 33e:	3f e0       	ldi	r19, 0x0F	; 15
 340:	49 e4       	ldi	r20, 0x49	; 73
 342:	50 e4       	ldi	r21, 0x40	; 64
 344:	0e 94 60 07 	call	0xec0	; 0xec0 <__mulsf3>
 348:	a5 01       	movw	r20, r10
 34a:	94 01       	movw	r18, r8
 34c:	0e 94 60 07 	call	0xec0	; 0xec0 <__mulsf3>
 350:	6b 01       	movw	r12, r22
 352:	7c 01       	movw	r14, r24
 354:	2c e8       	ldi	r18, 0x8C	; 140
 356:	39 ef       	ldi	r19, 0xF9	; 249
 358:	42 e2       	ldi	r20, 0x22	; 34
 35a:	54 e4       	ldi	r21, 0x44	; 68
 35c:	c3 01       	movw	r24, r6
 35e:	b2 01       	movw	r22, r4
 360:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	c7 01       	movw	r24, r14
 36a:	b6 01       	movw	r22, r12
 36c:	0e 94 5c 05 	call	0xab8	; 0xab8 <__addsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	55 e4       	ldi	r21, 0x45	; 69
 378:	0e 94 60 07 	call	0xec0	; 0xec0 <__mulsf3>
 37c:	20 ed       	ldi	r18, 0xD0	; 208
 37e:	3f e0       	ldi	r19, 0x0F	; 15
 380:	49 e4       	ldi	r20, 0x49	; 73
 382:	50 e4       	ldi	r21, 0x40	; 64
 384:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divsf3>
 388:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixunssfsi>
}
 38c:	cb 01       	movw	r24, r22
 38e:	24 96       	adiw	r28, 0x04	; 4
 390:	cd bf       	out	0x3d, r28	; 61
 392:	de bf       	out	0x3e, r29	; 62
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <main>:
volatile int frequency=1757,phase=0,prevPhase=0,prevFreq=0,pixelCount=0;
volatile uint8_t sectorAdress=0, pageAddress=0, byteAddress=0;

int main(void)
{
	setUp16MhzExternalOsc();	//Required for setting 16Mhz frequency
 3b6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <setUp16MhzExternalOsc>
	SetClock0();				//Initialize 532 us interrupts
 3ba:	0e 94 b9 04 	call	0x972	; 0x972 <SetClock0>
	SPI_Master_init();			//Initialize SPI for AD9833
 3be:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SPI_Master_init>
	//eepromInit();				//Initialize SPI for EEPROM
	SetUsart();					
 3c2:	0e 94 00 05 	call	0xa00	; 0xa00 <SetUsart>
	SPI_send16(0x100);			//Reset AD9833
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 8a 04 	call	0x914	; 0x914 <SPI_send16>
	cli();
 3ce:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	81 ee       	ldi	r24, 0xE1	; 225
 3d4:	94 e0       	ldi	r25, 0x04	; 4
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x20>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x2a>
 3e0:	00 00       	nop
	//Test Frequency 
	/*Set_AD9833(1000,0);*/
	//VIS Code 
		{_delay_ms(100); 
		Set_AD9833(1900,0);	_delay_ms(300);	//leader tone
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e8       	ldi	r23, 0x80	; 128
 3ea:	8d ee       	ldi	r24, 0xED	; 237
 3ec:	94 e4       	ldi	r25, 0x44	; 68
 3ee:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 3f2:	ef ef       	ldi	r30, 0xFF	; 255
 3f4:	f5 ea       	ldi	r31, 0xA5	; 165
 3f6:	2e e0       	ldi	r18, 0x0E	; 14
 3f8:	e1 50       	subi	r30, 0x01	; 1
 3fa:	f0 40       	sbci	r31, 0x00	; 0
 3fc:	20 40       	sbci	r18, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x42>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
		Set_AD9833(1200,0);	_delay_ms(10);	//break
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	86 e9       	ldi	r24, 0x96	; 150
 40e:	94 e4       	ldi	r25, 0x44	; 68
 410:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 414:	8f e3       	ldi	r24, 0x3F	; 63
 416:	9c e9       	ldi	r25, 0x9C	; 156
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
		Set_AD9833(1900,0);	_delay_ms(300);	//leader
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e8       	ldi	r23, 0x80	; 128
 428:	8d ee       	ldi	r24, 0xED	; 237
 42a:	94 e4       	ldi	r25, 0x44	; 68
 42c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 430:	9f ef       	ldi	r25, 0xFF	; 255
 432:	e5 ea       	ldi	r30, 0xA5	; 165
 434:	fe e0       	ldi	r31, 0x0E	; 14
 436:	91 50       	subi	r25, 0x01	; 1
 438:	e0 40       	sbci	r30, 0x00	; 0
 43a:	f0 40       	sbci	r31, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 440:	00 00       	nop
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//VIS start bit
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	86 e9       	ldi	r24, 0x96	; 150
 44c:	94 e4       	ldi	r25, 0x44	; 68
 44e:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 452:	2f e7       	ldi	r18, 0x7F	; 127
 454:	8a e6       	ldi	r24, 0x6A	; 106
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	e3 e0       	ldi	r30, 0x03	; 3
 466:	ff e0       	ldi	r31, 0x0F	; 15
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46e:	00 00       	nop
		//PD90 VIS code = 99d = 0b1100011
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 0=1
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	70 e8       	ldi	r23, 0x80	; 128
 478:	89 e8       	ldi	r24, 0x89	; 137
 47a:	94 e4       	ldi	r25, 0x44	; 68
 47c:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	ff e7       	ldi	r31, 0x7F	; 127
 482:	2a e6       	ldi	r18, 0x6A	; 106
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	f1 50       	subi	r31, 0x01	; 1
 488:	20 40       	sbci	r18, 0x00	; 0
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 492:	e3 e0       	ldi	r30, 0x03	; 3
 494:	ff e0       	ldi	r31, 0x0F	; 15
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 1=1
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e8       	ldi	r23, 0x80	; 128
 4a6:	89 e8       	ldi	r24, 0x89	; 137
 4a8:	94 e4       	ldi	r25, 0x44	; 68
 4aa:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	ff e7       	ldi	r31, 0x7F	; 127
 4b0:	2a e6       	ldi	r18, 0x6A	; 106
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	f1 50       	subi	r31, 0x01	; 1
 4b6:	20 40       	sbci	r18, 0x00	; 0
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c0:	e3 e0       	ldi	r30, 0x03	; 3
 4c2:	ff e0       	ldi	r31, 0x0F	; 15
 4c4:	31 97       	sbiw	r30, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);  _delay_us(961);	//bit 2=0
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	70 e8       	ldi	r23, 0x80	; 128
 4d4:	82 ea       	ldi	r24, 0xA2	; 162
 4d6:	94 e4       	ldi	r25, 0x44	; 68
 4d8:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4dc:	ff e7       	ldi	r31, 0x7F	; 127
 4de:	2a e6       	ldi	r18, 0x6A	; 106
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	f1 50       	subi	r31, 0x01	; 1
 4e4:	20 40       	sbci	r18, 0x00	; 0
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4ec:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	e3 e0       	ldi	r30, 0x03	; 3
 4f0:	ff e0       	ldi	r31, 0x0F	; 15
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//bit 3=0
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e8       	ldi	r23, 0x80	; 128
 502:	82 ea       	ldi	r24, 0xA2	; 162
 504:	94 e4       	ldi	r25, 0x44	; 68
 506:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50a:	ff e7       	ldi	r31, 0x7F	; 127
 50c:	2a e6       	ldi	r18, 0x6A	; 106
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	f1 50       	subi	r31, 0x01	; 1
 512:	20 40       	sbci	r18, 0x00	; 0
 514:	80 40       	sbci	r24, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 518:	00 c0       	rjmp	.+0      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 51a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	e3 e0       	ldi	r30, 0x03	; 3
 51e:	ff e0       	ldi	r31, 0x0F	; 15
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 524:	00 c0       	rjmp	.+0      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 526:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//bit 4=0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e8       	ldi	r23, 0x80	; 128
 530:	82 ea       	ldi	r24, 0xA2	; 162
 532:	94 e4       	ldi	r25, 0x44	; 68
 534:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 538:	ff e7       	ldi	r31, 0x7F	; 127
 53a:	2a e6       	ldi	r18, 0x6A	; 106
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	f1 50       	subi	r31, 0x01	; 1
 540:	20 40       	sbci	r18, 0x00	; 0
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 548:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	e3 e0       	ldi	r30, 0x03	; 3
 54c:	ff e0       	ldi	r31, 0x0F	; 15
 54e:	31 97       	sbiw	r30, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 554:	00 00       	nop
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 5=1
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	70 e8       	ldi	r23, 0x80	; 128
 55e:	89 e8       	ldi	r24, 0x89	; 137
 560:	94 e4       	ldi	r25, 0x44	; 68
 562:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 566:	ff e7       	ldi	r31, 0x7F	; 127
 568:	2a e6       	ldi	r18, 0x6A	; 106
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	f1 50       	subi	r31, 0x01	; 1
 56e:	20 40       	sbci	r18, 0x00	; 0
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 576:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 578:	e3 e0       	ldi	r30, 0x03	; 3
 57a:	ff e0       	ldi	r31, 0x0F	; 15
 57c:	31 97       	sbiw	r30, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 580:	00 c0       	rjmp	.+0      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 582:	00 00       	nop
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 6=1
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	70 e8       	ldi	r23, 0x80	; 128
 58c:	89 e8       	ldi	r24, 0x89	; 137
 58e:	94 e4       	ldi	r25, 0x44	; 68
 590:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 594:	ff e7       	ldi	r31, 0x7F	; 127
 596:	2a e6       	ldi	r18, 0x6A	; 106
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	f1 50       	subi	r31, 0x01	; 1
 59c:	20 40       	sbci	r18, 0x00	; 0
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	e1 f7       	brne	.-8      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5a4:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a6:	e3 e0       	ldi	r30, 0x03	; 3
 5a8:	ff e0       	ldi	r31, 0x0F	; 15
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5b0:	00 00       	nop
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//Parity bit
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	70 e8       	ldi	r23, 0x80	; 128
 5ba:	82 ea       	ldi	r24, 0xA2	; 162
 5bc:	94 e4       	ldi	r25, 0x44	; 68
 5be:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c2:	ff e7       	ldi	r31, 0x7F	; 127
 5c4:	2a e6       	ldi	r18, 0x6A	; 106
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	f1 50       	subi	r31, 0x01	; 1
 5ca:	20 40       	sbci	r18, 0x00	; 0
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5d2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d4:	e3 e0       	ldi	r30, 0x03	; 3
 5d6:	ff e0       	ldi	r31, 0x0F	; 15
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5de:	00 00       	nop
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
 5e0:	40 e0       	ldi	r20, 0x00	; 0
 5e2:	50 e0       	ldi	r21, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	86 e9       	ldi	r24, 0x96	; 150
 5ea:	94 e4       	ldi	r25, 0x44	; 68
 5ec:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f0:	ff e7       	ldi	r31, 0x7F	; 127
 5f2:	2a e6       	ldi	r18, 0x6A	; 106
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	f1 50       	subi	r31, 0x01	; 1
 5f8:	20 40       	sbci	r18, 0x00	; 0
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 600:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 602:	e3 e0       	ldi	r30, 0x03	; 3
 604:	ff e0       	ldi	r31, 0x0F	; 15
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 60c:	00 00       	nop
 60e:	c1 e8       	ldi	r28, 0x81	; 129
 610:	d0 e0       	ldi	r29, 0x00	; 0
		{	
			Set_AD9833(1200,0); _delay_ms(19); _delay_us(952);	//Sync Pulse
			Set_AD9833(1500,0); _delay_ms(2); _delay_us(32);	//Porch
		//Pixel Interrupt sequence
			pixelCount=0;
			TCC0.CNT=0;
 612:	00 e0       	ldi	r16, 0x00	; 0
 614:	18 e0       	ldi	r17, 0x08	; 8
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
		}
	//Image Data	
		for(int lineSet=0; lineSet<=128; lineSet++)
		{	
			Set_AD9833(1200,0); _delay_ms(19); _delay_us(952);	//Sync Pulse
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	86 e9       	ldi	r24, 0x96	; 150
 620:	94 e4       	ldi	r25, 0x44	; 68
 622:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 626:	ff e7       	ldi	r31, 0x7F	; 127
 628:	2d ee       	ldi	r18, 0xED	; 237
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	f1 50       	subi	r31, 0x01	; 1
 62e:	20 40       	sbci	r18, 0x00	; 0
 630:	80 40       	sbci	r24, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 634:	00 c0       	rjmp	.+0      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 636:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 638:	ef ed       	ldi	r30, 0xDF	; 223
 63a:	fe e0       	ldi	r31, 0x0E	; 14
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 640:	00 c0       	rjmp	.+0      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 642:	00 00       	nop
			Set_AD9833(1500,0); _delay_ms(2); _delay_us(32);	//Porch
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	70 e8       	ldi	r23, 0x80	; 128
 64c:	8b eb       	ldi	r24, 0xBB	; 187
 64e:	94 e4       	ldi	r25, 0x44	; 68
 650:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 654:	8f e3       	ldi	r24, 0x3F	; 63
 656:	9f e1       	ldi	r25, 0x1F	; 31
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 65e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 660:	9a ea       	ldi	r25, 0xAA	; 170
 662:	9a 95       	dec	r25
 664:	f1 f7       	brne	.-4      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 666:	00 c0       	rjmp	.+0      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
		//Pixel Interrupt sequence
			pixelCount=0;
 668:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
 66c:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <__data_end+0x1>
			TCC0.CNT=0;
 670:	f8 01       	movw	r30, r16
 672:	10 a2       	std	Z+32, r1	; 0x20
 674:	11 a2       	std	Z+33, r1	; 0x21
			sei();
 676:	78 94       	sei
			while(pixelCount<=1280);
 678:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 67c:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	95 40       	sbci	r25, 0x05	; 5
 684:	cc f3       	brlt	.-14     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			cli();
 686:	f8 94       	cli
 688:	21 97       	sbiw	r28, 0x01	; 1
		Set_AD9833(1100,0);	_delay_ms(29);	_delay_us(961);	//bit 6=1
		Set_AD9833(1300,0);	_delay_ms(29);	_delay_us(961);	//Parity bit
		Set_AD9833(1200,0);	_delay_ms(29);	_delay_us(961);	//stop bit
		}
	//Image Data	
		for(int lineSet=0; lineSet<=128; lineSet++)
 68a:	29 f6       	brne	.-118    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
			TCC0.CNT=0;
			sei();
			while(pixelCount<=1280);
			cli();
		}
		Set_AD9833(0,0);
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	cb 01       	movw	r24, r22
 696:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>

0000069c <__vector_16>:
		;
	}
}

ISR(TCC0_CCA_vect)
{
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	0b b6       	in	r0, 0x3b	; 59
 6a8:	0f 92       	push	r0
 6aa:	8f 92       	push	r8
 6ac:	9f 92       	push	r9
 6ae:	af 92       	push	r10
 6b0:	bf 92       	push	r11
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
	Set_AD9833(frequency,phase);											//Set waveform generator with frequency and phase calculated in previous cycle
 6d6:	c0 91 0a 20 	lds	r28, 0x200A	; 0x80200a <phase>
 6da:	d0 91 0b 20 	lds	r29, 0x200B	; 0x80200b <phase+0x1>
 6de:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
 6e2:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
 6e6:	07 2e       	mov	r0, r23
 6e8:	00 0c       	add	r0, r0
 6ea:	88 0b       	sbc	r24, r24
 6ec:	99 0b       	sbc	r25, r25
 6ee:	0e 94 72 06 	call	0xce4	; 0xce4 <__floatsisf>
 6f2:	ae 01       	movw	r20, r28
 6f4:	0e 94 21 01 	call	0x242	; 0x242 <Set_AD9833>
	prevPhase=phase;														//Save previous wave's ending phase for next phase calculation
 6f8:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <phase>
 6fc:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <phase+0x1>
 700:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <prevPhase>
 704:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <prevPhase+0x1>
	prevFreq=frequency;														//Save previous wave's ending frequency for next phase calculation
 708:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 70c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
 710:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <prevFreq>
 714:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <prevFreq+0x1>
//	frequency = 1500 + (frequency* 3.1372549);								//Converting one byte color data to 2 byte frequency
	// Code for generating single color image
// 	if(pixelCount==319) frequency = 2253;
// 	else if(pixelCount==639) frequency = 1782;
// 	else if(pixelCount==959) frequency = 1757;
if(((pixelCount)%20)==0)
 718:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 71c:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
 720:	64 e1       	ldi	r22, 0x14	; 20
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__divmodhi4>
 728:	89 2b       	or	r24, r25
 72a:	09 f0       	breq	.+2      	; 0x72e <__vector_16+0x92>
 72c:	67 c0       	rjmp	.+206    	; 0x7fc <__vector_16+0x160>
	{
		int t = (pixelCount)/20;
 72e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 732:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
 736:	64 e1       	ldi	r22, 0x14	; 20
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__divmodhi4>
 73e:	cb 01       	movw	r24, r22
		if((t%2)==0)
 740:	60 fd       	sbrc	r22, 0
 742:	28 c0       	rjmp	.+80     	; 0x794 <__vector_16+0xf8>
		{
			if(t<15) frequency = 1757;
 744:	6f 30       	cpi	r22, 0x0F	; 15
 746:	71 05       	cpc	r23, r1
 748:	3c f4       	brge	.+14     	; 0x758 <__vector_16+0xbc>
 74a:	8d ed       	ldi	r24, 0xDD	; 221
 74c:	96 e0       	ldi	r25, 0x06	; 6
 74e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 752:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 756:	52 c0       	rjmp	.+164    	; 0x7fc <__vector_16+0x160>
			else if(t<31) frequency = 2253;
 758:	6f 31       	cpi	r22, 0x1F	; 31
 75a:	71 05       	cpc	r23, r1
 75c:	3c f4       	brge	.+14     	; 0x76c <__vector_16+0xd0>
 75e:	8d ec       	ldi	r24, 0xCD	; 205
 760:	98 e0       	ldi	r25, 0x08	; 8
 762:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 766:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 76a:	48 c0       	rjmp	.+144    	; 0x7fc <__vector_16+0x160>
			else if(t<47) frequency = 1782;
 76c:	6f 32       	cpi	r22, 0x2F	; 47
 76e:	71 05       	cpc	r23, r1
 770:	3c f4       	brge	.+14     	; 0x780 <__vector_16+0xe4>
 772:	86 ef       	ldi	r24, 0xF6	; 246
 774:	96 e0       	ldi	r25, 0x06	; 6
 776:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 77a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 77e:	3e c0       	rjmp	.+124    	; 0x7fc <__vector_16+0x160>
			else if(t<63) frequency = 1757;
 780:	6f 33       	cpi	r22, 0x3F	; 63
 782:	71 05       	cpc	r23, r1
 784:	dc f5       	brge	.+118    	; 0x7fc <__vector_16+0x160>
 786:	8d ed       	ldi	r24, 0xDD	; 221
 788:	96 e0       	ldi	r25, 0x06	; 6
 78a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 78e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 792:	34 c0       	rjmp	.+104    	; 0x7fc <__vector_16+0x160>
		}
		else if((t%2)==1)
 794:	61 70       	andi	r22, 0x01	; 1
 796:	70 78       	andi	r23, 0x80	; 128
 798:	77 23       	and	r23, r23
 79a:	34 f4       	brge	.+12     	; 0x7a8 <__vector_16+0x10c>
 79c:	61 50       	subi	r22, 0x01	; 1
 79e:	71 09       	sbc	r23, r1
 7a0:	6e 6f       	ori	r22, 0xFE	; 254
 7a2:	7f 6f       	ori	r23, 0xFF	; 255
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	61 30       	cpi	r22, 0x01	; 1
 7aa:	71 05       	cpc	r23, r1
 7ac:	39 f5       	brne	.+78     	; 0x7fc <__vector_16+0x160>
		{
			if(t<16) frequency = 1955;
 7ae:	80 31       	cpi	r24, 0x10	; 16
 7b0:	91 05       	cpc	r25, r1
 7b2:	3c f4       	brge	.+14     	; 0x7c2 <__vector_16+0x126>
 7b4:	83 ea       	ldi	r24, 0xA3	; 163
 7b6:	97 e0       	ldi	r25, 0x07	; 7
 7b8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 7bc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 7c0:	1d c0       	rjmp	.+58     	; 0x7fc <__vector_16+0x160>
			else if(t<32) frequency = 1607;
 7c2:	80 32       	cpi	r24, 0x20	; 32
 7c4:	91 05       	cpc	r25, r1
 7c6:	3c f4       	brge	.+14     	; 0x7d6 <__vector_16+0x13a>
 7c8:	87 e4       	ldi	r24, 0x47	; 71
 7ca:	96 e0       	ldi	r25, 0x06	; 6
 7cc:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 7d0:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 7d4:	13 c0       	rjmp	.+38     	; 0x7fc <__vector_16+0x160>
			else if(t<48) frequency = 1669;
 7d6:	80 33       	cpi	r24, 0x30	; 48
 7d8:	91 05       	cpc	r25, r1
 7da:	3c f4       	brge	.+14     	; 0x7ea <__vector_16+0x14e>
 7dc:	85 e8       	ldi	r24, 0x85	; 133
 7de:	96 e0       	ldi	r25, 0x06	; 6
 7e0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 7e4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <__vector_16+0x160>
			else if(t<64) frequency = 1955;
 7ea:	80 34       	cpi	r24, 0x40	; 64
 7ec:	91 05       	cpc	r25, r1
 7ee:	34 f4       	brge	.+12     	; 0x7fc <__vector_16+0x160>
 7f0:	83 ea       	ldi	r24, 0xA3	; 163
 7f2:	97 e0       	ldi	r25, 0x07	; 7
 7f4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 7f8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
	}

	phase=getphase(prevPhase,prevFreq,532);									//Retrieve phase for next wave
 7fc:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <prevFreq>
 800:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <prevFreq+0x1>
 804:	c0 91 08 20 	lds	r28, 0x2008	; 0x802008 <prevPhase>
 808:	d0 91 09 20 	lds	r29, 0x2009	; 0x802009 <prevPhase+0x1>
 80c:	07 2e       	mov	r0, r23
 80e:	00 0c       	add	r0, r0
 810:	88 0b       	sbc	r24, r24
 812:	99 0b       	sbc	r25, r25
 814:	0e 94 72 06 	call	0xce4	; 0xce4 <__floatsisf>
 818:	4b 01       	movw	r8, r22
 81a:	5c 01       	movw	r10, r24
 81c:	be 01       	movw	r22, r28
 81e:	dd 0f       	add	r29, r29
 820:	88 0b       	sbc	r24, r24
 822:	99 0b       	sbc	r25, r25
 824:	0e 94 72 06 	call	0xce4	; 0xce4 <__floatsisf>
 828:	e1 2c       	mov	r14, r1
 82a:	f1 2c       	mov	r15, r1
 82c:	05 e0       	ldi	r16, 0x05	; 5
 82e:	14 e4       	ldi	r17, 0x44	; 68
 830:	a5 01       	movw	r20, r10
 832:	94 01       	movw	r18, r8
 834:	0e 94 68 01 	call	0x2d0	; 0x2d0 <getphase>
 838:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <phase>
 83c:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <phase+0x1>
	pixelCount++;
 840:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 844:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__data_end+0x1>
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
 84e:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <__data_end+0x1>
}
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	bf 91       	pop	r27
 85c:	af 91       	pop	r26
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	7f 91       	pop	r23
 864:	6f 91       	pop	r22
 866:	5f 91       	pop	r21
 868:	4f 91       	pop	r20
 86a:	3f 91       	pop	r19
 86c:	2f 91       	pop	r18
 86e:	1f 91       	pop	r17
 870:	0f 91       	pop	r16
 872:	ff 90       	pop	r15
 874:	ef 90       	pop	r14
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	9f 90       	pop	r9
 87c:	8f 90       	pop	r8
 87e:	0f 90       	pop	r0
 880:	0b be       	out	0x3b, r0	; 59
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <SPI_MasterTransceiveByte>:
uint8_t SPI_receive8()
{
	SPI_MasterCreateDataPacket(&dataPacket,masterSendData,masterReceivedData,NUM_BYTES,&PORTC,PIN4_bm);		
	SPI_MasterTransceivePacket(&spiMasterC, &dataPacket);	//Wait for reception
	return masterReceivedData[0];							
}
 88c:	dc 01       	movw	r26, r24
 88e:	ed 91       	ld	r30, X+
 890:	fc 91       	ld	r31, X
 892:	11 97       	sbiw	r26, 0x01	; 1
 894:	63 83       	std	Z+3, r22	; 0x03
 896:	ed 91       	ld	r30, X+
 898:	fc 91       	ld	r31, X
 89a:	82 81       	ldd	r24, Z+2	; 0x02
 89c:	88 23       	and	r24, r24
 89e:	ec f7       	brge	.-6      	; 0x89a <SPI_MasterTransceiveByte+0xe>
 8a0:	83 81       	ldd	r24, Z+3	; 0x03
 8a2:	9f ef       	ldi	r25, 0xFF	; 255
 8a4:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	81 11       	cpse	r24, r1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 8b2:	08 95       	ret

000008b4 <SPI_Master_init>:
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	a0 e4       	ldi	r26, 0x40	; 64
 8ba:	b6 e0       	ldi	r27, 0x06	; 6
 8bc:	80 e1       	ldi	r24, 0x10	; 16
 8be:	11 96       	adiw	r26, 0x01	; 1
 8c0:	8c 93       	st	X, r24
 8c2:	11 97       	sbiw	r26, 0x01	; 1
 8c4:	90 e2       	ldi	r25, 0x20	; 32
 8c6:	11 96       	adiw	r26, 0x01	; 1
 8c8:	9c 93       	st	X, r25
 8ca:	11 97       	sbiw	r26, 0x01	; 1
 8cc:	90 e8       	ldi	r25, 0x80	; 128
 8ce:	11 96       	adiw	r26, 0x01	; 1
 8d0:	9c 93       	st	X, r25
 8d2:	11 97       	sbiw	r26, 0x01	; 1
 8d4:	98 e3       	ldi	r25, 0x38	; 56
 8d6:	54 96       	adiw	r26, 0x14	; 20
 8d8:	9c 93       	st	X, r25
 8da:	54 97       	sbiw	r26, 0x14	; 20
 8dc:	15 96       	adiw	r26, 0x05	; 5
 8de:	8c 93       	st	X, r24
 8e0:	15 97       	sbiw	r26, 0x05	; 5
 8e2:	e4 e1       	ldi	r30, 0x14	; 20
 8e4:	f0 e2       	ldi	r31, 0x20	; 32
 8e6:	c0 ec       	ldi	r28, 0xC0	; 192
 8e8:	d8 e0       	ldi	r29, 0x08	; 8
 8ea:	c0 83       	st	Z, r28
 8ec:	d1 83       	std	Z+1, r29	; 0x01
 8ee:	a2 83       	std	Z+2, r26	; 0x02
 8f0:	b3 83       	std	Z+3, r27	; 0x03
 8f2:	14 82       	std	Z+4, r1	; 0x04
 8f4:	88 ed       	ldi	r24, 0xD8	; 216
 8f6:	88 83       	st	Y, r24
 8f8:	a0 81       	ld	r26, Z
 8fa:	b1 81       	ldd	r27, Z+1	; 0x01
 8fc:	11 96       	adiw	r26, 0x01	; 1
 8fe:	1c 92       	st	X, r1
 900:	15 82       	std	Z+5, r1	; 0x05
 902:	16 82       	std	Z+6, r1	; 0x06
 904:	02 80       	ldd	r0, Z+2	; 0x02
 906:	f3 81       	ldd	r31, Z+3	; 0x03
 908:	e0 2d       	mov	r30, r0
 90a:	80 ea       	ldi	r24, 0xA0	; 160
 90c:	81 83       	std	Z+1, r24	; 0x01
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <SPI_send16>:
void SPI_send16(uint16_t data)
{
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	f8 2e       	mov	r15, r24
	PORTA_DIRSET = PIN0_bm;
 920:	c1 e0       	ldi	r28, 0x01	; 1
 922:	c0 93 01 06 	sts	0x0601, r28	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	PORTF_DIRSET = PIN0_bm|PIN1_bm|PIN2_bm|PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTA_OUTSET = PIN0_bm;
 92c:	05 e0       	ldi	r16, 0x05	; 5
 92e:	16 e0       	ldi	r17, 0x06	; 6
 930:	f8 01       	movw	r30, r16
 932:	c0 83       	st	Z, r28
	uint8_t MSdata = ((data>>8) & 0x00FF);		//filter out MS
	uint8_t LSdata = (data & 0x00FF);			//filter out LS
	SPI_MasterSSLow(ssPort, PIN4_bm);			//Set Slave Select Low
 934:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssPort>
 938:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssPort+0x1>
 93c:	d0 e1       	ldi	r29, 0x10	; 16
 93e:	d6 83       	std	Z+6, r29	; 0x06
	PORTA_OUTCLR = PIN0_bm;				
 940:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	SPI_MasterTransceiveByte(&spiMasterC, MSdata); 
 944:	69 2f       	mov	r22, r25
 946:	84 e1       	ldi	r24, 0x14	; 20
 948:	90 e2       	ldi	r25, 0x20	; 32
 94a:	0e 94 46 04 	call	0x88c	; 0x88c <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterC, LSdata);
 94e:	6f 2d       	mov	r22, r15
 950:	84 e1       	ldi	r24, 0x14	; 20
 952:	90 e2       	ldi	r25, 0x20	; 32
 954:	0e 94 46 04 	call	0x88c	; 0x88c <SPI_MasterTransceiveByte>
	SPI_MasterSSHigh(ssPort, PIN4_bm);			//Set Slave Select High
 958:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <ssPort>
 95c:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <ssPort+0x1>
 960:	d5 83       	std	Z+5, r29	; 0x05
	PORTA_OUTSET = PIN0_bm;
 962:	f8 01       	movw	r30, r16
 964:	c0 83       	st	Z, r28
}
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	0f 91       	pop	r16
 96e:	ff 90       	pop	r15
 970:	08 95       	ret

00000972 <SetClock0>:
}

void SetClock1()
{	
	TCC1.PER = 0xFF;					//Set period 
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;	//Set Prescaler 1
 972:	e0 e0       	ldi	r30, 0x00	; 0
 974:	f8 e0       	ldi	r31, 0x08	; 8
 976:	81 e1       	ldi	r24, 0x11	; 17
 978:	81 83       	std	Z+1, r24	; 0x01
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	87 83       	std	Z+7, r24	; 0x07
 97e:	2f ef       	ldi	r18, 0xFF	; 255
 980:	3f ef       	ldi	r19, 0xFF	; 255
 982:	26 a3       	std	Z+38, r18	; 0x26
 984:	37 a3       	std	Z+39, r19	; 0x27
 986:	25 e4       	ldi	r18, 0x45	; 69
 988:	31 e2       	ldi	r19, 0x21	; 33
 98a:	20 93 28 08 	sts	0x0828, r18	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 98e:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
 992:	80 83       	st	Z, r24
 994:	e0 ea       	ldi	r30, 0xA0	; 160
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	82 81       	ldd	r24, Z+2	; 0x02
 99a:	81 60       	ori	r24, 0x01	; 1
 99c:	82 83       	std	Z+2, r24	; 0x02
 99e:	08 95       	ret

000009a0 <setUp16MhzExternalOsc>:
}

void setUp16MhzExternalOsc()
{
	PORTD_DIR = 0x01;
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 9a6:	8b ec       	ldi	r24, 0xCB	; 203
 9a8:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
 9ac:	e0 e5       	ldi	r30, 0x50	; 80
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	88 60       	ori	r24, 0x08	; 8
 9b4:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
 9b6:	e1 e5       	ldi	r30, 0x51	; 81
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	83 ff       	sbrs	r24, 3
 9be:	fd cf       	rjmp	.-6      	; 0x9ba <setUp16MhzExternalOsc+0x1a>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
 9c0:	88 ed       	ldi	r24, 0xD8	; 216
 9c2:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
 9c4:	83 e0       	ldi	r24, 0x03	; 3
 9c6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 9ca:	08 95       	ret

000009cc <USART_DataRegEmpty>:
	uint16_t LSdata = (data & 0x00FF);				//filter out LS
	sei();											//Enable global interrupts
	USART_TXBuffer_PutByte(&USART_data, MSdata);	//Write MSdata and wait for transfer
	USART_TXBuffer_PutByte(&USART_data, LSdata);	//Write LSdata and wait for transfer
	cli();											//Disable global interrupts
}
 9cc:	fc 01       	movw	r30, r24
 9ce:	96 85       	ldd	r25, Z+14	; 0x0e
 9d0:	85 85       	ldd	r24, Z+13	; 0x0d
 9d2:	98 13       	cpse	r25, r24
 9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <USART_DataRegEmpty+0x18>
 9d6:	01 90       	ld	r0, Z+
 9d8:	f0 81       	ld	r31, Z
 9da:	e0 2d       	mov	r30, r0
 9dc:	83 81       	ldd	r24, Z+3	; 0x03
 9de:	8c 7f       	andi	r24, 0xFC	; 252
 9e0:	83 83       	std	Z+3, r24	; 0x03
 9e2:	08 95       	ret
 9e4:	86 85       	ldd	r24, Z+14	; 0x0e
 9e6:	df 01       	movw	r26, r30
 9e8:	a8 0f       	add	r26, r24
 9ea:	b1 1d       	adc	r27, r1
 9ec:	17 96       	adiw	r26, 0x07	; 7
 9ee:	8c 91       	ld	r24, X
 9f0:	a0 81       	ld	r26, Z
 9f2:	b1 81       	ldd	r27, Z+1	; 0x01
 9f4:	8c 93       	st	X, r24
 9f6:	86 85       	ldd	r24, Z+14	; 0x0e
 9f8:	8f 5f       	subi	r24, 0xFF	; 255
 9fa:	83 70       	andi	r24, 0x03	; 3
 9fc:	86 87       	std	Z+14, r24	; 0x0e
 9fe:	08 95       	ret

00000a00 <SetUsart>:
 a00:	e0 e4       	ldi	r30, 0x40	; 64
 a02:	f6 e0       	ldi	r31, 0x06	; 6
 a04:	88 e0       	ldi	r24, 0x08	; 8
 a06:	81 83       	std	Z+1, r24	; 0x01
 a08:	84 e0       	ldi	r24, 0x04	; 4
 a0a:	82 83       	std	Z+2, r24	; 0x02
 a0c:	a5 e2       	ldi	r26, 0x25	; 37
 a0e:	b0 e2       	ldi	r27, 0x20	; 32
 a10:	e0 ea       	ldi	r30, 0xA0	; 160
 a12:	f8 e0       	ldi	r31, 0x08	; 8
 a14:	ed 93       	st	X+, r30
 a16:	fc 93       	st	X, r31
 a18:	11 97       	sbiw	r26, 0x01	; 1
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	12 96       	adiw	r26, 0x02	; 2
 a1e:	8c 93       	st	X, r24
 a20:	12 97       	sbiw	r26, 0x02	; 2
 a22:	1c 96       	adiw	r26, 0x0c	; 12
 a24:	1c 92       	st	X, r1
 a26:	1c 97       	sbiw	r26, 0x0c	; 12
 a28:	1b 96       	adiw	r26, 0x0b	; 11
 a2a:	1c 92       	st	X, r1
 a2c:	1b 97       	sbiw	r26, 0x0b	; 11
 a2e:	1e 96       	adiw	r26, 0x0e	; 14
 a30:	1c 92       	st	X, r1
 a32:	1e 97       	sbiw	r26, 0x0e	; 14
 a34:	1d 96       	adiw	r26, 0x0d	; 13
 a36:	1c 92       	st	X, r1
 a38:	83 e0       	ldi	r24, 0x03	; 3
 a3a:	85 83       	std	Z+5, r24	; 0x05
 a3c:	83 81       	ldd	r24, Z+3	; 0x03
 a3e:	8f 7c       	andi	r24, 0xCF	; 207
 a40:	80 61       	ori	r24, 0x10	; 16
 a42:	83 83       	std	Z+3, r24	; 0x03
 a44:	8c e0       	ldi	r24, 0x0C	; 12
 a46:	86 83       	std	Z+6, r24	; 0x06
 a48:	17 82       	std	Z+7, r1	; 0x07
 a4a:	84 81       	ldd	r24, Z+4	; 0x04
 a4c:	80 61       	ori	r24, 0x10	; 16
 a4e:	84 83       	std	Z+4, r24	; 0x04
 a50:	84 81       	ldd	r24, Z+4	; 0x04
 a52:	88 60       	ori	r24, 0x08	; 8
 a54:	84 83       	std	Z+4, r24	; 0x04
 a56:	e0 ea       	ldi	r30, 0xA0	; 160
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	82 81       	ldd	r24, Z+2	; 0x02
 a5c:	81 60       	ori	r24, 0x01	; 1
 a5e:	82 83       	std	Z+2, r24	; 0x02
 a60:	08 95       	ret

00000a62 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
 a62:	1f 92       	push	r1
 a64:	0f 92       	push	r0
 a66:	0f b6       	in	r0, 0x3f	; 63
 a68:	0f 92       	push	r0
 a6a:	11 24       	eor	r1, r1
 a6c:	0b b6       	in	r0, 0x3b	; 59
 a6e:	0f 92       	push	r0
 a70:	2f 93       	push	r18
 a72:	3f 93       	push	r19
 a74:	4f 93       	push	r20
 a76:	5f 93       	push	r21
 a78:	6f 93       	push	r22
 a7a:	7f 93       	push	r23
 a7c:	8f 93       	push	r24
 a7e:	9f 93       	push	r25
 a80:	af 93       	push	r26
 a82:	bf 93       	push	r27
 a84:	ef 93       	push	r30
 a86:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
 a88:	85 e2       	ldi	r24, 0x25	; 37
 a8a:	90 e2       	ldi	r25, 0x20	; 32
 a8c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <USART_DataRegEmpty>
}
 a90:	ff 91       	pop	r31
 a92:	ef 91       	pop	r30
 a94:	bf 91       	pop	r27
 a96:	af 91       	pop	r26
 a98:	9f 91       	pop	r25
 a9a:	8f 91       	pop	r24
 a9c:	7f 91       	pop	r23
 a9e:	6f 91       	pop	r22
 aa0:	5f 91       	pop	r21
 aa2:	4f 91       	pop	r20
 aa4:	3f 91       	pop	r19
 aa6:	2f 91       	pop	r18
 aa8:	0f 90       	pop	r0
 aaa:	0b be       	out	0x3b, r0	; 59
 aac:	0f 90       	pop	r0
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	0f 90       	pop	r0
 ab2:	1f 90       	pop	r1
 ab4:	18 95       	reti

00000ab6 <__subsf3>:
 ab6:	50 58       	subi	r21, 0x80	; 128

00000ab8 <__addsf3>:
 ab8:	bb 27       	eor	r27, r27
 aba:	aa 27       	eor	r26, r26
 abc:	0e 94 73 05 	call	0xae6	; 0xae6 <__addsf3x>
 ac0:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>
 ac4:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
 ac8:	38 f0       	brcs	.+14     	; 0xad8 <__addsf3+0x20>
 aca:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
 ace:	20 f0       	brcs	.+8      	; 0xad8 <__addsf3+0x20>
 ad0:	39 f4       	brne	.+14     	; 0xae0 <__addsf3+0x28>
 ad2:	9f 3f       	cpi	r25, 0xFF	; 255
 ad4:	19 f4       	brne	.+6      	; 0xadc <__addsf3+0x24>
 ad6:	26 f4       	brtc	.+8      	; 0xae0 <__addsf3+0x28>
 ad8:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_nan>
 adc:	0e f4       	brtc	.+2      	; 0xae0 <__addsf3+0x28>
 ade:	e0 95       	com	r30
 ae0:	e7 fb       	bst	r30, 7
 ae2:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>

00000ae6 <__addsf3x>:
 ae6:	e9 2f       	mov	r30, r25
 ae8:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
 aec:	58 f3       	brcs	.-42     	; 0xac4 <__addsf3+0xc>
 aee:	ba 17       	cp	r27, r26
 af0:	62 07       	cpc	r22, r18
 af2:	73 07       	cpc	r23, r19
 af4:	84 07       	cpc	r24, r20
 af6:	95 07       	cpc	r25, r21
 af8:	20 f0       	brcs	.+8      	; 0xb02 <__addsf3x+0x1c>
 afa:	79 f4       	brne	.+30     	; 0xb1a <__addsf3x+0x34>
 afc:	a6 f5       	brtc	.+104    	; 0xb66 <__addsf3x+0x80>
 afe:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_zero>
 b02:	0e f4       	brtc	.+2      	; 0xb06 <__addsf3x+0x20>
 b04:	e0 95       	com	r30
 b06:	0b 2e       	mov	r0, r27
 b08:	ba 2f       	mov	r27, r26
 b0a:	a0 2d       	mov	r26, r0
 b0c:	0b 01       	movw	r0, r22
 b0e:	b9 01       	movw	r22, r18
 b10:	90 01       	movw	r18, r0
 b12:	0c 01       	movw	r0, r24
 b14:	ca 01       	movw	r24, r20
 b16:	a0 01       	movw	r20, r0
 b18:	11 24       	eor	r1, r1
 b1a:	ff 27       	eor	r31, r31
 b1c:	59 1b       	sub	r21, r25
 b1e:	99 f0       	breq	.+38     	; 0xb46 <__addsf3x+0x60>
 b20:	59 3f       	cpi	r21, 0xF9	; 249
 b22:	50 f4       	brcc	.+20     	; 0xb38 <__addsf3x+0x52>
 b24:	50 3e       	cpi	r21, 0xE0	; 224
 b26:	68 f1       	brcs	.+90     	; 0xb82 <__addsf3x+0x9c>
 b28:	1a 16       	cp	r1, r26
 b2a:	f0 40       	sbci	r31, 0x00	; 0
 b2c:	a2 2f       	mov	r26, r18
 b2e:	23 2f       	mov	r18, r19
 b30:	34 2f       	mov	r19, r20
 b32:	44 27       	eor	r20, r20
 b34:	58 5f       	subi	r21, 0xF8	; 248
 b36:	f3 cf       	rjmp	.-26     	; 0xb1e <__addsf3x+0x38>
 b38:	46 95       	lsr	r20
 b3a:	37 95       	ror	r19
 b3c:	27 95       	ror	r18
 b3e:	a7 95       	ror	r26
 b40:	f0 40       	sbci	r31, 0x00	; 0
 b42:	53 95       	inc	r21
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__addsf3x+0x52>
 b46:	7e f4       	brtc	.+30     	; 0xb66 <__addsf3x+0x80>
 b48:	1f 16       	cp	r1, r31
 b4a:	ba 0b       	sbc	r27, r26
 b4c:	62 0b       	sbc	r22, r18
 b4e:	73 0b       	sbc	r23, r19
 b50:	84 0b       	sbc	r24, r20
 b52:	ba f0       	brmi	.+46     	; 0xb82 <__addsf3x+0x9c>
 b54:	91 50       	subi	r25, 0x01	; 1
 b56:	a1 f0       	breq	.+40     	; 0xb80 <__addsf3x+0x9a>
 b58:	ff 0f       	add	r31, r31
 b5a:	bb 1f       	adc	r27, r27
 b5c:	66 1f       	adc	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	c2 f7       	brpl	.-16     	; 0xb54 <__addsf3x+0x6e>
 b64:	0e c0       	rjmp	.+28     	; 0xb82 <__addsf3x+0x9c>
 b66:	ba 0f       	add	r27, r26
 b68:	62 1f       	adc	r22, r18
 b6a:	73 1f       	adc	r23, r19
 b6c:	84 1f       	adc	r24, r20
 b6e:	48 f4       	brcc	.+18     	; 0xb82 <__addsf3x+0x9c>
 b70:	87 95       	ror	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	b7 95       	ror	r27
 b78:	f7 95       	ror	r31
 b7a:	9e 3f       	cpi	r25, 0xFE	; 254
 b7c:	08 f0       	brcs	.+2      	; 0xb80 <__addsf3x+0x9a>
 b7e:	b0 cf       	rjmp	.-160    	; 0xae0 <__addsf3+0x28>
 b80:	93 95       	inc	r25
 b82:	88 0f       	add	r24, r24
 b84:	08 f0       	brcs	.+2      	; 0xb88 <__addsf3x+0xa2>
 b86:	99 27       	eor	r25, r25
 b88:	ee 0f       	add	r30, r30
 b8a:	97 95       	ror	r25
 b8c:	87 95       	ror	r24
 b8e:	08 95       	ret

00000b90 <__divsf3>:
 b90:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__divsf3x>
 b94:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>
 b98:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
 b9c:	58 f0       	brcs	.+22     	; 0xbb4 <__divsf3+0x24>
 b9e:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
 ba2:	40 f0       	brcs	.+16     	; 0xbb4 <__divsf3+0x24>
 ba4:	29 f4       	brne	.+10     	; 0xbb0 <__divsf3+0x20>
 ba6:	5f 3f       	cpi	r21, 0xFF	; 255
 ba8:	29 f0       	breq	.+10     	; 0xbb4 <__divsf3+0x24>
 baa:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
 bae:	51 11       	cpse	r21, r1
 bb0:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
 bb4:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_nan>

00000bb8 <__divsf3x>:
 bb8:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
 bbc:	68 f3       	brcs	.-38     	; 0xb98 <__divsf3+0x8>

00000bbe <__divsf3_pse>:
 bbe:	99 23       	and	r25, r25
 bc0:	b1 f3       	breq	.-20     	; 0xbae <__divsf3+0x1e>
 bc2:	55 23       	and	r21, r21
 bc4:	91 f3       	breq	.-28     	; 0xbaa <__divsf3+0x1a>
 bc6:	95 1b       	sub	r25, r21
 bc8:	55 0b       	sbc	r21, r21
 bca:	bb 27       	eor	r27, r27
 bcc:	aa 27       	eor	r26, r26
 bce:	62 17       	cp	r22, r18
 bd0:	73 07       	cpc	r23, r19
 bd2:	84 07       	cpc	r24, r20
 bd4:	38 f0       	brcs	.+14     	; 0xbe4 <__divsf3_pse+0x26>
 bd6:	9f 5f       	subi	r25, 0xFF	; 255
 bd8:	5f 4f       	sbci	r21, 0xFF	; 255
 bda:	22 0f       	add	r18, r18
 bdc:	33 1f       	adc	r19, r19
 bde:	44 1f       	adc	r20, r20
 be0:	aa 1f       	adc	r26, r26
 be2:	a9 f3       	breq	.-22     	; 0xbce <__divsf3_pse+0x10>
 be4:	35 d0       	rcall	.+106    	; 0xc50 <__divsf3_pse+0x92>
 be6:	0e 2e       	mov	r0, r30
 be8:	3a f0       	brmi	.+14     	; 0xbf8 <__divsf3_pse+0x3a>
 bea:	e0 e8       	ldi	r30, 0x80	; 128
 bec:	32 d0       	rcall	.+100    	; 0xc52 <__divsf3_pse+0x94>
 bee:	91 50       	subi	r25, 0x01	; 1
 bf0:	50 40       	sbci	r21, 0x00	; 0
 bf2:	e6 95       	lsr	r30
 bf4:	00 1c       	adc	r0, r0
 bf6:	ca f7       	brpl	.-14     	; 0xbea <__divsf3_pse+0x2c>
 bf8:	2b d0       	rcall	.+86     	; 0xc50 <__divsf3_pse+0x92>
 bfa:	fe 2f       	mov	r31, r30
 bfc:	29 d0       	rcall	.+82     	; 0xc50 <__divsf3_pse+0x92>
 bfe:	66 0f       	add	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	bb 1f       	adc	r27, r27
 c06:	26 17       	cp	r18, r22
 c08:	37 07       	cpc	r19, r23
 c0a:	48 07       	cpc	r20, r24
 c0c:	ab 07       	cpc	r26, r27
 c0e:	b0 e8       	ldi	r27, 0x80	; 128
 c10:	09 f0       	breq	.+2      	; 0xc14 <__divsf3_pse+0x56>
 c12:	bb 0b       	sbc	r27, r27
 c14:	80 2d       	mov	r24, r0
 c16:	bf 01       	movw	r22, r30
 c18:	ff 27       	eor	r31, r31
 c1a:	93 58       	subi	r25, 0x83	; 131
 c1c:	5f 4f       	sbci	r21, 0xFF	; 255
 c1e:	3a f0       	brmi	.+14     	; 0xc2e <__divsf3_pse+0x70>
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	51 05       	cpc	r21, r1
 c24:	78 f0       	brcs	.+30     	; 0xc44 <__divsf3_pse+0x86>
 c26:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
 c2a:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	e4 f3       	brlt	.-8      	; 0xc2a <__divsf3_pse+0x6c>
 c32:	98 3e       	cpi	r25, 0xE8	; 232
 c34:	d4 f3       	brlt	.-12     	; 0xc2a <__divsf3_pse+0x6c>
 c36:	86 95       	lsr	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f7 95       	ror	r31
 c40:	9f 5f       	subi	r25, 0xFF	; 255
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__divsf3_pse+0x78>
 c44:	88 0f       	add	r24, r24
 c46:	91 1d       	adc	r25, r1
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret
 c50:	e1 e0       	ldi	r30, 0x01	; 1
 c52:	66 0f       	add	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	bb 1f       	adc	r27, r27
 c5a:	62 17       	cp	r22, r18
 c5c:	73 07       	cpc	r23, r19
 c5e:	84 07       	cpc	r24, r20
 c60:	ba 07       	cpc	r27, r26
 c62:	20 f0       	brcs	.+8      	; 0xc6c <__divsf3_pse+0xae>
 c64:	62 1b       	sub	r22, r18
 c66:	73 0b       	sbc	r23, r19
 c68:	84 0b       	sbc	r24, r20
 c6a:	ba 0b       	sbc	r27, r26
 c6c:	ee 1f       	adc	r30, r30
 c6e:	88 f7       	brcc	.-30     	; 0xc52 <__divsf3_pse+0x94>
 c70:	e0 95       	com	r30
 c72:	08 95       	ret

00000c74 <__fixsfsi>:
 c74:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixunssfsi>
 c78:	68 94       	set
 c7a:	b1 11       	cpse	r27, r1
 c7c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
 c80:	08 95       	ret

00000c82 <__fixunssfsi>:
 c82:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_splitA>
 c86:	88 f0       	brcs	.+34     	; 0xcaa <__fixunssfsi+0x28>
 c88:	9f 57       	subi	r25, 0x7F	; 127
 c8a:	98 f0       	brcs	.+38     	; 0xcb2 <__fixunssfsi+0x30>
 c8c:	b9 2f       	mov	r27, r25
 c8e:	99 27       	eor	r25, r25
 c90:	b7 51       	subi	r27, 0x17	; 23
 c92:	b0 f0       	brcs	.+44     	; 0xcc0 <__fixunssfsi+0x3e>
 c94:	e1 f0       	breq	.+56     	; 0xcce <__fixunssfsi+0x4c>
 c96:	66 0f       	add	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	99 1f       	adc	r25, r25
 c9e:	1a f0       	brmi	.+6      	; 0xca6 <__fixunssfsi+0x24>
 ca0:	ba 95       	dec	r27
 ca2:	c9 f7       	brne	.-14     	; 0xc96 <__fixunssfsi+0x14>
 ca4:	14 c0       	rjmp	.+40     	; 0xcce <__fixunssfsi+0x4c>
 ca6:	b1 30       	cpi	r27, 0x01	; 1
 ca8:	91 f0       	breq	.+36     	; 0xcce <__fixunssfsi+0x4c>
 caa:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fp_zero>
 cae:	b1 e0       	ldi	r27, 0x01	; 1
 cb0:	08 95       	ret
 cb2:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_zero>
 cb6:	67 2f       	mov	r22, r23
 cb8:	78 2f       	mov	r23, r24
 cba:	88 27       	eor	r24, r24
 cbc:	b8 5f       	subi	r27, 0xF8	; 248
 cbe:	39 f0       	breq	.+14     	; 0xcce <__fixunssfsi+0x4c>
 cc0:	b9 3f       	cpi	r27, 0xF9	; 249
 cc2:	cc f3       	brlt	.-14     	; 0xcb6 <__fixunssfsi+0x34>
 cc4:	86 95       	lsr	r24
 cc6:	77 95       	ror	r23
 cc8:	67 95       	ror	r22
 cca:	b3 95       	inc	r27
 ccc:	d9 f7       	brne	.-10     	; 0xcc4 <__fixunssfsi+0x42>
 cce:	3e f4       	brtc	.+14     	; 0xcde <__fixunssfsi+0x5c>
 cd0:	90 95       	com	r25
 cd2:	80 95       	com	r24
 cd4:	70 95       	com	r23
 cd6:	61 95       	neg	r22
 cd8:	7f 4f       	sbci	r23, 0xFF	; 255
 cda:	8f 4f       	sbci	r24, 0xFF	; 255
 cdc:	9f 4f       	sbci	r25, 0xFF	; 255
 cde:	08 95       	ret

00000ce0 <__floatunsisf>:
 ce0:	e8 94       	clt
 ce2:	09 c0       	rjmp	.+18     	; 0xcf6 <__floatsisf+0x12>

00000ce4 <__floatsisf>:
 ce4:	97 fb       	bst	r25, 7
 ce6:	3e f4       	brtc	.+14     	; 0xcf6 <__floatsisf+0x12>
 ce8:	90 95       	com	r25
 cea:	80 95       	com	r24
 cec:	70 95       	com	r23
 cee:	61 95       	neg	r22
 cf0:	7f 4f       	sbci	r23, 0xFF	; 255
 cf2:	8f 4f       	sbci	r24, 0xFF	; 255
 cf4:	9f 4f       	sbci	r25, 0xFF	; 255
 cf6:	99 23       	and	r25, r25
 cf8:	a9 f0       	breq	.+42     	; 0xd24 <__floatsisf+0x40>
 cfa:	f9 2f       	mov	r31, r25
 cfc:	96 e9       	ldi	r25, 0x96	; 150
 cfe:	bb 27       	eor	r27, r27
 d00:	93 95       	inc	r25
 d02:	f6 95       	lsr	r31
 d04:	87 95       	ror	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	b7 95       	ror	r27
 d0c:	f1 11       	cpse	r31, r1
 d0e:	f8 cf       	rjmp	.-16     	; 0xd00 <__floatsisf+0x1c>
 d10:	fa f4       	brpl	.+62     	; 0xd50 <__floatsisf+0x6c>
 d12:	bb 0f       	add	r27, r27
 d14:	11 f4       	brne	.+4      	; 0xd1a <__floatsisf+0x36>
 d16:	60 ff       	sbrs	r22, 0
 d18:	1b c0       	rjmp	.+54     	; 0xd50 <__floatsisf+0x6c>
 d1a:	6f 5f       	subi	r22, 0xFF	; 255
 d1c:	7f 4f       	sbci	r23, 0xFF	; 255
 d1e:	8f 4f       	sbci	r24, 0xFF	; 255
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	16 c0       	rjmp	.+44     	; 0xd50 <__floatsisf+0x6c>
 d24:	88 23       	and	r24, r24
 d26:	11 f0       	breq	.+4      	; 0xd2c <__floatsisf+0x48>
 d28:	96 e9       	ldi	r25, 0x96	; 150
 d2a:	11 c0       	rjmp	.+34     	; 0xd4e <__floatsisf+0x6a>
 d2c:	77 23       	and	r23, r23
 d2e:	21 f0       	breq	.+8      	; 0xd38 <__floatsisf+0x54>
 d30:	9e e8       	ldi	r25, 0x8E	; 142
 d32:	87 2f       	mov	r24, r23
 d34:	76 2f       	mov	r23, r22
 d36:	05 c0       	rjmp	.+10     	; 0xd42 <__floatsisf+0x5e>
 d38:	66 23       	and	r22, r22
 d3a:	71 f0       	breq	.+28     	; 0xd58 <__floatsisf+0x74>
 d3c:	96 e8       	ldi	r25, 0x86	; 134
 d3e:	86 2f       	mov	r24, r22
 d40:	70 e0       	ldi	r23, 0x00	; 0
 d42:	60 e0       	ldi	r22, 0x00	; 0
 d44:	2a f0       	brmi	.+10     	; 0xd50 <__floatsisf+0x6c>
 d46:	9a 95       	dec	r25
 d48:	66 0f       	add	r22, r22
 d4a:	77 1f       	adc	r23, r23
 d4c:	88 1f       	adc	r24, r24
 d4e:	da f7       	brpl	.-10     	; 0xd46 <__floatsisf+0x62>
 d50:	88 0f       	add	r24, r24
 d52:	96 95       	lsr	r25
 d54:	87 95       	ror	r24
 d56:	97 f9       	bld	r25, 7
 d58:	08 95       	ret
 d5a:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
 d5e:	20 f0       	brcs	.+8      	; 0xd68 <__floatsisf+0x84>
 d60:	19 f0       	breq	.+6      	; 0xd68 <__floatsisf+0x84>
 d62:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
 d66:	50 f4       	brcc	.+20     	; 0xd7c <fmod+0xc>
 d68:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_nan>
 d6c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>

00000d70 <fmod>:
 d70:	e9 2f       	mov	r30, r25
 d72:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
 d76:	88 f3       	brcs	.-30     	; 0xd5a <__floatsisf+0x76>
 d78:	55 23       	and	r21, r21
 d7a:	b1 f3       	breq	.-20     	; 0xd68 <__floatsisf+0x84>
 d7c:	e7 fb       	bst	r30, 7
 d7e:	62 17       	cp	r22, r18
 d80:	73 07       	cpc	r23, r19
 d82:	84 07       	cpc	r24, r20
 d84:	95 07       	cpc	r25, r21
 d86:	a8 f1       	brcs	.+106    	; 0xdf2 <fmod+0x82>
 d88:	89 f3       	breq	.-30     	; 0xd6c <__floatsisf+0x88>
 d8a:	e9 2f       	mov	r30, r25
 d8c:	ff 27       	eor	r31, r31
 d8e:	88 23       	and	r24, r24
 d90:	2a f0       	brmi	.+10     	; 0xd9c <fmod+0x2c>
 d92:	31 97       	sbiw	r30, 0x01	; 1
 d94:	66 0f       	add	r22, r22
 d96:	77 1f       	adc	r23, r23
 d98:	88 1f       	adc	r24, r24
 d9a:	da f7       	brpl	.-10     	; 0xd92 <fmod+0x22>
 d9c:	95 2f       	mov	r25, r21
 d9e:	55 27       	eor	r21, r21
 da0:	44 23       	and	r20, r20
 da2:	32 f0       	brmi	.+12     	; 0xdb0 <fmod+0x40>
 da4:	91 50       	subi	r25, 0x01	; 1
 da6:	50 40       	sbci	r21, 0x00	; 0
 da8:	22 0f       	add	r18, r18
 daa:	33 1f       	adc	r19, r19
 dac:	44 1f       	adc	r20, r20
 dae:	d2 f7       	brpl	.-12     	; 0xda4 <fmod+0x34>
 db0:	bb 27       	eor	r27, r27
 db2:	e9 1b       	sub	r30, r25
 db4:	f5 0b       	sbc	r31, r21
 db6:	62 1b       	sub	r22, r18
 db8:	73 0b       	sbc	r23, r19
 dba:	84 0b       	sbc	r24, r20
 dbc:	b1 09       	sbc	r27, r1
 dbe:	b1 f2       	breq	.-84     	; 0xd6c <__floatsisf+0x88>
 dc0:	22 f4       	brpl	.+8      	; 0xdca <fmod+0x5a>
 dc2:	62 0f       	add	r22, r18
 dc4:	73 1f       	adc	r23, r19
 dc6:	84 1f       	adc	r24, r20
 dc8:	b1 1d       	adc	r27, r1
 dca:	31 97       	sbiw	r30, 0x01	; 1
 dcc:	2a f0       	brmi	.+10     	; 0xdd8 <fmod+0x68>
 dce:	66 0f       	add	r22, r22
 dd0:	77 1f       	adc	r23, r23
 dd2:	88 1f       	adc	r24, r24
 dd4:	bb 1f       	adc	r27, r27
 dd6:	ef cf       	rjmp	.-34     	; 0xdb6 <fmod+0x46>
 dd8:	91 50       	subi	r25, 0x01	; 1
 dda:	50 40       	sbci	r21, 0x00	; 0
 ddc:	62 f0       	brmi	.+24     	; 0xdf6 <fmod+0x86>
 dde:	41 f0       	breq	.+16     	; 0xdf0 <fmod+0x80>
 de0:	88 23       	and	r24, r24
 de2:	32 f0       	brmi	.+12     	; 0xdf0 <fmod+0x80>
 de4:	66 0f       	add	r22, r22
 de6:	77 1f       	adc	r23, r23
 de8:	88 1f       	adc	r24, r24
 dea:	91 50       	subi	r25, 0x01	; 1
 dec:	50 40       	sbci	r21, 0x00	; 0
 dee:	c1 f7       	brne	.-16     	; 0xde0 <fmod+0x70>
 df0:	93 95       	inc	r25
 df2:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_mpack>
 df6:	86 95       	lsr	r24
 df8:	77 95       	ror	r23
 dfa:	67 95       	ror	r22
 dfc:	9f 5f       	subi	r25, 0xFF	; 255
 dfe:	d9 f7       	brne	.-10     	; 0xdf6 <fmod+0x86>
 e00:	f7 cf       	rjmp	.-18     	; 0xdf0 <fmod+0x80>

00000e02 <__fp_inf>:
 e02:	97 f9       	bld	r25, 7
 e04:	9f 67       	ori	r25, 0x7F	; 127
 e06:	80 e8       	ldi	r24, 0x80	; 128
 e08:	70 e0       	ldi	r23, 0x00	; 0
 e0a:	60 e0       	ldi	r22, 0x00	; 0
 e0c:	08 95       	ret

00000e0e <__fp_mpack>:
 e0e:	9f 3f       	cpi	r25, 0xFF	; 255
 e10:	31 f0       	breq	.+12     	; 0xe1e <__fp_mpack_finite+0xc>

00000e12 <__fp_mpack_finite>:
 e12:	91 50       	subi	r25, 0x01	; 1
 e14:	20 f4       	brcc	.+8      	; 0xe1e <__fp_mpack_finite+0xc>
 e16:	87 95       	ror	r24
 e18:	77 95       	ror	r23
 e1a:	67 95       	ror	r22
 e1c:	b7 95       	ror	r27
 e1e:	88 0f       	add	r24, r24
 e20:	91 1d       	adc	r25, r1
 e22:	96 95       	lsr	r25
 e24:	87 95       	ror	r24
 e26:	97 f9       	bld	r25, 7
 e28:	08 95       	ret

00000e2a <__fp_nan>:
 e2a:	9f ef       	ldi	r25, 0xFF	; 255
 e2c:	80 ec       	ldi	r24, 0xC0	; 192
 e2e:	08 95       	ret

00000e30 <__fp_pscA>:
 e30:	00 24       	eor	r0, r0
 e32:	0a 94       	dec	r0
 e34:	16 16       	cp	r1, r22
 e36:	17 06       	cpc	r1, r23
 e38:	18 06       	cpc	r1, r24
 e3a:	09 06       	cpc	r0, r25
 e3c:	08 95       	ret

00000e3e <__fp_pscB>:
 e3e:	00 24       	eor	r0, r0
 e40:	0a 94       	dec	r0
 e42:	12 16       	cp	r1, r18
 e44:	13 06       	cpc	r1, r19
 e46:	14 06       	cpc	r1, r20
 e48:	05 06       	cpc	r0, r21
 e4a:	08 95       	ret

00000e4c <__fp_round>:
 e4c:	09 2e       	mov	r0, r25
 e4e:	03 94       	inc	r0
 e50:	00 0c       	add	r0, r0
 e52:	11 f4       	brne	.+4      	; 0xe58 <__fp_round+0xc>
 e54:	88 23       	and	r24, r24
 e56:	52 f0       	brmi	.+20     	; 0xe6c <__fp_round+0x20>
 e58:	bb 0f       	add	r27, r27
 e5a:	40 f4       	brcc	.+16     	; 0xe6c <__fp_round+0x20>
 e5c:	bf 2b       	or	r27, r31
 e5e:	11 f4       	brne	.+4      	; 0xe64 <__fp_round+0x18>
 e60:	60 ff       	sbrs	r22, 0
 e62:	04 c0       	rjmp	.+8      	; 0xe6c <__fp_round+0x20>
 e64:	6f 5f       	subi	r22, 0xFF	; 255
 e66:	7f 4f       	sbci	r23, 0xFF	; 255
 e68:	8f 4f       	sbci	r24, 0xFF	; 255
 e6a:	9f 4f       	sbci	r25, 0xFF	; 255
 e6c:	08 95       	ret

00000e6e <__fp_split3>:
 e6e:	57 fd       	sbrc	r21, 7
 e70:	90 58       	subi	r25, 0x80	; 128
 e72:	44 0f       	add	r20, r20
 e74:	55 1f       	adc	r21, r21
 e76:	59 f0       	breq	.+22     	; 0xe8e <__fp_splitA+0x10>
 e78:	5f 3f       	cpi	r21, 0xFF	; 255
 e7a:	71 f0       	breq	.+28     	; 0xe98 <__fp_splitA+0x1a>
 e7c:	47 95       	ror	r20

00000e7e <__fp_splitA>:
 e7e:	88 0f       	add	r24, r24
 e80:	97 fb       	bst	r25, 7
 e82:	99 1f       	adc	r25, r25
 e84:	61 f0       	breq	.+24     	; 0xe9e <__fp_splitA+0x20>
 e86:	9f 3f       	cpi	r25, 0xFF	; 255
 e88:	79 f0       	breq	.+30     	; 0xea8 <__fp_splitA+0x2a>
 e8a:	87 95       	ror	r24
 e8c:	08 95       	ret
 e8e:	12 16       	cp	r1, r18
 e90:	13 06       	cpc	r1, r19
 e92:	14 06       	cpc	r1, r20
 e94:	55 1f       	adc	r21, r21
 e96:	f2 cf       	rjmp	.-28     	; 0xe7c <__fp_split3+0xe>
 e98:	46 95       	lsr	r20
 e9a:	f1 df       	rcall	.-30     	; 0xe7e <__fp_splitA>
 e9c:	08 c0       	rjmp	.+16     	; 0xeae <__fp_splitA+0x30>
 e9e:	16 16       	cp	r1, r22
 ea0:	17 06       	cpc	r1, r23
 ea2:	18 06       	cpc	r1, r24
 ea4:	99 1f       	adc	r25, r25
 ea6:	f1 cf       	rjmp	.-30     	; 0xe8a <__fp_splitA+0xc>
 ea8:	86 95       	lsr	r24
 eaa:	71 05       	cpc	r23, r1
 eac:	61 05       	cpc	r22, r1
 eae:	08 94       	sec
 eb0:	08 95       	ret

00000eb2 <__fp_zero>:
 eb2:	e8 94       	clt

00000eb4 <__fp_szero>:
 eb4:	bb 27       	eor	r27, r27
 eb6:	66 27       	eor	r22, r22
 eb8:	77 27       	eor	r23, r23
 eba:	cb 01       	movw	r24, r22
 ebc:	97 f9       	bld	r25, 7
 ebe:	08 95       	ret

00000ec0 <__mulsf3>:
 ec0:	0e 94 73 07 	call	0xee6	; 0xee6 <__mulsf3x>
 ec4:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>
 ec8:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
 ecc:	38 f0       	brcs	.+14     	; 0xedc <__mulsf3+0x1c>
 ece:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
 ed2:	20 f0       	brcs	.+8      	; 0xedc <__mulsf3+0x1c>
 ed4:	95 23       	and	r25, r21
 ed6:	11 f0       	breq	.+4      	; 0xedc <__mulsf3+0x1c>
 ed8:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
 edc:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_nan>
 ee0:	11 24       	eor	r1, r1
 ee2:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>

00000ee6 <__mulsf3x>:
 ee6:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
 eea:	70 f3       	brcs	.-36     	; 0xec8 <__mulsf3+0x8>

00000eec <__mulsf3_pse>:
 eec:	95 9f       	mul	r25, r21
 eee:	c1 f3       	breq	.-16     	; 0xee0 <__mulsf3+0x20>
 ef0:	95 0f       	add	r25, r21
 ef2:	50 e0       	ldi	r21, 0x00	; 0
 ef4:	55 1f       	adc	r21, r21
 ef6:	62 9f       	mul	r22, r18
 ef8:	f0 01       	movw	r30, r0
 efa:	72 9f       	mul	r23, r18
 efc:	bb 27       	eor	r27, r27
 efe:	f0 0d       	add	r31, r0
 f00:	b1 1d       	adc	r27, r1
 f02:	63 9f       	mul	r22, r19
 f04:	aa 27       	eor	r26, r26
 f06:	f0 0d       	add	r31, r0
 f08:	b1 1d       	adc	r27, r1
 f0a:	aa 1f       	adc	r26, r26
 f0c:	64 9f       	mul	r22, r20
 f0e:	66 27       	eor	r22, r22
 f10:	b0 0d       	add	r27, r0
 f12:	a1 1d       	adc	r26, r1
 f14:	66 1f       	adc	r22, r22
 f16:	82 9f       	mul	r24, r18
 f18:	22 27       	eor	r18, r18
 f1a:	b0 0d       	add	r27, r0
 f1c:	a1 1d       	adc	r26, r1
 f1e:	62 1f       	adc	r22, r18
 f20:	73 9f       	mul	r23, r19
 f22:	b0 0d       	add	r27, r0
 f24:	a1 1d       	adc	r26, r1
 f26:	62 1f       	adc	r22, r18
 f28:	83 9f       	mul	r24, r19
 f2a:	a0 0d       	add	r26, r0
 f2c:	61 1d       	adc	r22, r1
 f2e:	22 1f       	adc	r18, r18
 f30:	74 9f       	mul	r23, r20
 f32:	33 27       	eor	r19, r19
 f34:	a0 0d       	add	r26, r0
 f36:	61 1d       	adc	r22, r1
 f38:	23 1f       	adc	r18, r19
 f3a:	84 9f       	mul	r24, r20
 f3c:	60 0d       	add	r22, r0
 f3e:	21 1d       	adc	r18, r1
 f40:	82 2f       	mov	r24, r18
 f42:	76 2f       	mov	r23, r22
 f44:	6a 2f       	mov	r22, r26
 f46:	11 24       	eor	r1, r1
 f48:	9f 57       	subi	r25, 0x7F	; 127
 f4a:	50 40       	sbci	r21, 0x00	; 0
 f4c:	9a f0       	brmi	.+38     	; 0xf74 <__mulsf3_pse+0x88>
 f4e:	f1 f0       	breq	.+60     	; 0xf8c <__mulsf3_pse+0xa0>
 f50:	88 23       	and	r24, r24
 f52:	4a f0       	brmi	.+18     	; 0xf66 <__mulsf3_pse+0x7a>
 f54:	ee 0f       	add	r30, r30
 f56:	ff 1f       	adc	r31, r31
 f58:	bb 1f       	adc	r27, r27
 f5a:	66 1f       	adc	r22, r22
 f5c:	77 1f       	adc	r23, r23
 f5e:	88 1f       	adc	r24, r24
 f60:	91 50       	subi	r25, 0x01	; 1
 f62:	50 40       	sbci	r21, 0x00	; 0
 f64:	a9 f7       	brne	.-22     	; 0xf50 <__mulsf3_pse+0x64>
 f66:	9e 3f       	cpi	r25, 0xFE	; 254
 f68:	51 05       	cpc	r21, r1
 f6a:	80 f0       	brcs	.+32     	; 0xf8c <__mulsf3_pse+0xa0>
 f6c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_inf>
 f70:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
 f74:	5f 3f       	cpi	r21, 0xFF	; 255
 f76:	e4 f3       	brlt	.-8      	; 0xf70 <__mulsf3_pse+0x84>
 f78:	98 3e       	cpi	r25, 0xE8	; 232
 f7a:	d4 f3       	brlt	.-12     	; 0xf70 <__mulsf3_pse+0x84>
 f7c:	86 95       	lsr	r24
 f7e:	77 95       	ror	r23
 f80:	67 95       	ror	r22
 f82:	b7 95       	ror	r27
 f84:	f7 95       	ror	r31
 f86:	e7 95       	ror	r30
 f88:	9f 5f       	subi	r25, 0xFF	; 255
 f8a:	c1 f7       	brne	.-16     	; 0xf7c <__mulsf3_pse+0x90>
 f8c:	fe 2b       	or	r31, r30
 f8e:	88 0f       	add	r24, r24
 f90:	91 1d       	adc	r25, r1
 f92:	96 95       	lsr	r25
 f94:	87 95       	ror	r24
 f96:	97 f9       	bld	r25, 7
 f98:	08 95       	ret

00000f9a <__divmodhi4>:
 f9a:	97 fb       	bst	r25, 7
 f9c:	07 2e       	mov	r0, r23
 f9e:	16 f4       	brtc	.+4      	; 0xfa4 <__divmodhi4+0xa>
 fa0:	00 94       	com	r0
 fa2:	07 d0       	rcall	.+14     	; 0xfb2 <__divmodhi4_neg1>
 fa4:	77 fd       	sbrc	r23, 7
 fa6:	09 d0       	rcall	.+18     	; 0xfba <__divmodhi4_neg2>
 fa8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__udivmodhi4>
 fac:	07 fc       	sbrc	r0, 7
 fae:	05 d0       	rcall	.+10     	; 0xfba <__divmodhi4_neg2>
 fb0:	3e f4       	brtc	.+14     	; 0xfc0 <__divmodhi4_exit>

00000fb2 <__divmodhi4_neg1>:
 fb2:	90 95       	com	r25
 fb4:	81 95       	neg	r24
 fb6:	9f 4f       	sbci	r25, 0xFF	; 255
 fb8:	08 95       	ret

00000fba <__divmodhi4_neg2>:
 fba:	70 95       	com	r23
 fbc:	61 95       	neg	r22
 fbe:	7f 4f       	sbci	r23, 0xFF	; 255

00000fc0 <__divmodhi4_exit>:
 fc0:	08 95       	ret

00000fc2 <__udivmodhi4>:
 fc2:	aa 1b       	sub	r26, r26
 fc4:	bb 1b       	sub	r27, r27
 fc6:	51 e1       	ldi	r21, 0x11	; 17
 fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <__udivmodhi4_ep>

00000fca <__udivmodhi4_loop>:
 fca:	aa 1f       	adc	r26, r26
 fcc:	bb 1f       	adc	r27, r27
 fce:	a6 17       	cp	r26, r22
 fd0:	b7 07       	cpc	r27, r23
 fd2:	10 f0       	brcs	.+4      	; 0xfd8 <__udivmodhi4_ep>
 fd4:	a6 1b       	sub	r26, r22
 fd6:	b7 0b       	sbc	r27, r23

00000fd8 <__udivmodhi4_ep>:
 fd8:	88 1f       	adc	r24, r24
 fda:	99 1f       	adc	r25, r25
 fdc:	5a 95       	dec	r21
 fde:	a9 f7       	brne	.-22     	; 0xfca <__udivmodhi4_loop>
 fe0:	80 95       	com	r24
 fe2:	90 95       	com	r25
 fe4:	bc 01       	movw	r22, r24
 fe6:	cd 01       	movw	r24, r26
 fe8:	08 95       	ret

00000fea <_exit>:
 fea:	f8 94       	cli

00000fec <__stop_program>:
 fec:	ff cf       	rjmp	.-2      	; 0xfec <__stop_program>
